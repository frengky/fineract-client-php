<?php
/**
 * JournalEntriesApi
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Frengky\Fineract\ApiException;
use Frengky\Fineract\Configuration;
use Frengky\Fineract\HeaderSelector;
use Frengky\Fineract\ObjectSerializer;

/**
 * JournalEntriesApi Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JournalEntriesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createGLJournalEntry
     *
     * Create \"Balanced\" Journal Entries
     *
     * @param  \Frengky\Fineract\Model\JournalEntryCommand $body body (optional)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostJournalEntriesResponse
     */
    public function createGLJournalEntry($body = null, $command = null)
    {
        list($response) = $this->createGLJournalEntryWithHttpInfo($body, $command);
        return $response;
    }

    /**
     * Operation createGLJournalEntryWithHttpInfo
     *
     * Create \"Balanced\" Journal Entries
     *
     * @param  \Frengky\Fineract\Model\JournalEntryCommand $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostJournalEntriesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createGLJournalEntryWithHttpInfo($body = null, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PostJournalEntriesResponse';
        $request = $this->createGLJournalEntryRequest($body, $command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostJournalEntriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createGLJournalEntryAsync
     *
     * Create \"Balanced\" Journal Entries
     *
     * @param  \Frengky\Fineract\Model\JournalEntryCommand $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGLJournalEntryAsync($body = null, $command = null)
    {
        return $this->createGLJournalEntryAsyncWithHttpInfo($body, $command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createGLJournalEntryAsyncWithHttpInfo
     *
     * Create \"Balanced\" Journal Entries
     *
     * @param  \Frengky\Fineract\Model\JournalEntryCommand $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createGLJournalEntryAsyncWithHttpInfo($body = null, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PostJournalEntriesResponse';
        $request = $this->createGLJournalEntryRequest($body, $command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createGLJournalEntry'
     *
     * @param  \Frengky\Fineract\Model\JournalEntryCommand $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createGLJournalEntryRequest($body = null, $command = null)
    {

        $resourcePath = '/journalentries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($command !== null) {
            $queryParams['command'] = ObjectSerializer::toQueryValue($command, null);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReversalJournalEntry
     *
     * Update Running balances for Journal Entries
     *
     * @param  string $transactionId transactionId (required)
     * @param  \Frengky\Fineract\Model\PostJournalEntriesTransactionIdRequest $body body (optional)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostJournalEntriesTransactionIdResponse
     */
    public function createReversalJournalEntry($transactionId, $body = null, $command = null)
    {
        list($response) = $this->createReversalJournalEntryWithHttpInfo($transactionId, $body, $command);
        return $response;
    }

    /**
     * Operation createReversalJournalEntryWithHttpInfo
     *
     * Update Running balances for Journal Entries
     *
     * @param  string $transactionId transactionId (required)
     * @param  \Frengky\Fineract\Model\PostJournalEntriesTransactionIdRequest $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostJournalEntriesTransactionIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createReversalJournalEntryWithHttpInfo($transactionId, $body = null, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PostJournalEntriesTransactionIdResponse';
        $request = $this->createReversalJournalEntryRequest($transactionId, $body, $command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostJournalEntriesTransactionIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createReversalJournalEntryAsync
     *
     * Update Running balances for Journal Entries
     *
     * @param  string $transactionId transactionId (required)
     * @param  \Frengky\Fineract\Model\PostJournalEntriesTransactionIdRequest $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReversalJournalEntryAsync($transactionId, $body = null, $command = null)
    {
        return $this->createReversalJournalEntryAsyncWithHttpInfo($transactionId, $body, $command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createReversalJournalEntryAsyncWithHttpInfo
     *
     * Update Running balances for Journal Entries
     *
     * @param  string $transactionId transactionId (required)
     * @param  \Frengky\Fineract\Model\PostJournalEntriesTransactionIdRequest $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReversalJournalEntryAsyncWithHttpInfo($transactionId, $body = null, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PostJournalEntriesTransactionIdResponse';
        $request = $this->createReversalJournalEntryRequest($transactionId, $body, $command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createReversalJournalEntry'
     *
     * @param  string $transactionId transactionId (required)
     * @param  \Frengky\Fineract\Model\PostJournalEntriesTransactionIdRequest $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createReversalJournalEntryRequest($transactionId, $body = null, $command = null)
    {
        // verify the required parameter 'transactionId' is set
        if ($transactionId === null || (is_array($transactionId) && count($transactionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transactionId when calling createReversalJournalEntry'
            );
        }

        $resourcePath = '/journalentries/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($command !== null) {
            $queryParams['command'] = ObjectSerializer::toQueryValue($command, null);
        }

        // path params
        if ($transactionId !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transactionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJournalEntriesTemplate
     *
     * @param  int $officeId officeId (optional)
     * @param  string $dateFormat dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getJournalEntriesTemplate($officeId = null, $dateFormat = null)
    {
        $this->getJournalEntriesTemplateWithHttpInfo($officeId, $dateFormat);
    }

    /**
     * Operation getJournalEntriesTemplateWithHttpInfo
     *
     * @param  int $officeId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJournalEntriesTemplateWithHttpInfo($officeId = null, $dateFormat = null)
    {
        $returnType = '';
        $request = $this->getJournalEntriesTemplateRequest($officeId, $dateFormat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getJournalEntriesTemplateAsync
     *
     * 
     *
     * @param  int $officeId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJournalEntriesTemplateAsync($officeId = null, $dateFormat = null)
    {
        return $this->getJournalEntriesTemplateAsyncWithHttpInfo($officeId, $dateFormat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJournalEntriesTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $officeId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJournalEntriesTemplateAsyncWithHttpInfo($officeId = null, $dateFormat = null)
    {
        $returnType = '';
        $request = $this->getJournalEntriesTemplateRequest($officeId, $dateFormat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJournalEntriesTemplate'
     *
     * @param  int $officeId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJournalEntriesTemplateRequest($officeId = null, $dateFormat = null)
    {

        $resourcePath = '/journalentries/downloadtemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($officeId !== null) {
            $queryParams['officeId'] = ObjectSerializer::toQueryValue($officeId, 'int64');
        }
        // query params
        if ($dateFormat !== null) {
            $queryParams['dateFormat'] = ObjectSerializer::toQueryValue($dateFormat, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.ms-excel']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.ms-excel'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postJournalEntriesTemplate
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file file (optional)
     * @param  string $locale locale (optional)
     * @param  string $dateFormat dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function postJournalEntriesTemplate($file = null, $locale = null, $dateFormat = null)
    {
        list($response) = $this->postJournalEntriesTemplateWithHttpInfo($file, $locale, $dateFormat);
        return $response;
    }

    /**
     * Operation postJournalEntriesTemplateWithHttpInfo
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postJournalEntriesTemplateWithHttpInfo($file = null, $locale = null, $dateFormat = null)
    {
        $returnType = 'string';
        $request = $this->postJournalEntriesTemplateRequest($file, $locale, $dateFormat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postJournalEntriesTemplateAsync
     *
     * 
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postJournalEntriesTemplateAsync($file = null, $locale = null, $dateFormat = null)
    {
        return $this->postJournalEntriesTemplateAsyncWithHttpInfo($file, $locale, $dateFormat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postJournalEntriesTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postJournalEntriesTemplateAsyncWithHttpInfo($file = null, $locale = null, $dateFormat = null)
    {
        $returnType = 'string';
        $request = $this->postJournalEntriesTemplateRequest($file, $locale, $dateFormat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postJournalEntriesTemplate'
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postJournalEntriesTemplateRequest($file = null, $locale = null, $dateFormat = null)
    {

        $resourcePath = '/journalentries/uploadtemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = ObjectSerializer::toFormValue($locale);
        }
        // form params
        if ($dateFormat !== null) {
            $formParams['dateFormat'] = ObjectSerializer::toFormValue($dateFormat);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retreiveJournalEntryById
     *
     * Retrieve a single Entry
     *
     * @param  int $journalEntryId journalEntryId (required)
     * @param  bool $runningBalance runningBalance (optional)
     * @param  bool $transactionDetails transactionDetails (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\JournalEntryData
     */
    public function retreiveJournalEntryById($journalEntryId, $runningBalance = null, $transactionDetails = null)
    {
        list($response) = $this->retreiveJournalEntryByIdWithHttpInfo($journalEntryId, $runningBalance, $transactionDetails);
        return $response;
    }

    /**
     * Operation retreiveJournalEntryByIdWithHttpInfo
     *
     * Retrieve a single Entry
     *
     * @param  int $journalEntryId journalEntryId (required)
     * @param  bool $runningBalance runningBalance (optional)
     * @param  bool $transactionDetails transactionDetails (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\JournalEntryData, HTTP status code, HTTP response headers (array of strings)
     */
    public function retreiveJournalEntryByIdWithHttpInfo($journalEntryId, $runningBalance = null, $transactionDetails = null)
    {
        $returnType = '\Frengky\Fineract\Model\JournalEntryData';
        $request = $this->retreiveJournalEntryByIdRequest($journalEntryId, $runningBalance, $transactionDetails);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\JournalEntryData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retreiveJournalEntryByIdAsync
     *
     * Retrieve a single Entry
     *
     * @param  int $journalEntryId journalEntryId (required)
     * @param  bool $runningBalance runningBalance (optional)
     * @param  bool $transactionDetails transactionDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retreiveJournalEntryByIdAsync($journalEntryId, $runningBalance = null, $transactionDetails = null)
    {
        return $this->retreiveJournalEntryByIdAsyncWithHttpInfo($journalEntryId, $runningBalance, $transactionDetails)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retreiveJournalEntryByIdAsyncWithHttpInfo
     *
     * Retrieve a single Entry
     *
     * @param  int $journalEntryId journalEntryId (required)
     * @param  bool $runningBalance runningBalance (optional)
     * @param  bool $transactionDetails transactionDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retreiveJournalEntryByIdAsyncWithHttpInfo($journalEntryId, $runningBalance = null, $transactionDetails = null)
    {
        $returnType = '\Frengky\Fineract\Model\JournalEntryData';
        $request = $this->retreiveJournalEntryByIdRequest($journalEntryId, $runningBalance, $transactionDetails);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retreiveJournalEntryById'
     *
     * @param  int $journalEntryId journalEntryId (required)
     * @param  bool $runningBalance runningBalance (optional)
     * @param  bool $transactionDetails transactionDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retreiveJournalEntryByIdRequest($journalEntryId, $runningBalance = null, $transactionDetails = null)
    {
        // verify the required parameter 'journalEntryId' is set
        if ($journalEntryId === null || (is_array($journalEntryId) && count($journalEntryId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $journalEntryId when calling retreiveJournalEntryById'
            );
        }

        $resourcePath = '/journalentries/{journalEntryId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($runningBalance !== null) {
            $queryParams['runningBalance'] = ObjectSerializer::toQueryValue($runningBalance, null);
        }
        // query params
        if ($transactionDetails !== null) {
            $queryParams['transactionDetails'] = ObjectSerializer::toQueryValue($transactionDetails, null);
        }

        // path params
        if ($journalEntryId !== null) {
            $resourcePath = str_replace(
                '{' . 'journalEntryId' . '}',
                ObjectSerializer::toPathValue($journalEntryId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveAll1
     *
     * List Journal Entries
     *
     * @param  int $officeId officeId (optional)
     * @param  int $glAccountId glAccountId (optional)
     * @param  bool $manualEntriesOnly manualEntriesOnly (optional)
     * @param  \Frengky\Fineract\Model\DateParam $fromDate fromDate (optional)
     * @param  \Frengky\Fineract\Model\DateParam $toDate toDate (optional)
     * @param  string $transactionId transactionId (optional)
     * @param  int $entityType entityType (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  string $locale locale (optional)
     * @param  string $dateFormat dateFormat (optional)
     * @param  int $loanId loanId (optional)
     * @param  int $savingsId savingsId (optional)
     * @param  bool $runningBalance runningBalance (optional)
     * @param  bool $transactionDetails transactionDetails (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\JournalEntryData[]
     */
    public function retrieveAll1($officeId = null, $glAccountId = null, $manualEntriesOnly = null, $fromDate = null, $toDate = null, $transactionId = null, $entityType = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null, $locale = null, $dateFormat = null, $loanId = null, $savingsId = null, $runningBalance = null, $transactionDetails = null)
    {
        list($response) = $this->retrieveAll1WithHttpInfo($officeId, $glAccountId, $manualEntriesOnly, $fromDate, $toDate, $transactionId, $entityType, $offset, $limit, $orderBy, $sortOrder, $locale, $dateFormat, $loanId, $savingsId, $runningBalance, $transactionDetails);
        return $response;
    }

    /**
     * Operation retrieveAll1WithHttpInfo
     *
     * List Journal Entries
     *
     * @param  int $officeId officeId (optional)
     * @param  int $glAccountId glAccountId (optional)
     * @param  bool $manualEntriesOnly manualEntriesOnly (optional)
     * @param  \Frengky\Fineract\Model\DateParam $fromDate fromDate (optional)
     * @param  \Frengky\Fineract\Model\DateParam $toDate toDate (optional)
     * @param  string $transactionId transactionId (optional)
     * @param  int $entityType entityType (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  string $locale locale (optional)
     * @param  string $dateFormat dateFormat (optional)
     * @param  int $loanId loanId (optional)
     * @param  int $savingsId savingsId (optional)
     * @param  bool $runningBalance runningBalance (optional)
     * @param  bool $transactionDetails transactionDetails (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\JournalEntryData[], HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveAll1WithHttpInfo($officeId = null, $glAccountId = null, $manualEntriesOnly = null, $fromDate = null, $toDate = null, $transactionId = null, $entityType = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null, $locale = null, $dateFormat = null, $loanId = null, $savingsId = null, $runningBalance = null, $transactionDetails = null)
    {
        $returnType = '\Frengky\Fineract\Model\JournalEntryData[]';
        $request = $this->retrieveAll1Request($officeId, $glAccountId, $manualEntriesOnly, $fromDate, $toDate, $transactionId, $entityType, $offset, $limit, $orderBy, $sortOrder, $locale, $dateFormat, $loanId, $savingsId, $runningBalance, $transactionDetails);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\JournalEntryData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveAll1Async
     *
     * List Journal Entries
     *
     * @param  int $officeId officeId (optional)
     * @param  int $glAccountId glAccountId (optional)
     * @param  bool $manualEntriesOnly manualEntriesOnly (optional)
     * @param  \Frengky\Fineract\Model\DateParam $fromDate fromDate (optional)
     * @param  \Frengky\Fineract\Model\DateParam $toDate toDate (optional)
     * @param  string $transactionId transactionId (optional)
     * @param  int $entityType entityType (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  string $locale locale (optional)
     * @param  string $dateFormat dateFormat (optional)
     * @param  int $loanId loanId (optional)
     * @param  int $savingsId savingsId (optional)
     * @param  bool $runningBalance runningBalance (optional)
     * @param  bool $transactionDetails transactionDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAll1Async($officeId = null, $glAccountId = null, $manualEntriesOnly = null, $fromDate = null, $toDate = null, $transactionId = null, $entityType = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null, $locale = null, $dateFormat = null, $loanId = null, $savingsId = null, $runningBalance = null, $transactionDetails = null)
    {
        return $this->retrieveAll1AsyncWithHttpInfo($officeId, $glAccountId, $manualEntriesOnly, $fromDate, $toDate, $transactionId, $entityType, $offset, $limit, $orderBy, $sortOrder, $locale, $dateFormat, $loanId, $savingsId, $runningBalance, $transactionDetails)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveAll1AsyncWithHttpInfo
     *
     * List Journal Entries
     *
     * @param  int $officeId officeId (optional)
     * @param  int $glAccountId glAccountId (optional)
     * @param  bool $manualEntriesOnly manualEntriesOnly (optional)
     * @param  \Frengky\Fineract\Model\DateParam $fromDate fromDate (optional)
     * @param  \Frengky\Fineract\Model\DateParam $toDate toDate (optional)
     * @param  string $transactionId transactionId (optional)
     * @param  int $entityType entityType (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  string $locale locale (optional)
     * @param  string $dateFormat dateFormat (optional)
     * @param  int $loanId loanId (optional)
     * @param  int $savingsId savingsId (optional)
     * @param  bool $runningBalance runningBalance (optional)
     * @param  bool $transactionDetails transactionDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAll1AsyncWithHttpInfo($officeId = null, $glAccountId = null, $manualEntriesOnly = null, $fromDate = null, $toDate = null, $transactionId = null, $entityType = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null, $locale = null, $dateFormat = null, $loanId = null, $savingsId = null, $runningBalance = null, $transactionDetails = null)
    {
        $returnType = '\Frengky\Fineract\Model\JournalEntryData[]';
        $request = $this->retrieveAll1Request($officeId, $glAccountId, $manualEntriesOnly, $fromDate, $toDate, $transactionId, $entityType, $offset, $limit, $orderBy, $sortOrder, $locale, $dateFormat, $loanId, $savingsId, $runningBalance, $transactionDetails);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveAll1'
     *
     * @param  int $officeId officeId (optional)
     * @param  int $glAccountId glAccountId (optional)
     * @param  bool $manualEntriesOnly manualEntriesOnly (optional)
     * @param  \Frengky\Fineract\Model\DateParam $fromDate fromDate (optional)
     * @param  \Frengky\Fineract\Model\DateParam $toDate toDate (optional)
     * @param  string $transactionId transactionId (optional)
     * @param  int $entityType entityType (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  string $locale locale (optional)
     * @param  string $dateFormat dateFormat (optional)
     * @param  int $loanId loanId (optional)
     * @param  int $savingsId savingsId (optional)
     * @param  bool $runningBalance runningBalance (optional)
     * @param  bool $transactionDetails transactionDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveAll1Request($officeId = null, $glAccountId = null, $manualEntriesOnly = null, $fromDate = null, $toDate = null, $transactionId = null, $entityType = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null, $locale = null, $dateFormat = null, $loanId = null, $savingsId = null, $runningBalance = null, $transactionDetails = null)
    {

        $resourcePath = '/journalentries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($officeId !== null) {
            $queryParams['officeId'] = ObjectSerializer::toQueryValue($officeId, 'int64');
        }
        // query params
        if ($glAccountId !== null) {
            $queryParams['glAccountId'] = ObjectSerializer::toQueryValue($glAccountId, 'int64');
        }
        // query params
        if ($manualEntriesOnly !== null) {
            $queryParams['manualEntriesOnly'] = ObjectSerializer::toQueryValue($manualEntriesOnly, null);
        }
        // query params
        if ($fromDate !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($fromDate, null);
        }
        // query params
        if ($toDate !== null) {
            $queryParams['toDate'] = ObjectSerializer::toQueryValue($toDate, null);
        }
        // query params
        if ($transactionId !== null) {
            $queryParams['transactionId'] = ObjectSerializer::toQueryValue($transactionId, null);
        }
        // query params
        if ($entityType !== null) {
            $queryParams['entityType'] = ObjectSerializer::toQueryValue($entityType, 'int32');
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($orderBy, null);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder, null);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale, null);
        }
        // query params
        if ($dateFormat !== null) {
            $queryParams['dateFormat'] = ObjectSerializer::toQueryValue($dateFormat, null);
        }
        // query params
        if ($loanId !== null) {
            $queryParams['loanId'] = ObjectSerializer::toQueryValue($loanId, 'int64');
        }
        // query params
        if ($savingsId !== null) {
            $queryParams['savingsId'] = ObjectSerializer::toQueryValue($savingsId, 'int64');
        }
        // query params
        if ($runningBalance !== null) {
            $queryParams['runningBalance'] = ObjectSerializer::toQueryValue($runningBalance, null);
        }
        // query params
        if ($transactionDetails !== null) {
            $queryParams['transactionDetails'] = ObjectSerializer::toQueryValue($transactionDetails, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveJournalEntries
     *
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  int $entryId entryId (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function retrieveJournalEntries($offset = null, $limit = null, $entryId = null)
    {
        list($response) = $this->retrieveJournalEntriesWithHttpInfo($offset, $limit, $entryId);
        return $response;
    }

    /**
     * Operation retrieveJournalEntriesWithHttpInfo
     *
     * @param  int $offset (optional)
     * @param  int $limit (optional)
     * @param  int $entryId (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveJournalEntriesWithHttpInfo($offset = null, $limit = null, $entryId = null)
    {
        $returnType = 'string';
        $request = $this->retrieveJournalEntriesRequest($offset, $limit, $entryId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveJournalEntriesAsync
     *
     * 
     *
     * @param  int $offset (optional)
     * @param  int $limit (optional)
     * @param  int $entryId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveJournalEntriesAsync($offset = null, $limit = null, $entryId = null)
    {
        return $this->retrieveJournalEntriesAsyncWithHttpInfo($offset, $limit, $entryId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveJournalEntriesAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $offset (optional)
     * @param  int $limit (optional)
     * @param  int $entryId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveJournalEntriesAsyncWithHttpInfo($offset = null, $limit = null, $entryId = null)
    {
        $returnType = 'string';
        $request = $this->retrieveJournalEntriesRequest($offset, $limit, $entryId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveJournalEntries'
     *
     * @param  int $offset (optional)
     * @param  int $limit (optional)
     * @param  int $entryId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveJournalEntriesRequest($offset = null, $limit = null, $entryId = null)
    {

        $resourcePath = '/journalentries/provisioning';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($entryId !== null) {
            $queryParams['entryId'] = ObjectSerializer::toQueryValue($entryId, 'int64');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveOpeningBalance
     *
     * @param  int $officeId officeId (optional)
     * @param  string $currencyCode currencyCode (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function retrieveOpeningBalance($officeId = null, $currencyCode = null)
    {
        list($response) = $this->retrieveOpeningBalanceWithHttpInfo($officeId, $currencyCode);
        return $response;
    }

    /**
     * Operation retrieveOpeningBalanceWithHttpInfo
     *
     * @param  int $officeId (optional)
     * @param  string $currencyCode (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveOpeningBalanceWithHttpInfo($officeId = null, $currencyCode = null)
    {
        $returnType = 'string';
        $request = $this->retrieveOpeningBalanceRequest($officeId, $currencyCode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveOpeningBalanceAsync
     *
     * 
     *
     * @param  int $officeId (optional)
     * @param  string $currencyCode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveOpeningBalanceAsync($officeId = null, $currencyCode = null)
    {
        return $this->retrieveOpeningBalanceAsyncWithHttpInfo($officeId, $currencyCode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveOpeningBalanceAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $officeId (optional)
     * @param  string $currencyCode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveOpeningBalanceAsyncWithHttpInfo($officeId = null, $currencyCode = null)
    {
        $returnType = 'string';
        $request = $this->retrieveOpeningBalanceRequest($officeId, $currencyCode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveOpeningBalance'
     *
     * @param  int $officeId (optional)
     * @param  string $currencyCode (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveOpeningBalanceRequest($officeId = null, $currencyCode = null)
    {

        $resourcePath = '/journalentries/openingbalance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($officeId !== null) {
            $queryParams['officeId'] = ObjectSerializer::toQueryValue($officeId, 'int64');
        }
        // query params
        if ($currencyCode !== null) {
            $queryParams['currencyCode'] = ObjectSerializer::toQueryValue($currencyCode, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
