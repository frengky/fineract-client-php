<?php
/**
 * MakerCheckerOr4EyeFunctionalityApi
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Frengky\Fineract\ApiException;
use Frengky\Fineract\Configuration;
use Frengky\Fineract\HeaderSelector;
use Frengky\Fineract\ObjectSerializer;

/**
 * MakerCheckerOr4EyeFunctionalityApi Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MakerCheckerOr4EyeFunctionalityApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation approveMakerCheckerEntry
     *
     * Approve Maker Checker Entry | Reject Maker Checker Entry
     *
     * @param  int $auditId auditId (required)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostMakerCheckersResponse
     */
    public function approveMakerCheckerEntry($auditId, $command = null)
    {
        list($response) = $this->approveMakerCheckerEntryWithHttpInfo($auditId, $command);
        return $response;
    }

    /**
     * Operation approveMakerCheckerEntryWithHttpInfo
     *
     * Approve Maker Checker Entry | Reject Maker Checker Entry
     *
     * @param  int $auditId auditId (required)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostMakerCheckersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function approveMakerCheckerEntryWithHttpInfo($auditId, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PostMakerCheckersResponse';
        $request = $this->approveMakerCheckerEntryRequest($auditId, $command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostMakerCheckersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation approveMakerCheckerEntryAsync
     *
     * Approve Maker Checker Entry | Reject Maker Checker Entry
     *
     * @param  int $auditId auditId (required)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveMakerCheckerEntryAsync($auditId, $command = null)
    {
        return $this->approveMakerCheckerEntryAsyncWithHttpInfo($auditId, $command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation approveMakerCheckerEntryAsyncWithHttpInfo
     *
     * Approve Maker Checker Entry | Reject Maker Checker Entry
     *
     * @param  int $auditId auditId (required)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function approveMakerCheckerEntryAsyncWithHttpInfo($auditId, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PostMakerCheckersResponse';
        $request = $this->approveMakerCheckerEntryRequest($auditId, $command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'approveMakerCheckerEntry'
     *
     * @param  int $auditId auditId (required)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function approveMakerCheckerEntryRequest($auditId, $command = null)
    {
        // verify the required parameter 'auditId' is set
        if ($auditId === null || (is_array($auditId) && count($auditId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auditId when calling approveMakerCheckerEntry'
            );
        }

        $resourcePath = '/makercheckers/{auditId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($command !== null) {
            $queryParams['command'] = ObjectSerializer::toQueryValue($command, null);
        }

        // path params
        if ($auditId !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($auditId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteMakerCheckerEntry
     *
     * Delete Maker Checker Entry
     *
     * @param  int $auditId auditId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostMakerCheckersResponse
     */
    public function deleteMakerCheckerEntry($auditId)
    {
        list($response) = $this->deleteMakerCheckerEntryWithHttpInfo($auditId);
        return $response;
    }

    /**
     * Operation deleteMakerCheckerEntryWithHttpInfo
     *
     * Delete Maker Checker Entry
     *
     * @param  int $auditId auditId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostMakerCheckersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteMakerCheckerEntryWithHttpInfo($auditId)
    {
        $returnType = '\Frengky\Fineract\Model\PostMakerCheckersResponse';
        $request = $this->deleteMakerCheckerEntryRequest($auditId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostMakerCheckersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteMakerCheckerEntryAsync
     *
     * Delete Maker Checker Entry
     *
     * @param  int $auditId auditId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMakerCheckerEntryAsync($auditId)
    {
        return $this->deleteMakerCheckerEntryAsyncWithHttpInfo($auditId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteMakerCheckerEntryAsyncWithHttpInfo
     *
     * Delete Maker Checker Entry
     *
     * @param  int $auditId auditId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteMakerCheckerEntryAsyncWithHttpInfo($auditId)
    {
        $returnType = '\Frengky\Fineract\Model\PostMakerCheckersResponse';
        $request = $this->deleteMakerCheckerEntryRequest($auditId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteMakerCheckerEntry'
     *
     * @param  int $auditId auditId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteMakerCheckerEntryRequest($auditId)
    {
        // verify the required parameter 'auditId' is set
        if ($auditId === null || (is_array($auditId) && count($auditId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $auditId when calling deleteMakerCheckerEntry'
            );
        }

        $resourcePath = '/makercheckers/{auditId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($auditId !== null) {
            $resourcePath = str_replace(
                '{' . 'auditId' . '}',
                ObjectSerializer::toPathValue($auditId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveAuditSearchTemplate1
     *
     * Maker Checker Search Template
     *
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetMakerCheckersSearchTemplateResponse
     */
    public function retrieveAuditSearchTemplate1()
    {
        list($response) = $this->retrieveAuditSearchTemplate1WithHttpInfo();
        return $response;
    }

    /**
     * Operation retrieveAuditSearchTemplate1WithHttpInfo
     *
     * Maker Checker Search Template
     *
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetMakerCheckersSearchTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveAuditSearchTemplate1WithHttpInfo()
    {
        $returnType = '\Frengky\Fineract\Model\GetMakerCheckersSearchTemplateResponse';
        $request = $this->retrieveAuditSearchTemplate1Request();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetMakerCheckersSearchTemplateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveAuditSearchTemplate1Async
     *
     * Maker Checker Search Template
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAuditSearchTemplate1Async()
    {
        return $this->retrieveAuditSearchTemplate1AsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveAuditSearchTemplate1AsyncWithHttpInfo
     *
     * Maker Checker Search Template
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAuditSearchTemplate1AsyncWithHttpInfo()
    {
        $returnType = '\Frengky\Fineract\Model\GetMakerCheckersSearchTemplateResponse';
        $request = $this->retrieveAuditSearchTemplate1Request();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveAuditSearchTemplate1'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveAuditSearchTemplate1Request()
    {

        $resourcePath = '/makercheckers/searchtemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveCommands
     *
     * List Maker Checker Entries
     *
     * @param  string $actionName actionName (optional)
     * @param  string $entityName entityName (optional)
     * @param  int $resourceId resourceId (optional)
     * @param  int $makerId makerId (optional)
     * @param  string $makerDateTimeFrom makerDateTimeFrom (optional)
     * @param  string $makerDateTimeTo makerDateTimeTo (optional)
     * @param  int $officeId officeId (optional)
     * @param  int $groupId groupId (optional)
     * @param  int $clientId clientId (optional)
     * @param  int $loanid loanid (optional)
     * @param  int $savingsAccountId savingsAccountId (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetMakerCheckerResponse[]
     */
    public function retrieveCommands($actionName = null, $entityName = null, $resourceId = null, $makerId = null, $makerDateTimeFrom = null, $makerDateTimeTo = null, $officeId = null, $groupId = null, $clientId = null, $loanid = null, $savingsAccountId = null)
    {
        list($response) = $this->retrieveCommandsWithHttpInfo($actionName, $entityName, $resourceId, $makerId, $makerDateTimeFrom, $makerDateTimeTo, $officeId, $groupId, $clientId, $loanid, $savingsAccountId);
        return $response;
    }

    /**
     * Operation retrieveCommandsWithHttpInfo
     *
     * List Maker Checker Entries
     *
     * @param  string $actionName actionName (optional)
     * @param  string $entityName entityName (optional)
     * @param  int $resourceId resourceId (optional)
     * @param  int $makerId makerId (optional)
     * @param  string $makerDateTimeFrom makerDateTimeFrom (optional)
     * @param  string $makerDateTimeTo makerDateTimeTo (optional)
     * @param  int $officeId officeId (optional)
     * @param  int $groupId groupId (optional)
     * @param  int $clientId clientId (optional)
     * @param  int $loanid loanid (optional)
     * @param  int $savingsAccountId savingsAccountId (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetMakerCheckerResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveCommandsWithHttpInfo($actionName = null, $entityName = null, $resourceId = null, $makerId = null, $makerDateTimeFrom = null, $makerDateTimeTo = null, $officeId = null, $groupId = null, $clientId = null, $loanid = null, $savingsAccountId = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetMakerCheckerResponse[]';
        $request = $this->retrieveCommandsRequest($actionName, $entityName, $resourceId, $makerId, $makerDateTimeFrom, $makerDateTimeTo, $officeId, $groupId, $clientId, $loanid, $savingsAccountId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetMakerCheckerResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveCommandsAsync
     *
     * List Maker Checker Entries
     *
     * @param  string $actionName actionName (optional)
     * @param  string $entityName entityName (optional)
     * @param  int $resourceId resourceId (optional)
     * @param  int $makerId makerId (optional)
     * @param  string $makerDateTimeFrom makerDateTimeFrom (optional)
     * @param  string $makerDateTimeTo makerDateTimeTo (optional)
     * @param  int $officeId officeId (optional)
     * @param  int $groupId groupId (optional)
     * @param  int $clientId clientId (optional)
     * @param  int $loanid loanid (optional)
     * @param  int $savingsAccountId savingsAccountId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCommandsAsync($actionName = null, $entityName = null, $resourceId = null, $makerId = null, $makerDateTimeFrom = null, $makerDateTimeTo = null, $officeId = null, $groupId = null, $clientId = null, $loanid = null, $savingsAccountId = null)
    {
        return $this->retrieveCommandsAsyncWithHttpInfo($actionName, $entityName, $resourceId, $makerId, $makerDateTimeFrom, $makerDateTimeTo, $officeId, $groupId, $clientId, $loanid, $savingsAccountId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveCommandsAsyncWithHttpInfo
     *
     * List Maker Checker Entries
     *
     * @param  string $actionName actionName (optional)
     * @param  string $entityName entityName (optional)
     * @param  int $resourceId resourceId (optional)
     * @param  int $makerId makerId (optional)
     * @param  string $makerDateTimeFrom makerDateTimeFrom (optional)
     * @param  string $makerDateTimeTo makerDateTimeTo (optional)
     * @param  int $officeId officeId (optional)
     * @param  int $groupId groupId (optional)
     * @param  int $clientId clientId (optional)
     * @param  int $loanid loanid (optional)
     * @param  int $savingsAccountId savingsAccountId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveCommandsAsyncWithHttpInfo($actionName = null, $entityName = null, $resourceId = null, $makerId = null, $makerDateTimeFrom = null, $makerDateTimeTo = null, $officeId = null, $groupId = null, $clientId = null, $loanid = null, $savingsAccountId = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetMakerCheckerResponse[]';
        $request = $this->retrieveCommandsRequest($actionName, $entityName, $resourceId, $makerId, $makerDateTimeFrom, $makerDateTimeTo, $officeId, $groupId, $clientId, $loanid, $savingsAccountId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveCommands'
     *
     * @param  string $actionName actionName (optional)
     * @param  string $entityName entityName (optional)
     * @param  int $resourceId resourceId (optional)
     * @param  int $makerId makerId (optional)
     * @param  string $makerDateTimeFrom makerDateTimeFrom (optional)
     * @param  string $makerDateTimeTo makerDateTimeTo (optional)
     * @param  int $officeId officeId (optional)
     * @param  int $groupId groupId (optional)
     * @param  int $clientId clientId (optional)
     * @param  int $loanid loanid (optional)
     * @param  int $savingsAccountId savingsAccountId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveCommandsRequest($actionName = null, $entityName = null, $resourceId = null, $makerId = null, $makerDateTimeFrom = null, $makerDateTimeTo = null, $officeId = null, $groupId = null, $clientId = null, $loanid = null, $savingsAccountId = null)
    {

        $resourcePath = '/makercheckers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($actionName !== null) {
            $queryParams['actionName'] = ObjectSerializer::toQueryValue($actionName, null);
        }
        // query params
        if ($entityName !== null) {
            $queryParams['entityName'] = ObjectSerializer::toQueryValue($entityName, null);
        }
        // query params
        if ($resourceId !== null) {
            $queryParams['resourceId'] = ObjectSerializer::toQueryValue($resourceId, 'int64');
        }
        // query params
        if ($makerId !== null) {
            $queryParams['makerId'] = ObjectSerializer::toQueryValue($makerId, 'int64');
        }
        // query params
        if ($makerDateTimeFrom !== null) {
            $queryParams['makerDateTimeFrom'] = ObjectSerializer::toQueryValue($makerDateTimeFrom, null);
        }
        // query params
        if ($makerDateTimeTo !== null) {
            $queryParams['makerDateTimeTo'] = ObjectSerializer::toQueryValue($makerDateTimeTo, null);
        }
        // query params
        if ($officeId !== null) {
            $queryParams['officeId'] = ObjectSerializer::toQueryValue($officeId, 'int32');
        }
        // query params
        if ($groupId !== null) {
            $queryParams['groupId'] = ObjectSerializer::toQueryValue($groupId, 'int32');
        }
        // query params
        if ($clientId !== null) {
            $queryParams['clientId'] = ObjectSerializer::toQueryValue($clientId, 'int32');
        }
        // query params
        if ($loanid !== null) {
            $queryParams['loanid'] = ObjectSerializer::toQueryValue($loanid, 'int32');
        }
        // query params
        if ($savingsAccountId !== null) {
            $queryParams['savingsAccountId'] = ObjectSerializer::toQueryValue($savingsAccountId, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
