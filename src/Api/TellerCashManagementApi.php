<?php
/**
 * TellerCashManagementApi
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Frengky\Fineract\ApiException;
use Frengky\Fineract\Configuration;
use Frengky\Fineract\HeaderSelector;
use Frengky\Fineract\ObjectSerializer;

/**
 * TellerCashManagementApi Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TellerCashManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation allocateCashToCashier
     *
     * Allocate Cash To Cashier
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdAllocateRequest $body body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdAllocateResponse
     */
    public function allocateCashToCashier($body, $tellerId, $cashierId)
    {
        list($response) = $this->allocateCashToCashierWithHttpInfo($body, $tellerId, $cashierId);
        return $response;
    }

    /**
     * Operation allocateCashToCashierWithHttpInfo
     *
     * Allocate Cash To Cashier
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdAllocateRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdAllocateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function allocateCashToCashierWithHttpInfo($body, $tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdAllocateResponse';
        $request = $this->allocateCashToCashierRequest($body, $tellerId, $cashierId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdAllocateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation allocateCashToCashierAsync
     *
     * Allocate Cash To Cashier
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdAllocateRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allocateCashToCashierAsync($body, $tellerId, $cashierId)
    {
        return $this->allocateCashToCashierAsyncWithHttpInfo($body, $tellerId, $cashierId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation allocateCashToCashierAsyncWithHttpInfo
     *
     * Allocate Cash To Cashier
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdAllocateRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function allocateCashToCashierAsyncWithHttpInfo($body, $tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdAllocateResponse';
        $request = $this->allocateCashToCashierRequest($body, $tellerId, $cashierId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'allocateCashToCashier'
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdAllocateRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function allocateCashToCashierRequest($body, $tellerId, $cashierId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling allocateCashToCashier'
            );
        }
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling allocateCashToCashier'
            );
        }
        // verify the required parameter 'cashierId' is set
        if ($cashierId === null || (is_array($cashierId) && count($cashierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cashierId when calling allocateCashToCashier'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers/{cashierId}/allocate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }
        // path params
        if ($cashierId !== null) {
            $resourcePath = str_replace(
                '{' . 'cashierId' . '}',
                ObjectSerializer::toPathValue($cashierId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/html', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCashier
     *
     * Create Cashiers
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersRequest $body body (required)
     * @param  int $tellerId tellerId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostTellersTellerIdCashiersResponse
     */
    public function createCashier($body, $tellerId)
    {
        list($response) = $this->createCashierWithHttpInfo($body, $tellerId);
        return $response;
    }

    /**
     * Operation createCashierWithHttpInfo
     *
     * Create Cashiers
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersRequest $body (required)
     * @param  int $tellerId tellerId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostTellersTellerIdCashiersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCashierWithHttpInfo($body, $tellerId)
    {
        $returnType = '\Frengky\Fineract\Model\PostTellersTellerIdCashiersResponse';
        $request = $this->createCashierRequest($body, $tellerId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostTellersTellerIdCashiersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCashierAsync
     *
     * Create Cashiers
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersRequest $body (required)
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCashierAsync($body, $tellerId)
    {
        return $this->createCashierAsyncWithHttpInfo($body, $tellerId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCashierAsyncWithHttpInfo
     *
     * Create Cashiers
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersRequest $body (required)
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCashierAsyncWithHttpInfo($body, $tellerId)
    {
        $returnType = '\Frengky\Fineract\Model\PostTellersTellerIdCashiersResponse';
        $request = $this->createCashierRequest($body, $tellerId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCashier'
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersRequest $body (required)
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCashierRequest($body, $tellerId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createCashier'
            );
        }
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling createCashier'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createTeller
     *
     * Create teller
     *
     * @param  \Frengky\Fineract\Model\PostTellersRequest $body body (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostTellersResponse
     */
    public function createTeller($body)
    {
        list($response) = $this->createTellerWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createTellerWithHttpInfo
     *
     * Create teller
     *
     * @param  \Frengky\Fineract\Model\PostTellersRequest $body (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostTellersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createTellerWithHttpInfo($body)
    {
        $returnType = '\Frengky\Fineract\Model\PostTellersResponse';
        $request = $this->createTellerRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostTellersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createTellerAsync
     *
     * Create teller
     *
     * @param  \Frengky\Fineract\Model\PostTellersRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTellerAsync($body)
    {
        return $this->createTellerAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createTellerAsyncWithHttpInfo
     *
     * Create teller
     *
     * @param  \Frengky\Fineract\Model\PostTellersRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createTellerAsyncWithHttpInfo($body)
    {
        $returnType = '\Frengky\Fineract\Model\PostTellersResponse';
        $request = $this->createTellerRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createTeller'
     *
     * @param  \Frengky\Fineract\Model\PostTellersRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createTellerRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createTeller'
            );
        }

        $resourcePath = '/tellers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCashier
     *
     * Delete Cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\DeleteTellersTellerIdCashiersCashierIdResponse
     */
    public function deleteCashier($tellerId, $cashierId)
    {
        list($response) = $this->deleteCashierWithHttpInfo($tellerId, $cashierId);
        return $response;
    }

    /**
     * Operation deleteCashierWithHttpInfo
     *
     * Delete Cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\DeleteTellersTellerIdCashiersCashierIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCashierWithHttpInfo($tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\DeleteTellersTellerIdCashiersCashierIdResponse';
        $request = $this->deleteCashierRequest($tellerId, $cashierId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\DeleteTellersTellerIdCashiersCashierIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCashierAsync
     *
     * Delete Cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCashierAsync($tellerId, $cashierId)
    {
        return $this->deleteCashierAsyncWithHttpInfo($tellerId, $cashierId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCashierAsyncWithHttpInfo
     *
     * Delete Cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCashierAsyncWithHttpInfo($tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\DeleteTellersTellerIdCashiersCashierIdResponse';
        $request = $this->deleteCashierRequest($tellerId, $cashierId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCashier'
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteCashierRequest($tellerId, $cashierId)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling deleteCashier'
            );
        }
        // verify the required parameter 'cashierId' is set
        if ($cashierId === null || (is_array($cashierId) && count($cashierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cashierId when calling deleteCashier'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers/{cashierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }
        // path params
        if ($cashierId !== null) {
            $resourcePath = str_replace(
                '{' . 'cashierId' . '}',
                ObjectSerializer::toPathValue($cashierId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteTeller
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function deleteTeller($tellerId)
    {
        list($response) = $this->deleteTellerWithHttpInfo($tellerId);
        return $response;
    }

    /**
     * Operation deleteTellerWithHttpInfo
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteTellerWithHttpInfo($tellerId)
    {
        $returnType = 'string';
        $request = $this->deleteTellerRequest($tellerId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteTellerAsync
     *
     * 
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTellerAsync($tellerId)
    {
        return $this->deleteTellerAsyncWithHttpInfo($tellerId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteTellerAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteTellerAsyncWithHttpInfo($tellerId)
    {
        $returnType = 'string';
        $request = $this->deleteTellerRequest($tellerId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteTeller'
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteTellerRequest($tellerId)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling deleteTeller'
            );
        }

        $resourcePath = '/tellers/{tellerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findCashierData
     *
     * Retrieve a cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetTellersTellerIdCashiersCashierIdResponse
     */
    public function findCashierData($tellerId, $cashierId)
    {
        list($response) = $this->findCashierDataWithHttpInfo($tellerId, $cashierId);
        return $response;
    }

    /**
     * Operation findCashierDataWithHttpInfo
     *
     * Retrieve a cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetTellersTellerIdCashiersCashierIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findCashierDataWithHttpInfo($tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashierIdResponse';
        $request = $this->findCashierDataRequest($tellerId, $cashierId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashierIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findCashierDataAsync
     *
     * Retrieve a cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findCashierDataAsync($tellerId, $cashierId)
    {
        return $this->findCashierDataAsyncWithHttpInfo($tellerId, $cashierId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findCashierDataAsyncWithHttpInfo
     *
     * Retrieve a cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findCashierDataAsyncWithHttpInfo($tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashierIdResponse';
        $request = $this->findCashierDataRequest($tellerId, $cashierId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findCashierData'
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findCashierDataRequest($tellerId, $cashierId)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling findCashierData'
            );
        }
        // verify the required parameter 'cashierId' is set
        if ($cashierId === null || (is_array($cashierId) && count($cashierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cashierId when calling findCashierData'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers/{cashierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }
        // path params
        if ($cashierId !== null) {
            $resourcePath = str_replace(
                '{' . 'cashierId' . '}',
                ObjectSerializer::toPathValue($cashierId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findTeller
     *
     * Retrieve tellers
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetTellersResponse
     */
    public function findTeller($tellerId)
    {
        list($response) = $this->findTellerWithHttpInfo($tellerId);
        return $response;
    }

    /**
     * Operation findTellerWithHttpInfo
     *
     * Retrieve tellers
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetTellersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function findTellerWithHttpInfo($tellerId)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersResponse';
        $request = $this->findTellerRequest($tellerId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetTellersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findTellerAsync
     *
     * Retrieve tellers
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTellerAsync($tellerId)
    {
        return $this->findTellerAsyncWithHttpInfo($tellerId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findTellerAsyncWithHttpInfo
     *
     * Retrieve tellers
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTellerAsyncWithHttpInfo($tellerId)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersResponse';
        $request = $this->findTellerRequest($tellerId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findTeller'
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findTellerRequest($tellerId)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling findTeller'
            );
        }

        $resourcePath = '/tellers/{tellerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findTransactionData
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $transactionId transactionId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function findTransactionData($tellerId, $transactionId)
    {
        list($response) = $this->findTransactionDataWithHttpInfo($tellerId, $transactionId);
        return $response;
    }

    /**
     * Operation findTransactionDataWithHttpInfo
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $transactionId transactionId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function findTransactionDataWithHttpInfo($tellerId, $transactionId)
    {
        $returnType = 'string';
        $request = $this->findTransactionDataRequest($tellerId, $transactionId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findTransactionDataAsync
     *
     * 
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $transactionId transactionId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTransactionDataAsync($tellerId, $transactionId)
    {
        return $this->findTransactionDataAsyncWithHttpInfo($tellerId, $transactionId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findTransactionDataAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $transactionId transactionId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findTransactionDataAsyncWithHttpInfo($tellerId, $transactionId)
    {
        $returnType = 'string';
        $request = $this->findTransactionDataRequest($tellerId, $transactionId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findTransactionData'
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $transactionId transactionId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findTransactionDataRequest($tellerId, $transactionId)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling findTransactionData'
            );
        }
        // verify the required parameter 'transactionId' is set
        if ($transactionId === null || (is_array($transactionId) && count($transactionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transactionId when calling findTransactionData'
            );
        }

        $resourcePath = '/tellers/{tellerId}/transactions/{transactionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }
        // path params
        if ($transactionId !== null) {
            $resourcePath = str_replace(
                '{' . 'transactionId' . '}',
                ObjectSerializer::toPathValue($transactionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCashierData1
     *
     * List Cashiers
     *
     * @param  int $tellerId tellerId (required)
     * @param  string $fromdate fromdate (optional)
     * @param  string $todate todate (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetTellersTellerIdCashiersResponse
     */
    public function getCashierData1($tellerId, $fromdate = null, $todate = null)
    {
        list($response) = $this->getCashierData1WithHttpInfo($tellerId, $fromdate, $todate);
        return $response;
    }

    /**
     * Operation getCashierData1WithHttpInfo
     *
     * List Cashiers
     *
     * @param  int $tellerId tellerId (required)
     * @param  string $fromdate fromdate (optional)
     * @param  string $todate todate (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetTellersTellerIdCashiersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCashierData1WithHttpInfo($tellerId, $fromdate = null, $todate = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersResponse';
        $request = $this->getCashierData1Request($tellerId, $fromdate, $todate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetTellersTellerIdCashiersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCashierData1Async
     *
     * List Cashiers
     *
     * @param  int $tellerId tellerId (required)
     * @param  string $fromdate fromdate (optional)
     * @param  string $todate todate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCashierData1Async($tellerId, $fromdate = null, $todate = null)
    {
        return $this->getCashierData1AsyncWithHttpInfo($tellerId, $fromdate, $todate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCashierData1AsyncWithHttpInfo
     *
     * List Cashiers
     *
     * @param  int $tellerId tellerId (required)
     * @param  string $fromdate fromdate (optional)
     * @param  string $todate todate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCashierData1AsyncWithHttpInfo($tellerId, $fromdate = null, $todate = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersResponse';
        $request = $this->getCashierData1Request($tellerId, $fromdate, $todate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCashierData1'
     *
     * @param  int $tellerId tellerId (required)
     * @param  string $fromdate fromdate (optional)
     * @param  string $todate todate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCashierData1Request($tellerId, $fromdate = null, $todate = null)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling getCashierData1'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fromdate !== null) {
            $queryParams['fromdate'] = ObjectSerializer::toQueryValue($fromdate, null);
        }
        // query params
        if ($todate !== null) {
            $queryParams['todate'] = ObjectSerializer::toQueryValue($todate, null);
        }

        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCashierTemplate
     *
     * Find Cashiers
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetTellersTellerIdCashiersTemplateResponse
     */
    public function getCashierTemplate($tellerId)
    {
        list($response) = $this->getCashierTemplateWithHttpInfo($tellerId);
        return $response;
    }

    /**
     * Operation getCashierTemplateWithHttpInfo
     *
     * Find Cashiers
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetTellersTellerIdCashiersTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCashierTemplateWithHttpInfo($tellerId)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersTemplateResponse';
        $request = $this->getCashierTemplateRequest($tellerId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetTellersTellerIdCashiersTemplateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCashierTemplateAsync
     *
     * Find Cashiers
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCashierTemplateAsync($tellerId)
    {
        return $this->getCashierTemplateAsyncWithHttpInfo($tellerId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCashierTemplateAsyncWithHttpInfo
     *
     * Find Cashiers
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCashierTemplateAsyncWithHttpInfo($tellerId)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersTemplateResponse';
        $request = $this->getCashierTemplateRequest($tellerId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCashierTemplate'
     *
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCashierTemplateRequest($tellerId)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling getCashierTemplate'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCashierTxnTemplate
     *
     * Retrieve Cashier Transaction Template
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse
     */
    public function getCashierTxnTemplate($tellerId, $cashierId)
    {
        list($response) = $this->getCashierTxnTemplateWithHttpInfo($tellerId, $cashierId);
        return $response;
    }

    /**
     * Operation getCashierTxnTemplateWithHttpInfo
     *
     * Retrieve Cashier Transaction Template
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCashierTxnTemplateWithHttpInfo($tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse';
        $request = $this->getCashierTxnTemplateRequest($tellerId, $cashierId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCashierTxnTemplateAsync
     *
     * Retrieve Cashier Transaction Template
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCashierTxnTemplateAsync($tellerId, $cashierId)
    {
        return $this->getCashierTxnTemplateAsyncWithHttpInfo($tellerId, $cashierId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCashierTxnTemplateAsyncWithHttpInfo
     *
     * Retrieve Cashier Transaction Template
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCashierTxnTemplateAsyncWithHttpInfo($tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdTransactionsTemplateResponse';
        $request = $this->getCashierTxnTemplateRequest($tellerId, $cashierId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCashierTxnTemplate'
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCashierTxnTemplateRequest($tellerId, $cashierId)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling getCashierTxnTemplate'
            );
        }
        // verify the required parameter 'cashierId' is set
        if ($cashierId === null || (is_array($cashierId) && count($cashierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cashierId when calling getCashierTxnTemplate'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers/{cashierId}/transactions/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }
        // path params
        if ($cashierId !== null) {
            $resourcePath = str_replace(
                '{' . 'cashierId' . '}',
                ObjectSerializer::toPathValue($cashierId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getJournalData
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (optional)
     * @param  string $dateRange dateRange (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getJournalData($tellerId, $cashierId = null, $dateRange = null)
    {
        list($response) = $this->getJournalDataWithHttpInfo($tellerId, $cashierId, $dateRange);
        return $response;
    }

    /**
     * Operation getJournalDataWithHttpInfo
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (optional)
     * @param  string $dateRange dateRange (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJournalDataWithHttpInfo($tellerId, $cashierId = null, $dateRange = null)
    {
        $returnType = 'string';
        $request = $this->getJournalDataRequest($tellerId, $cashierId, $dateRange);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getJournalDataAsync
     *
     * 
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (optional)
     * @param  string $dateRange dateRange (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJournalDataAsync($tellerId, $cashierId = null, $dateRange = null)
    {
        return $this->getJournalDataAsyncWithHttpInfo($tellerId, $cashierId, $dateRange)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getJournalDataAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (optional)
     * @param  string $dateRange dateRange (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getJournalDataAsyncWithHttpInfo($tellerId, $cashierId = null, $dateRange = null)
    {
        $returnType = 'string';
        $request = $this->getJournalDataRequest($tellerId, $cashierId, $dateRange);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getJournalData'
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (optional)
     * @param  string $dateRange dateRange (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getJournalDataRequest($tellerId, $cashierId = null, $dateRange = null)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling getJournalData'
            );
        }

        $resourcePath = '/tellers/{tellerId}/journals';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cashierId !== null) {
            $queryParams['cashierId'] = ObjectSerializer::toQueryValue($cashierId, 'int64');
        }
        // query params
        if ($dateRange !== null) {
            $queryParams['dateRange'] = ObjectSerializer::toQueryValue($dateRange, null);
        }

        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTellerData
     *
     * List all tellers
     *
     * @param  int $officeId officeId (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetTellersResponse[]
     */
    public function getTellerData($officeId = null)
    {
        list($response) = $this->getTellerDataWithHttpInfo($officeId);
        return $response;
    }

    /**
     * Operation getTellerDataWithHttpInfo
     *
     * List all tellers
     *
     * @param  int $officeId officeId (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetTellersResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTellerDataWithHttpInfo($officeId = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersResponse[]';
        $request = $this->getTellerDataRequest($officeId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetTellersResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTellerDataAsync
     *
     * List all tellers
     *
     * @param  int $officeId officeId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTellerDataAsync($officeId = null)
    {
        return $this->getTellerDataAsyncWithHttpInfo($officeId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTellerDataAsyncWithHttpInfo
     *
     * List all tellers
     *
     * @param  int $officeId officeId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTellerDataAsyncWithHttpInfo($officeId = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersResponse[]';
        $request = $this->getTellerDataRequest($officeId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTellerData'
     *
     * @param  int $officeId officeId (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTellerDataRequest($officeId = null)
    {

        $resourcePath = '/tellers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($officeId !== null) {
            $queryParams['officeId'] = ObjectSerializer::toQueryValue($officeId, 'int64');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionData
     *
     * @param  int $tellerId tellerId (required)
     * @param  string $dateRange dateRange (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function getTransactionData($tellerId, $dateRange = null)
    {
        list($response) = $this->getTransactionDataWithHttpInfo($tellerId, $dateRange);
        return $response;
    }

    /**
     * Operation getTransactionDataWithHttpInfo
     *
     * @param  int $tellerId tellerId (required)
     * @param  string $dateRange dateRange (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionDataWithHttpInfo($tellerId, $dateRange = null)
    {
        $returnType = 'string';
        $request = $this->getTransactionDataRequest($tellerId, $dateRange);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionDataAsync
     *
     * 
     *
     * @param  int $tellerId tellerId (required)
     * @param  string $dateRange dateRange (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionDataAsync($tellerId, $dateRange = null)
    {
        return $this->getTransactionDataAsyncWithHttpInfo($tellerId, $dateRange)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionDataAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $tellerId tellerId (required)
     * @param  string $dateRange dateRange (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionDataAsyncWithHttpInfo($tellerId, $dateRange = null)
    {
        $returnType = 'string';
        $request = $this->getTransactionDataRequest($tellerId, $dateRange);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionData'
     *
     * @param  int $tellerId tellerId (required)
     * @param  string $dateRange dateRange (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionDataRequest($tellerId, $dateRange = null)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling getTransactionData'
            );
        }

        $resourcePath = '/tellers/{tellerId}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($dateRange !== null) {
            $queryParams['dateRange'] = ObjectSerializer::toQueryValue($dateRange, null);
        }

        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsForCashier
     *
     * Retrieve Cashier Transaction
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     * @param  string $currencyCode currencyCode (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdTransactionsResponse[]
     */
    public function getTransactionsForCashier($tellerId, $cashierId, $currencyCode = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        list($response) = $this->getTransactionsForCashierWithHttpInfo($tellerId, $cashierId, $currencyCode, $offset, $limit, $orderBy, $sortOrder);
        return $response;
    }

    /**
     * Operation getTransactionsForCashierWithHttpInfo
     *
     * Retrieve Cashier Transaction
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     * @param  string $currencyCode currencyCode (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdTransactionsResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsForCashierWithHttpInfo($tellerId, $cashierId, $currencyCode = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdTransactionsResponse[]';
        $request = $this->getTransactionsForCashierRequest($tellerId, $cashierId, $currencyCode, $offset, $limit, $orderBy, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdTransactionsResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsForCashierAsync
     *
     * Retrieve Cashier Transaction
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     * @param  string $currencyCode currencyCode (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsForCashierAsync($tellerId, $cashierId, $currencyCode = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        return $this->getTransactionsForCashierAsyncWithHttpInfo($tellerId, $cashierId, $currencyCode, $offset, $limit, $orderBy, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsForCashierAsyncWithHttpInfo
     *
     * Retrieve Cashier Transaction
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     * @param  string $currencyCode currencyCode (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsForCashierAsyncWithHttpInfo($tellerId, $cashierId, $currencyCode = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdTransactionsResponse[]';
        $request = $this->getTransactionsForCashierRequest($tellerId, $cashierId, $currencyCode, $offset, $limit, $orderBy, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsForCashier'
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     * @param  string $currencyCode currencyCode (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionsForCashierRequest($tellerId, $cashierId, $currencyCode = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling getTransactionsForCashier'
            );
        }
        // verify the required parameter 'cashierId' is set
        if ($cashierId === null || (is_array($cashierId) && count($cashierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cashierId when calling getTransactionsForCashier'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers/{cashierId}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currencyCode !== null) {
            $queryParams['currencyCode'] = ObjectSerializer::toQueryValue($currencyCode, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($orderBy, null);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder, null);
        }

        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }
        // path params
        if ($cashierId !== null) {
            $resourcePath = str_replace(
                '{' . 'cashierId' . '}',
                ObjectSerializer::toPathValue($cashierId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsWtihSummaryForCashier
     *
     * Transactions Wtih Summary For Cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     * @param  string $currencyCode currencyCode (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse
     */
    public function getTransactionsWtihSummaryForCashier($tellerId, $cashierId, $currencyCode = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        list($response) = $this->getTransactionsWtihSummaryForCashierWithHttpInfo($tellerId, $cashierId, $currencyCode, $offset, $limit, $orderBy, $sortOrder);
        return $response;
    }

    /**
     * Operation getTransactionsWtihSummaryForCashierWithHttpInfo
     *
     * Transactions Wtih Summary For Cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     * @param  string $currencyCode currencyCode (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsWtihSummaryForCashierWithHttpInfo($tellerId, $cashierId, $currencyCode = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse';
        $request = $this->getTransactionsWtihSummaryForCashierRequest($tellerId, $cashierId, $currencyCode, $offset, $limit, $orderBy, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsWtihSummaryForCashierAsync
     *
     * Transactions Wtih Summary For Cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     * @param  string $currencyCode currencyCode (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsWtihSummaryForCashierAsync($tellerId, $cashierId, $currencyCode = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        return $this->getTransactionsWtihSummaryForCashierAsyncWithHttpInfo($tellerId, $cashierId, $currencyCode, $offset, $limit, $orderBy, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsWtihSummaryForCashierAsyncWithHttpInfo
     *
     * Transactions Wtih Summary For Cashier
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     * @param  string $currencyCode currencyCode (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsWtihSummaryForCashierAsyncWithHttpInfo($tellerId, $cashierId, $currencyCode = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetTellersTellerIdCashiersCashiersIdSummaryAndTransactionsResponse';
        $request = $this->getTransactionsWtihSummaryForCashierRequest($tellerId, $cashierId, $currencyCode, $offset, $limit, $orderBy, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsWtihSummaryForCashier'
     *
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     * @param  string $currencyCode currencyCode (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getTransactionsWtihSummaryForCashierRequest($tellerId, $cashierId, $currencyCode = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling getTransactionsWtihSummaryForCashier'
            );
        }
        // verify the required parameter 'cashierId' is set
        if ($cashierId === null || (is_array($cashierId) && count($cashierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cashierId when calling getTransactionsWtihSummaryForCashier'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers/{cashierId}/summaryandtransactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currencyCode !== null) {
            $queryParams['currencyCode'] = ObjectSerializer::toQueryValue($currencyCode, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($orderBy, null);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder, null);
        }

        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }
        // path params
        if ($cashierId !== null) {
            $resourcePath = str_replace(
                '{' . 'cashierId' . '}',
                ObjectSerializer::toPathValue($cashierId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settleCashFromCashier
     *
     * Settle Cash From Cashier
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdSettleRequest $body body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdSettleResponse
     */
    public function settleCashFromCashier($body, $tellerId, $cashierId)
    {
        list($response) = $this->settleCashFromCashierWithHttpInfo($body, $tellerId, $cashierId);
        return $response;
    }

    /**
     * Operation settleCashFromCashierWithHttpInfo
     *
     * Settle Cash From Cashier
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdSettleRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdSettleResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function settleCashFromCashierWithHttpInfo($body, $tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdSettleResponse';
        $request = $this->settleCashFromCashierRequest($body, $tellerId, $cashierId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdSettleResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settleCashFromCashierAsync
     *
     * Settle Cash From Cashier
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdSettleRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settleCashFromCashierAsync($body, $tellerId, $cashierId)
    {
        return $this->settleCashFromCashierAsyncWithHttpInfo($body, $tellerId, $cashierId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settleCashFromCashierAsyncWithHttpInfo
     *
     * Settle Cash From Cashier
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdSettleRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settleCashFromCashierAsyncWithHttpInfo($body, $tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdSettleResponse';
        $request = $this->settleCashFromCashierRequest($body, $tellerId, $cashierId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settleCashFromCashier'
     *
     * @param  \Frengky\Fineract\Model\PostTellersTellerIdCashiersCashierIdSettleRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function settleCashFromCashierRequest($body, $tellerId, $cashierId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling settleCashFromCashier'
            );
        }
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling settleCashFromCashier'
            );
        }
        // verify the required parameter 'cashierId' is set
        if ($cashierId === null || (is_array($cashierId) && count($cashierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cashierId when calling settleCashFromCashier'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers/{cashierId}/settle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }
        // path params
        if ($cashierId !== null) {
            $resourcePath = str_replace(
                '{' . 'cashierId' . '}',
                ObjectSerializer::toPathValue($cashierId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/html', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCashier
     *
     * Update Cashier
     *
     * @param  \Frengky\Fineract\Model\PutTellersTellerIdCashiersCashierIdRequest $body body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PutTellersTellerIdCashiersCashierIdResponse
     */
    public function updateCashier($body, $tellerId, $cashierId)
    {
        list($response) = $this->updateCashierWithHttpInfo($body, $tellerId, $cashierId);
        return $response;
    }

    /**
     * Operation updateCashierWithHttpInfo
     *
     * Update Cashier
     *
     * @param  \Frengky\Fineract\Model\PutTellersTellerIdCashiersCashierIdRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PutTellersTellerIdCashiersCashierIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCashierWithHttpInfo($body, $tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\PutTellersTellerIdCashiersCashierIdResponse';
        $request = $this->updateCashierRequest($body, $tellerId, $cashierId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PutTellersTellerIdCashiersCashierIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCashierAsync
     *
     * Update Cashier
     *
     * @param  \Frengky\Fineract\Model\PutTellersTellerIdCashiersCashierIdRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCashierAsync($body, $tellerId, $cashierId)
    {
        return $this->updateCashierAsyncWithHttpInfo($body, $tellerId, $cashierId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCashierAsyncWithHttpInfo
     *
     * Update Cashier
     *
     * @param  \Frengky\Fineract\Model\PutTellersTellerIdCashiersCashierIdRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCashierAsyncWithHttpInfo($body, $tellerId, $cashierId)
    {
        $returnType = '\Frengky\Fineract\Model\PutTellersTellerIdCashiersCashierIdResponse';
        $request = $this->updateCashierRequest($body, $tellerId, $cashierId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCashier'
     *
     * @param  \Frengky\Fineract\Model\PutTellersTellerIdCashiersCashierIdRequest $body (required)
     * @param  int $tellerId tellerId (required)
     * @param  int $cashierId cashierId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCashierRequest($body, $tellerId, $cashierId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateCashier'
            );
        }
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling updateCashier'
            );
        }
        // verify the required parameter 'cashierId' is set
        if ($cashierId === null || (is_array($cashierId) && count($cashierId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cashierId when calling updateCashier'
            );
        }

        $resourcePath = '/tellers/{tellerId}/cashiers/{cashierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }
        // path params
        if ($cashierId !== null) {
            $resourcePath = str_replace(
                '{' . 'cashierId' . '}',
                ObjectSerializer::toPathValue($cashierId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTeller
     *
     * Update teller
     *
     * @param  \Frengky\Fineract\Model\PutTellersRequest $body body (required)
     * @param  int $tellerId tellerId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PutTellersResponse
     */
    public function updateTeller($body, $tellerId)
    {
        list($response) = $this->updateTellerWithHttpInfo($body, $tellerId);
        return $response;
    }

    /**
     * Operation updateTellerWithHttpInfo
     *
     * Update teller
     *
     * @param  \Frengky\Fineract\Model\PutTellersRequest $body (required)
     * @param  int $tellerId tellerId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PutTellersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTellerWithHttpInfo($body, $tellerId)
    {
        $returnType = '\Frengky\Fineract\Model\PutTellersResponse';
        $request = $this->updateTellerRequest($body, $tellerId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PutTellersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTellerAsync
     *
     * Update teller
     *
     * @param  \Frengky\Fineract\Model\PutTellersRequest $body (required)
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTellerAsync($body, $tellerId)
    {
        return $this->updateTellerAsyncWithHttpInfo($body, $tellerId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTellerAsyncWithHttpInfo
     *
     * Update teller
     *
     * @param  \Frengky\Fineract\Model\PutTellersRequest $body (required)
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTellerAsyncWithHttpInfo($body, $tellerId)
    {
        $returnType = '\Frengky\Fineract\Model\PutTellersResponse';
        $request = $this->updateTellerRequest($body, $tellerId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTeller'
     *
     * @param  \Frengky\Fineract\Model\PutTellersRequest $body (required)
     * @param  int $tellerId tellerId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateTellerRequest($body, $tellerId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateTeller'
            );
        }
        // verify the required parameter 'tellerId' is set
        if ($tellerId === null || (is_array($tellerId) && count($tellerId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tellerId when calling updateTeller'
            );
        }

        $resourcePath = '/tellers/{tellerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($tellerId !== null) {
            $resourcePath = str_replace(
                '{' . 'tellerId' . '}',
                ObjectSerializer::toPathValue($tellerId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
