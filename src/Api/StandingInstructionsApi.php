<?php
/**
 * StandingInstructionsApi
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Frengky\Fineract\ApiException;
use Frengky\Fineract\Configuration;
use Frengky\Fineract\HeaderSelector;
use Frengky\Fineract\ObjectSerializer;

/**
 * StandingInstructionsApi Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StandingInstructionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation create4
     *
     * Create new Standing Instruction
     *
     * @param  \Frengky\Fineract\Model\PostStandingInstructionsRequest $body body (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostStandingInstructionsResponse
     */
    public function create4($body)
    {
        list($response) = $this->create4WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation create4WithHttpInfo
     *
     * Create new Standing Instruction
     *
     * @param  \Frengky\Fineract\Model\PostStandingInstructionsRequest $body (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostStandingInstructionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function create4WithHttpInfo($body)
    {
        $returnType = '\Frengky\Fineract\Model\PostStandingInstructionsResponse';
        $request = $this->create4Request($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostStandingInstructionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation create4Async
     *
     * Create new Standing Instruction
     *
     * @param  \Frengky\Fineract\Model\PostStandingInstructionsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function create4Async($body)
    {
        return $this->create4AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation create4AsyncWithHttpInfo
     *
     * Create new Standing Instruction
     *
     * @param  \Frengky\Fineract\Model\PostStandingInstructionsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function create4AsyncWithHttpInfo($body)
    {
        $returnType = '\Frengky\Fineract\Model\PostStandingInstructionsResponse';
        $request = $this->create4Request($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'create4'
     *
     * @param  \Frengky\Fineract\Model\PostStandingInstructionsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function create4Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling create4'
            );
        }

        $resourcePath = '/standinginstructions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveAll18
     *
     * List Standing Instructions
     *
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  int $transferType transferType (optional)
     * @param  string $clientName clientName (optional)
     * @param  int $clientId clientId (optional)
     * @param  int $fromAccountId fromAccountId (optional)
     * @param  int $fromAccountType fromAccountType (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetStandingInstructionsResponse
     */
    public function retrieveAll18($sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null, $transferType = null, $clientName = null, $clientId = null, $fromAccountId = null, $fromAccountType = null)
    {
        list($response) = $this->retrieveAll18WithHttpInfo($sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder, $transferType, $clientName, $clientId, $fromAccountId, $fromAccountType);
        return $response;
    }

    /**
     * Operation retrieveAll18WithHttpInfo
     *
     * List Standing Instructions
     *
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  int $transferType transferType (optional)
     * @param  string $clientName clientName (optional)
     * @param  int $clientId clientId (optional)
     * @param  int $fromAccountId fromAccountId (optional)
     * @param  int $fromAccountType fromAccountType (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetStandingInstructionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveAll18WithHttpInfo($sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null, $transferType = null, $clientName = null, $clientId = null, $fromAccountId = null, $fromAccountType = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetStandingInstructionsResponse';
        $request = $this->retrieveAll18Request($sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder, $transferType, $clientName, $clientId, $fromAccountId, $fromAccountType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetStandingInstructionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveAll18Async
     *
     * List Standing Instructions
     *
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  int $transferType transferType (optional)
     * @param  string $clientName clientName (optional)
     * @param  int $clientId clientId (optional)
     * @param  int $fromAccountId fromAccountId (optional)
     * @param  int $fromAccountType fromAccountType (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAll18Async($sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null, $transferType = null, $clientName = null, $clientId = null, $fromAccountId = null, $fromAccountType = null)
    {
        return $this->retrieveAll18AsyncWithHttpInfo($sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder, $transferType, $clientName, $clientId, $fromAccountId, $fromAccountType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveAll18AsyncWithHttpInfo
     *
     * List Standing Instructions
     *
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  int $transferType transferType (optional)
     * @param  string $clientName clientName (optional)
     * @param  int $clientId clientId (optional)
     * @param  int $fromAccountId fromAccountId (optional)
     * @param  int $fromAccountType fromAccountType (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAll18AsyncWithHttpInfo($sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null, $transferType = null, $clientName = null, $clientId = null, $fromAccountId = null, $fromAccountType = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetStandingInstructionsResponse';
        $request = $this->retrieveAll18Request($sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder, $transferType, $clientName, $clientId, $fromAccountId, $fromAccountType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveAll18'
     *
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     * @param  int $transferType transferType (optional)
     * @param  string $clientName clientName (optional)
     * @param  int $clientId clientId (optional)
     * @param  int $fromAccountId fromAccountId (optional)
     * @param  int $fromAccountType fromAccountType (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveAll18Request($sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null, $transferType = null, $clientName = null, $clientId = null, $fromAccountId = null, $fromAccountType = null)
    {

        $resourcePath = '/standinginstructions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sqlSearch !== null) {
            $queryParams['sqlSearch'] = ObjectSerializer::toQueryValue($sqlSearch, null);
        }
        // query params
        if ($externalId !== null) {
            $queryParams['externalId'] = ObjectSerializer::toQueryValue($externalId, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($orderBy, null);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder, null);
        }
        // query params
        if ($transferType !== null) {
            $queryParams['transferType'] = ObjectSerializer::toQueryValue($transferType, 'int32');
        }
        // query params
        if ($clientName !== null) {
            $queryParams['clientName'] = ObjectSerializer::toQueryValue($clientName, null);
        }
        // query params
        if ($clientId !== null) {
            $queryParams['clientId'] = ObjectSerializer::toQueryValue($clientId, 'int64');
        }
        // query params
        if ($fromAccountId !== null) {
            $queryParams['fromAccountId'] = ObjectSerializer::toQueryValue($fromAccountId, 'int64');
        }
        // query params
        if ($fromAccountType !== null) {
            $queryParams['fromAccountType'] = ObjectSerializer::toQueryValue($fromAccountType, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveOne9
     *
     * Retrieve Standing Instruction
     *
     * @param  int $standingInstructionId standingInstructionId (required)
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetStandingInstructionsStandingInstructionIdResponse
     */
    public function retrieveOne9($standingInstructionId, $sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        list($response) = $this->retrieveOne9WithHttpInfo($standingInstructionId, $sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder);
        return $response;
    }

    /**
     * Operation retrieveOne9WithHttpInfo
     *
     * Retrieve Standing Instruction
     *
     * @param  int $standingInstructionId standingInstructionId (required)
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetStandingInstructionsStandingInstructionIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveOne9WithHttpInfo($standingInstructionId, $sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetStandingInstructionsStandingInstructionIdResponse';
        $request = $this->retrieveOne9Request($standingInstructionId, $sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetStandingInstructionsStandingInstructionIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveOne9Async
     *
     * Retrieve Standing Instruction
     *
     * @param  int $standingInstructionId standingInstructionId (required)
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveOne9Async($standingInstructionId, $sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        return $this->retrieveOne9AsyncWithHttpInfo($standingInstructionId, $sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveOne9AsyncWithHttpInfo
     *
     * Retrieve Standing Instruction
     *
     * @param  int $standingInstructionId standingInstructionId (required)
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveOne9AsyncWithHttpInfo($standingInstructionId, $sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetStandingInstructionsStandingInstructionIdResponse';
        $request = $this->retrieveOne9Request($standingInstructionId, $sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveOne9'
     *
     * @param  int $standingInstructionId standingInstructionId (required)
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveOne9Request($standingInstructionId, $sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        // verify the required parameter 'standingInstructionId' is set
        if ($standingInstructionId === null || (is_array($standingInstructionId) && count($standingInstructionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $standingInstructionId when calling retrieveOne9'
            );
        }

        $resourcePath = '/standinginstructions/{standingInstructionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sqlSearch !== null) {
            $queryParams['sqlSearch'] = ObjectSerializer::toQueryValue($sqlSearch, null);
        }
        // query params
        if ($externalId !== null) {
            $queryParams['externalId'] = ObjectSerializer::toQueryValue($externalId, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($orderBy, null);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder, null);
        }

        // path params
        if ($standingInstructionId !== null) {
            $resourcePath = str_replace(
                '{' . 'standingInstructionId' . '}',
                ObjectSerializer::toPathValue($standingInstructionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation template6
     *
     * Retrieve Standing Instruction Template
     *
     * @param  int $fromOfficeId fromOfficeId (optional)
     * @param  int $fromClientId fromClientId (optional)
     * @param  int $fromAccountId fromAccountId (optional)
     * @param  int $fromAccountType fromAccountType (optional)
     * @param  int $toOfficeId toOfficeId (optional)
     * @param  int $toClientId toClientId (optional)
     * @param  int $toAccountId toAccountId (optional)
     * @param  int $toAccountType toAccountType (optional)
     * @param  int $transferType transferType (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetStandingInstructionsTemplateResponse
     */
    public function template6($fromOfficeId = null, $fromClientId = null, $fromAccountId = null, $fromAccountType = null, $toOfficeId = null, $toClientId = null, $toAccountId = null, $toAccountType = null, $transferType = null)
    {
        list($response) = $this->template6WithHttpInfo($fromOfficeId, $fromClientId, $fromAccountId, $fromAccountType, $toOfficeId, $toClientId, $toAccountId, $toAccountType, $transferType);
        return $response;
    }

    /**
     * Operation template6WithHttpInfo
     *
     * Retrieve Standing Instruction Template
     *
     * @param  int $fromOfficeId fromOfficeId (optional)
     * @param  int $fromClientId fromClientId (optional)
     * @param  int $fromAccountId fromAccountId (optional)
     * @param  int $fromAccountType fromAccountType (optional)
     * @param  int $toOfficeId toOfficeId (optional)
     * @param  int $toClientId toClientId (optional)
     * @param  int $toAccountId toAccountId (optional)
     * @param  int $toAccountType toAccountType (optional)
     * @param  int $transferType transferType (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetStandingInstructionsTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function template6WithHttpInfo($fromOfficeId = null, $fromClientId = null, $fromAccountId = null, $fromAccountType = null, $toOfficeId = null, $toClientId = null, $toAccountId = null, $toAccountType = null, $transferType = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetStandingInstructionsTemplateResponse';
        $request = $this->template6Request($fromOfficeId, $fromClientId, $fromAccountId, $fromAccountType, $toOfficeId, $toClientId, $toAccountId, $toAccountType, $transferType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetStandingInstructionsTemplateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation template6Async
     *
     * Retrieve Standing Instruction Template
     *
     * @param  int $fromOfficeId fromOfficeId (optional)
     * @param  int $fromClientId fromClientId (optional)
     * @param  int $fromAccountId fromAccountId (optional)
     * @param  int $fromAccountType fromAccountType (optional)
     * @param  int $toOfficeId toOfficeId (optional)
     * @param  int $toClientId toClientId (optional)
     * @param  int $toAccountId toAccountId (optional)
     * @param  int $toAccountType toAccountType (optional)
     * @param  int $transferType transferType (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function template6Async($fromOfficeId = null, $fromClientId = null, $fromAccountId = null, $fromAccountType = null, $toOfficeId = null, $toClientId = null, $toAccountId = null, $toAccountType = null, $transferType = null)
    {
        return $this->template6AsyncWithHttpInfo($fromOfficeId, $fromClientId, $fromAccountId, $fromAccountType, $toOfficeId, $toClientId, $toAccountId, $toAccountType, $transferType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation template6AsyncWithHttpInfo
     *
     * Retrieve Standing Instruction Template
     *
     * @param  int $fromOfficeId fromOfficeId (optional)
     * @param  int $fromClientId fromClientId (optional)
     * @param  int $fromAccountId fromAccountId (optional)
     * @param  int $fromAccountType fromAccountType (optional)
     * @param  int $toOfficeId toOfficeId (optional)
     * @param  int $toClientId toClientId (optional)
     * @param  int $toAccountId toAccountId (optional)
     * @param  int $toAccountType toAccountType (optional)
     * @param  int $transferType transferType (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function template6AsyncWithHttpInfo($fromOfficeId = null, $fromClientId = null, $fromAccountId = null, $fromAccountType = null, $toOfficeId = null, $toClientId = null, $toAccountId = null, $toAccountType = null, $transferType = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetStandingInstructionsTemplateResponse';
        $request = $this->template6Request($fromOfficeId, $fromClientId, $fromAccountId, $fromAccountType, $toOfficeId, $toClientId, $toAccountId, $toAccountType, $transferType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'template6'
     *
     * @param  int $fromOfficeId fromOfficeId (optional)
     * @param  int $fromClientId fromClientId (optional)
     * @param  int $fromAccountId fromAccountId (optional)
     * @param  int $fromAccountType fromAccountType (optional)
     * @param  int $toOfficeId toOfficeId (optional)
     * @param  int $toClientId toClientId (optional)
     * @param  int $toAccountId toAccountId (optional)
     * @param  int $toAccountType toAccountType (optional)
     * @param  int $transferType transferType (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function template6Request($fromOfficeId = null, $fromClientId = null, $fromAccountId = null, $fromAccountType = null, $toOfficeId = null, $toClientId = null, $toAccountId = null, $toAccountType = null, $transferType = null)
    {

        $resourcePath = '/standinginstructions/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($fromOfficeId !== null) {
            $queryParams['fromOfficeId'] = ObjectSerializer::toQueryValue($fromOfficeId, 'int64');
        }
        // query params
        if ($fromClientId !== null) {
            $queryParams['fromClientId'] = ObjectSerializer::toQueryValue($fromClientId, 'int64');
        }
        // query params
        if ($fromAccountId !== null) {
            $queryParams['fromAccountId'] = ObjectSerializer::toQueryValue($fromAccountId, 'int64');
        }
        // query params
        if ($fromAccountType !== null) {
            $queryParams['fromAccountType'] = ObjectSerializer::toQueryValue($fromAccountType, 'int32');
        }
        // query params
        if ($toOfficeId !== null) {
            $queryParams['toOfficeId'] = ObjectSerializer::toQueryValue($toOfficeId, 'int64');
        }
        // query params
        if ($toClientId !== null) {
            $queryParams['toClientId'] = ObjectSerializer::toQueryValue($toClientId, 'int64');
        }
        // query params
        if ($toAccountId !== null) {
            $queryParams['toAccountId'] = ObjectSerializer::toQueryValue($toAccountId, 'int64');
        }
        // query params
        if ($toAccountType !== null) {
            $queryParams['toAccountType'] = ObjectSerializer::toQueryValue($toAccountType, 'int32');
        }
        // query params
        if ($transferType !== null) {
            $queryParams['transferType'] = ObjectSerializer::toQueryValue($transferType, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation update8
     *
     * Update Standing Instruction | Delete Standing Instruction
     *
     * @param  int $standingInstructionId standingInstructionId (required)
     * @param  \Frengky\Fineract\Model\PutStandingInstructionsStandingInstructionIdRequest $body body (optional)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PutStandingInstructionsStandingInstructionIdResponse
     */
    public function update8($standingInstructionId, $body = null, $command = null)
    {
        list($response) = $this->update8WithHttpInfo($standingInstructionId, $body, $command);
        return $response;
    }

    /**
     * Operation update8WithHttpInfo
     *
     * Update Standing Instruction | Delete Standing Instruction
     *
     * @param  int $standingInstructionId standingInstructionId (required)
     * @param  \Frengky\Fineract\Model\PutStandingInstructionsStandingInstructionIdRequest $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PutStandingInstructionsStandingInstructionIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function update8WithHttpInfo($standingInstructionId, $body = null, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PutStandingInstructionsStandingInstructionIdResponse';
        $request = $this->update8Request($standingInstructionId, $body, $command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PutStandingInstructionsStandingInstructionIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation update8Async
     *
     * Update Standing Instruction | Delete Standing Instruction
     *
     * @param  int $standingInstructionId standingInstructionId (required)
     * @param  \Frengky\Fineract\Model\PutStandingInstructionsStandingInstructionIdRequest $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function update8Async($standingInstructionId, $body = null, $command = null)
    {
        return $this->update8AsyncWithHttpInfo($standingInstructionId, $body, $command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation update8AsyncWithHttpInfo
     *
     * Update Standing Instruction | Delete Standing Instruction
     *
     * @param  int $standingInstructionId standingInstructionId (required)
     * @param  \Frengky\Fineract\Model\PutStandingInstructionsStandingInstructionIdRequest $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function update8AsyncWithHttpInfo($standingInstructionId, $body = null, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PutStandingInstructionsStandingInstructionIdResponse';
        $request = $this->update8Request($standingInstructionId, $body, $command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'update8'
     *
     * @param  int $standingInstructionId standingInstructionId (required)
     * @param  \Frengky\Fineract\Model\PutStandingInstructionsStandingInstructionIdRequest $body (optional)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function update8Request($standingInstructionId, $body = null, $command = null)
    {
        // verify the required parameter 'standingInstructionId' is set
        if ($standingInstructionId === null || (is_array($standingInstructionId) && count($standingInstructionId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $standingInstructionId when calling update8'
            );
        }

        $resourcePath = '/standinginstructions/{standingInstructionId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($command !== null) {
            $queryParams['command'] = ObjectSerializer::toQueryValue($command, null);
        }

        // path params
        if ($standingInstructionId !== null) {
            $resourcePath = str_replace(
                '{' . 'standingInstructionId' . '}',
                ObjectSerializer::toPathValue($standingInstructionId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
