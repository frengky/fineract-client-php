<?php
/**
 * SavingsAccountApi
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Frengky\Fineract\ApiException;
use Frengky\Fineract\Configuration;
use Frengky\Fineract\HeaderSelector;
use Frengky\Fineract\ObjectSerializer;

/**
 * SavingsAccountApi Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SavingsAccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation delete18
     *
     * Delete a savings application
     *
     * @param  int $accountId accountId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\DeleteSavingsAccountsAccountIdResponse
     */
    public function delete18($accountId)
    {
        list($response) = $this->delete18WithHttpInfo($accountId);
        return $response;
    }

    /**
     * Operation delete18WithHttpInfo
     *
     * Delete a savings application
     *
     * @param  int $accountId accountId (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\DeleteSavingsAccountsAccountIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function delete18WithHttpInfo($accountId)
    {
        $returnType = '\Frengky\Fineract\Model\DeleteSavingsAccountsAccountIdResponse';
        $request = $this->delete18Request($accountId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\DeleteSavingsAccountsAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation delete18Async
     *
     * Delete a savings application
     *
     * @param  int $accountId accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delete18Async($accountId)
    {
        return $this->delete18AsyncWithHttpInfo($accountId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation delete18AsyncWithHttpInfo
     *
     * Delete a savings application
     *
     * @param  int $accountId accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function delete18AsyncWithHttpInfo($accountId)
    {
        $returnType = '\Frengky\Fineract\Model\DeleteSavingsAccountsAccountIdResponse';
        $request = $this->delete18Request($accountId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'delete18'
     *
     * @param  int $accountId accountId (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function delete18Request($accountId)
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling delete18'
            );
        }

        $resourcePath = '/savingsaccounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSavingsTemplate
     *
     * @param  int $officeId officeId (optional)
     * @param  int $staffId staffId (optional)
     * @param  string $dateFormat dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getSavingsTemplate($officeId = null, $staffId = null, $dateFormat = null)
    {
        $this->getSavingsTemplateWithHttpInfo($officeId, $staffId, $dateFormat);
    }

    /**
     * Operation getSavingsTemplateWithHttpInfo
     *
     * @param  int $officeId (optional)
     * @param  int $staffId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSavingsTemplateWithHttpInfo($officeId = null, $staffId = null, $dateFormat = null)
    {
        $returnType = '';
        $request = $this->getSavingsTemplateRequest($officeId, $staffId, $dateFormat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getSavingsTemplateAsync
     *
     * 
     *
     * @param  int $officeId (optional)
     * @param  int $staffId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSavingsTemplateAsync($officeId = null, $staffId = null, $dateFormat = null)
    {
        return $this->getSavingsTemplateAsyncWithHttpInfo($officeId, $staffId, $dateFormat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSavingsTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $officeId (optional)
     * @param  int $staffId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSavingsTemplateAsyncWithHttpInfo($officeId = null, $staffId = null, $dateFormat = null)
    {
        $returnType = '';
        $request = $this->getSavingsTemplateRequest($officeId, $staffId, $dateFormat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSavingsTemplate'
     *
     * @param  int $officeId (optional)
     * @param  int $staffId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSavingsTemplateRequest($officeId = null, $staffId = null, $dateFormat = null)
    {

        $resourcePath = '/savingsaccounts/downloadtemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($officeId !== null) {
            $queryParams['officeId'] = ObjectSerializer::toQueryValue($officeId, 'int64');
        }
        // query params
        if ($staffId !== null) {
            $queryParams['staffId'] = ObjectSerializer::toQueryValue($staffId, 'int64');
        }
        // query params
        if ($dateFormat !== null) {
            $queryParams['dateFormat'] = ObjectSerializer::toQueryValue($dateFormat, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.ms-excel']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.ms-excel'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSavingsTransactionTemplate
     *
     * @param  int $officeId officeId (optional)
     * @param  string $dateFormat dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getSavingsTransactionTemplate($officeId = null, $dateFormat = null)
    {
        $this->getSavingsTransactionTemplateWithHttpInfo($officeId, $dateFormat);
    }

    /**
     * Operation getSavingsTransactionTemplateWithHttpInfo
     *
     * @param  int $officeId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSavingsTransactionTemplateWithHttpInfo($officeId = null, $dateFormat = null)
    {
        $returnType = '';
        $request = $this->getSavingsTransactionTemplateRequest($officeId, $dateFormat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getSavingsTransactionTemplateAsync
     *
     * 
     *
     * @param  int $officeId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSavingsTransactionTemplateAsync($officeId = null, $dateFormat = null)
    {
        return $this->getSavingsTransactionTemplateAsyncWithHttpInfo($officeId, $dateFormat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSavingsTransactionTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $officeId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSavingsTransactionTemplateAsyncWithHttpInfo($officeId = null, $dateFormat = null)
    {
        $returnType = '';
        $request = $this->getSavingsTransactionTemplateRequest($officeId, $dateFormat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSavingsTransactionTemplate'
     *
     * @param  int $officeId (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSavingsTransactionTemplateRequest($officeId = null, $dateFormat = null)
    {

        $resourcePath = '/savingsaccounts/transactions/downloadtemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($officeId !== null) {
            $queryParams['officeId'] = ObjectSerializer::toQueryValue($officeId, 'int64');
        }
        // query params
        if ($dateFormat !== null) {
            $queryParams['dateFormat'] = ObjectSerializer::toQueryValue($dateFormat, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/vnd.ms-excel']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/vnd.ms-excel'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleCommands6
     *
     * Approve savings application | Undo approval savings application | Assign Savings Officer | Unassign Savings Officer | Reject savings application | Withdraw savings application | Activate a savings account | Close a savings account | Calculate Interest on Savings Account | Post Interest on Savings Account | Block Savings Account | Unblock Savings Account | Block Savings Account Credit transactions | Unblock Savings Account Credit transactions | Block Savings Account Debit transactions | Unblock Savings Account debit transactions
     *
     * @param  \Frengky\Fineract\Model\PostSavingsAccountsAccountIdRequest $body body (required)
     * @param  int $accountId accountId (required)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostSavingsAccountsAccountIdResponse
     */
    public function handleCommands6($body, $accountId, $command = null)
    {
        list($response) = $this->handleCommands6WithHttpInfo($body, $accountId, $command);
        return $response;
    }

    /**
     * Operation handleCommands6WithHttpInfo
     *
     * Approve savings application | Undo approval savings application | Assign Savings Officer | Unassign Savings Officer | Reject savings application | Withdraw savings application | Activate a savings account | Close a savings account | Calculate Interest on Savings Account | Post Interest on Savings Account | Block Savings Account | Unblock Savings Account | Block Savings Account Credit transactions | Unblock Savings Account Credit transactions | Block Savings Account Debit transactions | Unblock Savings Account debit transactions
     *
     * @param  \Frengky\Fineract\Model\PostSavingsAccountsAccountIdRequest $body (required)
     * @param  int $accountId accountId (required)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostSavingsAccountsAccountIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleCommands6WithHttpInfo($body, $accountId, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PostSavingsAccountsAccountIdResponse';
        $request = $this->handleCommands6Request($body, $accountId, $command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostSavingsAccountsAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handleCommands6Async
     *
     * Approve savings application | Undo approval savings application | Assign Savings Officer | Unassign Savings Officer | Reject savings application | Withdraw savings application | Activate a savings account | Close a savings account | Calculate Interest on Savings Account | Post Interest on Savings Account | Block Savings Account | Unblock Savings Account | Block Savings Account Credit transactions | Unblock Savings Account Credit transactions | Block Savings Account Debit transactions | Unblock Savings Account debit transactions
     *
     * @param  \Frengky\Fineract\Model\PostSavingsAccountsAccountIdRequest $body (required)
     * @param  int $accountId accountId (required)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleCommands6Async($body, $accountId, $command = null)
    {
        return $this->handleCommands6AsyncWithHttpInfo($body, $accountId, $command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleCommands6AsyncWithHttpInfo
     *
     * Approve savings application | Undo approval savings application | Assign Savings Officer | Unassign Savings Officer | Reject savings application | Withdraw savings application | Activate a savings account | Close a savings account | Calculate Interest on Savings Account | Post Interest on Savings Account | Block Savings Account | Unblock Savings Account | Block Savings Account Credit transactions | Unblock Savings Account Credit transactions | Block Savings Account Debit transactions | Unblock Savings Account debit transactions
     *
     * @param  \Frengky\Fineract\Model\PostSavingsAccountsAccountIdRequest $body (required)
     * @param  int $accountId accountId (required)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleCommands6AsyncWithHttpInfo($body, $accountId, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PostSavingsAccountsAccountIdResponse';
        $request = $this->handleCommands6Request($body, $accountId, $command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleCommands6'
     *
     * @param  \Frengky\Fineract\Model\PostSavingsAccountsAccountIdRequest $body (required)
     * @param  int $accountId accountId (required)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleCommands6Request($body, $accountId, $command = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling handleCommands6'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling handleCommands6'
            );
        }

        $resourcePath = '/savingsaccounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($command !== null) {
            $queryParams['command'] = ObjectSerializer::toQueryValue($command, null);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation handleGSIMCommands
     *
     * @param  int $parentAccountId parentAccountId (required)
     * @param  string $body body (optional)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function handleGSIMCommands($parentAccountId, $body = null, $command = null)
    {
        list($response) = $this->handleGSIMCommandsWithHttpInfo($parentAccountId, $body, $command);
        return $response;
    }

    /**
     * Operation handleGSIMCommandsWithHttpInfo
     *
     * @param  int $parentAccountId (required)
     * @param  string $body (optional)
     * @param  string $command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function handleGSIMCommandsWithHttpInfo($parentAccountId, $body = null, $command = null)
    {
        $returnType = 'string';
        $request = $this->handleGSIMCommandsRequest($parentAccountId, $body, $command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation handleGSIMCommandsAsync
     *
     * 
     *
     * @param  int $parentAccountId (required)
     * @param  string $body (optional)
     * @param  string $command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGSIMCommandsAsync($parentAccountId, $body = null, $command = null)
    {
        return $this->handleGSIMCommandsAsyncWithHttpInfo($parentAccountId, $body, $command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation handleGSIMCommandsAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $parentAccountId (required)
     * @param  string $body (optional)
     * @param  string $command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function handleGSIMCommandsAsyncWithHttpInfo($parentAccountId, $body = null, $command = null)
    {
        $returnType = 'string';
        $request = $this->handleGSIMCommandsRequest($parentAccountId, $body, $command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'handleGSIMCommands'
     *
     * @param  int $parentAccountId (required)
     * @param  string $body (optional)
     * @param  string $command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function handleGSIMCommandsRequest($parentAccountId, $body = null, $command = null)
    {
        // verify the required parameter 'parentAccountId' is set
        if ($parentAccountId === null || (is_array($parentAccountId) && count($parentAccountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentAccountId when calling handleGSIMCommands'
            );
        }

        $resourcePath = '/savingsaccounts/gsimcommands/{parentAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($command !== null) {
            $queryParams['command'] = ObjectSerializer::toQueryValue($command, null);
        }

        // path params
        if ($parentAccountId !== null) {
            $resourcePath = str_replace(
                '{' . 'parentAccountId' . '}',
                ObjectSerializer::toPathValue($parentAccountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSavingsTemplate
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file file (optional)
     * @param  string $locale locale (optional)
     * @param  string $dateFormat dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function postSavingsTemplate($file = null, $locale = null, $dateFormat = null)
    {
        list($response) = $this->postSavingsTemplateWithHttpInfo($file, $locale, $dateFormat);
        return $response;
    }

    /**
     * Operation postSavingsTemplateWithHttpInfo
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSavingsTemplateWithHttpInfo($file = null, $locale = null, $dateFormat = null)
    {
        $returnType = 'string';
        $request = $this->postSavingsTemplateRequest($file, $locale, $dateFormat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSavingsTemplateAsync
     *
     * 
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSavingsTemplateAsync($file = null, $locale = null, $dateFormat = null)
    {
        return $this->postSavingsTemplateAsyncWithHttpInfo($file, $locale, $dateFormat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSavingsTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSavingsTemplateAsyncWithHttpInfo($file = null, $locale = null, $dateFormat = null)
    {
        $returnType = 'string';
        $request = $this->postSavingsTemplateRequest($file, $locale, $dateFormat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSavingsTemplate'
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postSavingsTemplateRequest($file = null, $locale = null, $dateFormat = null)
    {

        $resourcePath = '/savingsaccounts/uploadtemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = ObjectSerializer::toFormValue($locale);
        }
        // form params
        if ($dateFormat !== null) {
            $formParams['dateFormat'] = ObjectSerializer::toFormValue($dateFormat);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postSavingsTransactionTemplate
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file file (optional)
     * @param  string $locale locale (optional)
     * @param  string $dateFormat dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function postSavingsTransactionTemplate($file = null, $locale = null, $dateFormat = null)
    {
        list($response) = $this->postSavingsTransactionTemplateWithHttpInfo($file, $locale, $dateFormat);
        return $response;
    }

    /**
     * Operation postSavingsTransactionTemplateWithHttpInfo
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function postSavingsTransactionTemplateWithHttpInfo($file = null, $locale = null, $dateFormat = null)
    {
        $returnType = 'string';
        $request = $this->postSavingsTransactionTemplateRequest($file, $locale, $dateFormat);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postSavingsTransactionTemplateAsync
     *
     * 
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSavingsTransactionTemplateAsync($file = null, $locale = null, $dateFormat = null)
    {
        return $this->postSavingsTransactionTemplateAsyncWithHttpInfo($file, $locale, $dateFormat)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postSavingsTransactionTemplateAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postSavingsTransactionTemplateAsyncWithHttpInfo($file = null, $locale = null, $dateFormat = null)
    {
        $returnType = 'string';
        $request = $this->postSavingsTransactionTemplateRequest($file, $locale, $dateFormat);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postSavingsTransactionTemplate'
     *
     * @param  \Frengky\Fineract\Model\FormDataContentDisposition $file (optional)
     * @param  string $locale (optional)
     * @param  string $dateFormat (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postSavingsTransactionTemplateRequest($file = null, $locale = null, $dateFormat = null)
    {

        $resourcePath = '/savingsaccounts/transactions/uploadtemplate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // form params
        if ($locale !== null) {
            $formParams['locale'] = ObjectSerializer::toFormValue($locale);
        }
        // form params
        if ($dateFormat !== null) {
            $formParams['dateFormat'] = ObjectSerializer::toFormValue($dateFormat);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveAll32
     *
     * List savings applications/accounts
     *
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetSavingsAccountsResponse
     */
    public function retrieveAll32($sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        list($response) = $this->retrieveAll32WithHttpInfo($sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder);
        return $response;
    }

    /**
     * Operation retrieveAll32WithHttpInfo
     *
     * List savings applications/accounts
     *
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetSavingsAccountsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveAll32WithHttpInfo($sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetSavingsAccountsResponse';
        $request = $this->retrieveAll32Request($sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetSavingsAccountsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveAll32Async
     *
     * List savings applications/accounts
     *
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAll32Async($sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        return $this->retrieveAll32AsyncWithHttpInfo($sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveAll32AsyncWithHttpInfo
     *
     * List savings applications/accounts
     *
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveAll32AsyncWithHttpInfo($sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {
        $returnType = '\Frengky\Fineract\Model\GetSavingsAccountsResponse';
        $request = $this->retrieveAll32Request($sqlSearch, $externalId, $offset, $limit, $orderBy, $sortOrder);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveAll32'
     *
     * @param  string $sqlSearch sqlSearch (optional)
     * @param  string $externalId externalId (optional)
     * @param  int $offset offset (optional)
     * @param  int $limit limit (optional)
     * @param  string $orderBy orderBy (optional)
     * @param  string $sortOrder sortOrder (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveAll32Request($sqlSearch = null, $externalId = null, $offset = null, $limit = null, $orderBy = null, $sortOrder = null)
    {

        $resourcePath = '/savingsaccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sqlSearch !== null) {
            $queryParams['sqlSearch'] = ObjectSerializer::toQueryValue($sqlSearch, null);
        }
        // query params
        if ($externalId !== null) {
            $queryParams['externalId'] = ObjectSerializer::toQueryValue($externalId, null);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset, 'int32');
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($orderBy !== null) {
            $queryParams['orderBy'] = ObjectSerializer::toQueryValue($orderBy, null);
        }
        // query params
        if ($sortOrder !== null) {
            $queryParams['sortOrder'] = ObjectSerializer::toQueryValue($sortOrder, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveOne23
     *
     * Retrieve a savings application/account
     *
     * @param  int $accountId accountId (required)
     * @param  bool $staffInSelectedOfficeOnly staffInSelectedOfficeOnly (optional, default to false)
     * @param  string $chargeStatus chargeStatus (optional, default to all)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetSavingsAccountsAccountIdResponse
     */
    public function retrieveOne23($accountId, $staffInSelectedOfficeOnly = 'false', $chargeStatus = 'all')
    {
        list($response) = $this->retrieveOne23WithHttpInfo($accountId, $staffInSelectedOfficeOnly, $chargeStatus);
        return $response;
    }

    /**
     * Operation retrieveOne23WithHttpInfo
     *
     * Retrieve a savings application/account
     *
     * @param  int $accountId accountId (required)
     * @param  bool $staffInSelectedOfficeOnly staffInSelectedOfficeOnly (optional, default to false)
     * @param  string $chargeStatus chargeStatus (optional, default to all)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetSavingsAccountsAccountIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveOne23WithHttpInfo($accountId, $staffInSelectedOfficeOnly = 'false', $chargeStatus = 'all')
    {
        $returnType = '\Frengky\Fineract\Model\GetSavingsAccountsAccountIdResponse';
        $request = $this->retrieveOne23Request($accountId, $staffInSelectedOfficeOnly, $chargeStatus);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetSavingsAccountsAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveOne23Async
     *
     * Retrieve a savings application/account
     *
     * @param  int $accountId accountId (required)
     * @param  bool $staffInSelectedOfficeOnly staffInSelectedOfficeOnly (optional, default to false)
     * @param  string $chargeStatus chargeStatus (optional, default to all)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveOne23Async($accountId, $staffInSelectedOfficeOnly = 'false', $chargeStatus = 'all')
    {
        return $this->retrieveOne23AsyncWithHttpInfo($accountId, $staffInSelectedOfficeOnly, $chargeStatus)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveOne23AsyncWithHttpInfo
     *
     * Retrieve a savings application/account
     *
     * @param  int $accountId accountId (required)
     * @param  bool $staffInSelectedOfficeOnly staffInSelectedOfficeOnly (optional, default to false)
     * @param  string $chargeStatus chargeStatus (optional, default to all)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveOne23AsyncWithHttpInfo($accountId, $staffInSelectedOfficeOnly = 'false', $chargeStatus = 'all')
    {
        $returnType = '\Frengky\Fineract\Model\GetSavingsAccountsAccountIdResponse';
        $request = $this->retrieveOne23Request($accountId, $staffInSelectedOfficeOnly, $chargeStatus);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveOne23'
     *
     * @param  int $accountId accountId (required)
     * @param  bool $staffInSelectedOfficeOnly staffInSelectedOfficeOnly (optional, default to false)
     * @param  string $chargeStatus chargeStatus (optional, default to all)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function retrieveOne23Request($accountId, $staffInSelectedOfficeOnly = 'false', $chargeStatus = 'all')
    {
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling retrieveOne23'
            );
        }

        $resourcePath = '/savingsaccounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($staffInSelectedOfficeOnly !== null) {
            $queryParams['staffInSelectedOfficeOnly'] = ObjectSerializer::toQueryValue($staffInSelectedOfficeOnly, null);
        }
        // query params
        if ($chargeStatus !== null) {
            $queryParams['chargeStatus'] = ObjectSerializer::toQueryValue($chargeStatus, null);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitApplication2
     *
     * Submit new savings application
     *
     * @param  \Frengky\Fineract\Model\PostSavingsAccountsRequest $body body (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PostSavingsAccountsResponse
     */
    public function submitApplication2($body)
    {
        list($response) = $this->submitApplication2WithHttpInfo($body);
        return $response;
    }

    /**
     * Operation submitApplication2WithHttpInfo
     *
     * Submit new savings application
     *
     * @param  \Frengky\Fineract\Model\PostSavingsAccountsRequest $body (required)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PostSavingsAccountsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitApplication2WithHttpInfo($body)
    {
        $returnType = '\Frengky\Fineract\Model\PostSavingsAccountsResponse';
        $request = $this->submitApplication2Request($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PostSavingsAccountsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation submitApplication2Async
     *
     * Submit new savings application
     *
     * @param  \Frengky\Fineract\Model\PostSavingsAccountsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitApplication2Async($body)
    {
        return $this->submitApplication2AsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitApplication2AsyncWithHttpInfo
     *
     * Submit new savings application
     *
     * @param  \Frengky\Fineract\Model\PostSavingsAccountsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitApplication2AsyncWithHttpInfo($body)
    {
        $returnType = '\Frengky\Fineract\Model\PostSavingsAccountsResponse';
        $request = $this->submitApplication2Request($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitApplication2'
     *
     * @param  \Frengky\Fineract\Model\PostSavingsAccountsRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function submitApplication2Request($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling submitApplication2'
            );
        }

        $resourcePath = '/savingsaccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitGSIMApplication
     *
     * @param  string $body body (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function submitGSIMApplication($body = null)
    {
        list($response) = $this->submitGSIMApplicationWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation submitGSIMApplicationWithHttpInfo
     *
     * @param  string $body (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitGSIMApplicationWithHttpInfo($body = null)
    {
        $returnType = 'string';
        $request = $this->submitGSIMApplicationRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation submitGSIMApplicationAsync
     *
     * 
     *
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitGSIMApplicationAsync($body = null)
    {
        return $this->submitGSIMApplicationAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitGSIMApplicationAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitGSIMApplicationAsyncWithHttpInfo($body = null)
    {
        $returnType = 'string';
        $request = $this->submitGSIMApplicationRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitGSIMApplication'
     *
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function submitGSIMApplicationRequest($body = null)
    {

        $resourcePath = '/savingsaccounts/gsim';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation template14
     *
     * Retrieve Savings Account Template
     *
     * @param  int $clientId clientId (optional)
     * @param  int $groupId groupId (optional)
     * @param  int $productId productId (optional)
     * @param  bool $staffInSelectedOfficeOnly staffInSelectedOfficeOnly (optional, default to false)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\GetSavingsAccountsTemplateResponse
     */
    public function template14($clientId = null, $groupId = null, $productId = null, $staffInSelectedOfficeOnly = 'false')
    {
        list($response) = $this->template14WithHttpInfo($clientId, $groupId, $productId, $staffInSelectedOfficeOnly);
        return $response;
    }

    /**
     * Operation template14WithHttpInfo
     *
     * Retrieve Savings Account Template
     *
     * @param  int $clientId clientId (optional)
     * @param  int $groupId groupId (optional)
     * @param  int $productId productId (optional)
     * @param  bool $staffInSelectedOfficeOnly staffInSelectedOfficeOnly (optional, default to false)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\GetSavingsAccountsTemplateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function template14WithHttpInfo($clientId = null, $groupId = null, $productId = null, $staffInSelectedOfficeOnly = 'false')
    {
        $returnType = '\Frengky\Fineract\Model\GetSavingsAccountsTemplateResponse';
        $request = $this->template14Request($clientId, $groupId, $productId, $staffInSelectedOfficeOnly);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\GetSavingsAccountsTemplateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation template14Async
     *
     * Retrieve Savings Account Template
     *
     * @param  int $clientId clientId (optional)
     * @param  int $groupId groupId (optional)
     * @param  int $productId productId (optional)
     * @param  bool $staffInSelectedOfficeOnly staffInSelectedOfficeOnly (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function template14Async($clientId = null, $groupId = null, $productId = null, $staffInSelectedOfficeOnly = 'false')
    {
        return $this->template14AsyncWithHttpInfo($clientId, $groupId, $productId, $staffInSelectedOfficeOnly)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation template14AsyncWithHttpInfo
     *
     * Retrieve Savings Account Template
     *
     * @param  int $clientId clientId (optional)
     * @param  int $groupId groupId (optional)
     * @param  int $productId productId (optional)
     * @param  bool $staffInSelectedOfficeOnly staffInSelectedOfficeOnly (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function template14AsyncWithHttpInfo($clientId = null, $groupId = null, $productId = null, $staffInSelectedOfficeOnly = 'false')
    {
        $returnType = '\Frengky\Fineract\Model\GetSavingsAccountsTemplateResponse';
        $request = $this->template14Request($clientId, $groupId, $productId, $staffInSelectedOfficeOnly);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'template14'
     *
     * @param  int $clientId clientId (optional)
     * @param  int $groupId groupId (optional)
     * @param  int $productId productId (optional)
     * @param  bool $staffInSelectedOfficeOnly staffInSelectedOfficeOnly (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function template14Request($clientId = null, $groupId = null, $productId = null, $staffInSelectedOfficeOnly = 'false')
    {

        $resourcePath = '/savingsaccounts/template';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($clientId !== null) {
            $queryParams['clientId'] = ObjectSerializer::toQueryValue($clientId, 'int64');
        }
        // query params
        if ($groupId !== null) {
            $queryParams['groupId'] = ObjectSerializer::toQueryValue($groupId, 'int64');
        }
        // query params
        if ($productId !== null) {
            $queryParams['productId'] = ObjectSerializer::toQueryValue($productId, 'int64');
        }
        // query params
        if ($staffInSelectedOfficeOnly !== null) {
            $queryParams['staffInSelectedOfficeOnly'] = ObjectSerializer::toQueryValue($staffInSelectedOfficeOnly, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation update18
     *
     * Modify a savings application | Modify savings account withhold tax applicability
     *
     * @param  \Frengky\Fineract\Model\PutSavingsAccountsAccountIdRequest $body body (required)
     * @param  int $accountId accountId (required)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Frengky\Fineract\Model\PutSavingsAccountsAccountIdResponse
     */
    public function update18($body, $accountId, $command = null)
    {
        list($response) = $this->update18WithHttpInfo($body, $accountId, $command);
        return $response;
    }

    /**
     * Operation update18WithHttpInfo
     *
     * Modify a savings application | Modify savings account withhold tax applicability
     *
     * @param  \Frengky\Fineract\Model\PutSavingsAccountsAccountIdRequest $body (required)
     * @param  int $accountId accountId (required)
     * @param  string $command command (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Frengky\Fineract\Model\PutSavingsAccountsAccountIdResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function update18WithHttpInfo($body, $accountId, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PutSavingsAccountsAccountIdResponse';
        $request = $this->update18Request($body, $accountId, $command);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Frengky\Fineract\Model\PutSavingsAccountsAccountIdResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation update18Async
     *
     * Modify a savings application | Modify savings account withhold tax applicability
     *
     * @param  \Frengky\Fineract\Model\PutSavingsAccountsAccountIdRequest $body (required)
     * @param  int $accountId accountId (required)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function update18Async($body, $accountId, $command = null)
    {
        return $this->update18AsyncWithHttpInfo($body, $accountId, $command)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation update18AsyncWithHttpInfo
     *
     * Modify a savings application | Modify savings account withhold tax applicability
     *
     * @param  \Frengky\Fineract\Model\PutSavingsAccountsAccountIdRequest $body (required)
     * @param  int $accountId accountId (required)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function update18AsyncWithHttpInfo($body, $accountId, $command = null)
    {
        $returnType = '\Frengky\Fineract\Model\PutSavingsAccountsAccountIdResponse';
        $request = $this->update18Request($body, $accountId, $command);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'update18'
     *
     * @param  \Frengky\Fineract\Model\PutSavingsAccountsAccountIdRequest $body (required)
     * @param  int $accountId accountId (required)
     * @param  string $command command (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function update18Request($body, $accountId, $command = null)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling update18'
            );
        }
        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling update18'
            );
        }

        $resourcePath = '/savingsaccounts/{accountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($command !== null) {
            $queryParams['command'] = ObjectSerializer::toQueryValue($command, null);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'accountId' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateGsim
     *
     * @param  int $parentAccountId parentAccountId (required)
     * @param  string $body body (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function updateGsim($parentAccountId, $body = null)
    {
        list($response) = $this->updateGsimWithHttpInfo($parentAccountId, $body);
        return $response;
    }

    /**
     * Operation updateGsimWithHttpInfo
     *
     * @param  int $parentAccountId (required)
     * @param  string $body (optional)
     *
     * @throws \Frengky\Fineract\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateGsimWithHttpInfo($parentAccountId, $body = null)
    {
        $returnType = 'string';
        $request = $this->updateGsimRequest($parentAccountId, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateGsimAsync
     *
     * 
     *
     * @param  int $parentAccountId (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGsimAsync($parentAccountId, $body = null)
    {
        return $this->updateGsimAsyncWithHttpInfo($parentAccountId, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateGsimAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $parentAccountId (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateGsimAsyncWithHttpInfo($parentAccountId, $body = null)
    {
        $returnType = 'string';
        $request = $this->updateGsimRequest($parentAccountId, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateGsim'
     *
     * @param  int $parentAccountId (required)
     * @param  string $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateGsimRequest($parentAccountId, $body = null)
    {
        // verify the required parameter 'parentAccountId' is set
        if ($parentAccountId === null || (is_array($parentAccountId) && count($parentAccountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $parentAccountId when calling updateGsim'
            );
        }

        $resourcePath = '/savingsaccounts/gsim/{parentAccountId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($parentAccountId !== null) {
            $resourcePath = str_replace(
                '{' . 'parentAccountId' . '}',
                ObjectSerializer::toPathValue($parentAccountId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('fineract-platform-tenantid');
        if ($apiKey !== null) {
            $headers['fineract-platform-tenantid'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
