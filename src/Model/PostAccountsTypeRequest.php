<?php
/**
 * PostAccountsTypeRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * PostAccountsTypeRequest Class Doc Comment
 *
 * @category Class
 * @description PostAccountsTypeRequest
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostAccountsTypeRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostAccountsTypeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clientId' => 'int',
'productId' => 'int',
'requestedShares' => 'int',
'externalId' => 'int',
'submittedDate' => 'string',
'minimumActivePeriod' => 'int',
'minimumActivePeriodFrequencyType' => 'int',
'lockinPeriodFrequency' => 'int',
'lockinPeriodFrequencyType' => 'int',
'applicationDate' => 'string',
'allowDividendCalculationForInactiveClients' => 'bool',
'locale' => 'string',
'dateFormat' => 'string',
'charges' => '\Frengky\Fineract\Model\PostAccountsCharges[]',
'savingsAccountId' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clientId' => 'int32',
'productId' => 'int32',
'requestedShares' => 'int32',
'externalId' => 'int32',
'submittedDate' => null,
'minimumActivePeriod' => 'int32',
'minimumActivePeriodFrequencyType' => 'int32',
'lockinPeriodFrequency' => 'int32',
'lockinPeriodFrequencyType' => 'int32',
'applicationDate' => null,
'allowDividendCalculationForInactiveClients' => null,
'locale' => null,
'dateFormat' => null,
'charges' => null,
'savingsAccountId' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clientId' => 'clientId',
'productId' => 'productId',
'requestedShares' => 'requestedShares',
'externalId' => 'externalId',
'submittedDate' => 'submittedDate',
'minimumActivePeriod' => 'minimumActivePeriod',
'minimumActivePeriodFrequencyType' => 'minimumActivePeriodFrequencyType',
'lockinPeriodFrequency' => 'lockinPeriodFrequency',
'lockinPeriodFrequencyType' => 'lockinPeriodFrequencyType',
'applicationDate' => 'applicationDate',
'allowDividendCalculationForInactiveClients' => 'allowDividendCalculationForInactiveClients',
'locale' => 'locale',
'dateFormat' => 'dateFormat',
'charges' => 'charges',
'savingsAccountId' => 'savingsAccountId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clientId' => 'setClientId',
'productId' => 'setProductId',
'requestedShares' => 'setRequestedShares',
'externalId' => 'setExternalId',
'submittedDate' => 'setSubmittedDate',
'minimumActivePeriod' => 'setMinimumActivePeriod',
'minimumActivePeriodFrequencyType' => 'setMinimumActivePeriodFrequencyType',
'lockinPeriodFrequency' => 'setLockinPeriodFrequency',
'lockinPeriodFrequencyType' => 'setLockinPeriodFrequencyType',
'applicationDate' => 'setApplicationDate',
'allowDividendCalculationForInactiveClients' => 'setAllowDividendCalculationForInactiveClients',
'locale' => 'setLocale',
'dateFormat' => 'setDateFormat',
'charges' => 'setCharges',
'savingsAccountId' => 'setSavingsAccountId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clientId' => 'getClientId',
'productId' => 'getProductId',
'requestedShares' => 'getRequestedShares',
'externalId' => 'getExternalId',
'submittedDate' => 'getSubmittedDate',
'minimumActivePeriod' => 'getMinimumActivePeriod',
'minimumActivePeriodFrequencyType' => 'getMinimumActivePeriodFrequencyType',
'lockinPeriodFrequency' => 'getLockinPeriodFrequency',
'lockinPeriodFrequencyType' => 'getLockinPeriodFrequencyType',
'applicationDate' => 'getApplicationDate',
'allowDividendCalculationForInactiveClients' => 'getAllowDividendCalculationForInactiveClients',
'locale' => 'getLocale',
'dateFormat' => 'getDateFormat',
'charges' => 'getCharges',
'savingsAccountId' => 'getSavingsAccountId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clientId'] = isset($data['clientId']) ? $data['clientId'] : null;
        $this->container['productId'] = isset($data['productId']) ? $data['productId'] : null;
        $this->container['requestedShares'] = isset($data['requestedShares']) ? $data['requestedShares'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['submittedDate'] = isset($data['submittedDate']) ? $data['submittedDate'] : null;
        $this->container['minimumActivePeriod'] = isset($data['minimumActivePeriod']) ? $data['minimumActivePeriod'] : null;
        $this->container['minimumActivePeriodFrequencyType'] = isset($data['minimumActivePeriodFrequencyType']) ? $data['minimumActivePeriodFrequencyType'] : null;
        $this->container['lockinPeriodFrequency'] = isset($data['lockinPeriodFrequency']) ? $data['lockinPeriodFrequency'] : null;
        $this->container['lockinPeriodFrequencyType'] = isset($data['lockinPeriodFrequencyType']) ? $data['lockinPeriodFrequencyType'] : null;
        $this->container['applicationDate'] = isset($data['applicationDate']) ? $data['applicationDate'] : null;
        $this->container['allowDividendCalculationForInactiveClients'] = isset($data['allowDividendCalculationForInactiveClients']) ? $data['allowDividendCalculationForInactiveClients'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['dateFormat'] = isset($data['dateFormat']) ? $data['dateFormat'] : null;
        $this->container['charges'] = isset($data['charges']) ? $data['charges'] : null;
        $this->container['savingsAccountId'] = isset($data['savingsAccountId']) ? $data['savingsAccountId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clientId
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param int $clientId clientId
     *
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param int $productId productId
     *
     * @return $this
     */
    public function setProductId($productId)
    {
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets requestedShares
     *
     * @return int
     */
    public function getRequestedShares()
    {
        return $this->container['requestedShares'];
    }

    /**
     * Sets requestedShares
     *
     * @param int $requestedShares requestedShares
     *
     * @return $this
     */
    public function setRequestedShares($requestedShares)
    {
        $this->container['requestedShares'] = $requestedShares;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return int
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param int $externalId externalId
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets submittedDate
     *
     * @return string
     */
    public function getSubmittedDate()
    {
        return $this->container['submittedDate'];
    }

    /**
     * Sets submittedDate
     *
     * @param string $submittedDate submittedDate
     *
     * @return $this
     */
    public function setSubmittedDate($submittedDate)
    {
        $this->container['submittedDate'] = $submittedDate;

        return $this;
    }

    /**
     * Gets minimumActivePeriod
     *
     * @return int
     */
    public function getMinimumActivePeriod()
    {
        return $this->container['minimumActivePeriod'];
    }

    /**
     * Sets minimumActivePeriod
     *
     * @param int $minimumActivePeriod minimumActivePeriod
     *
     * @return $this
     */
    public function setMinimumActivePeriod($minimumActivePeriod)
    {
        $this->container['minimumActivePeriod'] = $minimumActivePeriod;

        return $this;
    }

    /**
     * Gets minimumActivePeriodFrequencyType
     *
     * @return int
     */
    public function getMinimumActivePeriodFrequencyType()
    {
        return $this->container['minimumActivePeriodFrequencyType'];
    }

    /**
     * Sets minimumActivePeriodFrequencyType
     *
     * @param int $minimumActivePeriodFrequencyType minimumActivePeriodFrequencyType
     *
     * @return $this
     */
    public function setMinimumActivePeriodFrequencyType($minimumActivePeriodFrequencyType)
    {
        $this->container['minimumActivePeriodFrequencyType'] = $minimumActivePeriodFrequencyType;

        return $this;
    }

    /**
     * Gets lockinPeriodFrequency
     *
     * @return int
     */
    public function getLockinPeriodFrequency()
    {
        return $this->container['lockinPeriodFrequency'];
    }

    /**
     * Sets lockinPeriodFrequency
     *
     * @param int $lockinPeriodFrequency lockinPeriodFrequency
     *
     * @return $this
     */
    public function setLockinPeriodFrequency($lockinPeriodFrequency)
    {
        $this->container['lockinPeriodFrequency'] = $lockinPeriodFrequency;

        return $this;
    }

    /**
     * Gets lockinPeriodFrequencyType
     *
     * @return int
     */
    public function getLockinPeriodFrequencyType()
    {
        return $this->container['lockinPeriodFrequencyType'];
    }

    /**
     * Sets lockinPeriodFrequencyType
     *
     * @param int $lockinPeriodFrequencyType lockinPeriodFrequencyType
     *
     * @return $this
     */
    public function setLockinPeriodFrequencyType($lockinPeriodFrequencyType)
    {
        $this->container['lockinPeriodFrequencyType'] = $lockinPeriodFrequencyType;

        return $this;
    }

    /**
     * Gets applicationDate
     *
     * @return string
     */
    public function getApplicationDate()
    {
        return $this->container['applicationDate'];
    }

    /**
     * Sets applicationDate
     *
     * @param string $applicationDate applicationDate
     *
     * @return $this
     */
    public function setApplicationDate($applicationDate)
    {
        $this->container['applicationDate'] = $applicationDate;

        return $this;
    }

    /**
     * Gets allowDividendCalculationForInactiveClients
     *
     * @return bool
     */
    public function getAllowDividendCalculationForInactiveClients()
    {
        return $this->container['allowDividendCalculationForInactiveClients'];
    }

    /**
     * Sets allowDividendCalculationForInactiveClients
     *
     * @param bool $allowDividendCalculationForInactiveClients allowDividendCalculationForInactiveClients
     *
     * @return $this
     */
    public function setAllowDividendCalculationForInactiveClients($allowDividendCalculationForInactiveClients)
    {
        $this->container['allowDividendCalculationForInactiveClients'] = $allowDividendCalculationForInactiveClients;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets dateFormat
     *
     * @return string
     */
    public function getDateFormat()
    {
        return $this->container['dateFormat'];
    }

    /**
     * Sets dateFormat
     *
     * @param string $dateFormat dateFormat
     *
     * @return $this
     */
    public function setDateFormat($dateFormat)
    {
        $this->container['dateFormat'] = $dateFormat;

        return $this;
    }

    /**
     * Gets charges
     *
     * @return \Frengky\Fineract\Model\PostAccountsCharges[]
     */
    public function getCharges()
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges
     *
     * @param \Frengky\Fineract\Model\PostAccountsCharges[] $charges charges
     *
     * @return $this
     */
    public function setCharges($charges)
    {
        $this->container['charges'] = $charges;

        return $this;
    }

    /**
     * Gets savingsAccountId
     *
     * @return int
     */
    public function getSavingsAccountId()
    {
        return $this->container['savingsAccountId'];
    }

    /**
     * Sets savingsAccountId
     *
     * @param int $savingsAccountId savingsAccountId
     *
     * @return $this
     */
    public function setSavingsAccountId($savingsAccountId)
    {
        $this->container['savingsAccountId'] = $savingsAccountId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
