<?php
/**
 * PostStandingInstructionsRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * PostStandingInstructionsRequest Class Doc Comment
 *
 * @category Class
 * @description PostStandingInstructionsRequest
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostStandingInstructionsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostStandingInstructionsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fromOfficeId' => 'int',
'fromClientId' => 'int',
'fromAccountType' => 'int',
'name' => 'string',
'transferType' => 'int',
'priority' => 'int',
'status' => 'int',
'fromAccountId' => 'int',
'toOfficeId' => 'int',
'toClientId' => 'int',
'toAccountType' => 'int',
'toAccountId' => 'int',
'instructionType' => 'int',
'amount' => 'int',
'validFrom' => 'string',
'recurrenceType' => 'int',
'recurrenceInterval' => 'int',
'recurrenceFrequency' => 'int',
'locale' => 'string',
'dateFormat' => 'string',
'recurrenceOnMonthDay' => 'string',
'monthDayFormat' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fromOfficeId' => 'int64',
'fromClientId' => 'int64',
'fromAccountType' => 'int32',
'name' => null,
'transferType' => 'int32',
'priority' => 'int32',
'status' => 'int32',
'fromAccountId' => 'int64',
'toOfficeId' => 'int64',
'toClientId' => 'int64',
'toAccountType' => 'int32',
'toAccountId' => 'int64',
'instructionType' => 'int32',
'amount' => 'int32',
'validFrom' => null,
'recurrenceType' => 'int32',
'recurrenceInterval' => 'int32',
'recurrenceFrequency' => 'int32',
'locale' => null,
'dateFormat' => null,
'recurrenceOnMonthDay' => null,
'monthDayFormat' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fromOfficeId' => 'fromOfficeId',
'fromClientId' => 'fromClientId',
'fromAccountType' => 'fromAccountType',
'name' => 'name',
'transferType' => 'transferType',
'priority' => 'priority',
'status' => 'status',
'fromAccountId' => 'fromAccountId',
'toOfficeId' => 'toOfficeId',
'toClientId' => 'toClientId',
'toAccountType' => 'toAccountType',
'toAccountId' => 'toAccountId',
'instructionType' => 'instructionType',
'amount' => 'amount',
'validFrom' => 'validFrom',
'recurrenceType' => 'recurrenceType',
'recurrenceInterval' => 'recurrenceInterval',
'recurrenceFrequency' => 'recurrenceFrequency',
'locale' => 'locale',
'dateFormat' => 'dateFormat',
'recurrenceOnMonthDay' => 'recurrenceOnMonthDay',
'monthDayFormat' => 'monthDayFormat'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fromOfficeId' => 'setFromOfficeId',
'fromClientId' => 'setFromClientId',
'fromAccountType' => 'setFromAccountType',
'name' => 'setName',
'transferType' => 'setTransferType',
'priority' => 'setPriority',
'status' => 'setStatus',
'fromAccountId' => 'setFromAccountId',
'toOfficeId' => 'setToOfficeId',
'toClientId' => 'setToClientId',
'toAccountType' => 'setToAccountType',
'toAccountId' => 'setToAccountId',
'instructionType' => 'setInstructionType',
'amount' => 'setAmount',
'validFrom' => 'setValidFrom',
'recurrenceType' => 'setRecurrenceType',
'recurrenceInterval' => 'setRecurrenceInterval',
'recurrenceFrequency' => 'setRecurrenceFrequency',
'locale' => 'setLocale',
'dateFormat' => 'setDateFormat',
'recurrenceOnMonthDay' => 'setRecurrenceOnMonthDay',
'monthDayFormat' => 'setMonthDayFormat'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fromOfficeId' => 'getFromOfficeId',
'fromClientId' => 'getFromClientId',
'fromAccountType' => 'getFromAccountType',
'name' => 'getName',
'transferType' => 'getTransferType',
'priority' => 'getPriority',
'status' => 'getStatus',
'fromAccountId' => 'getFromAccountId',
'toOfficeId' => 'getToOfficeId',
'toClientId' => 'getToClientId',
'toAccountType' => 'getToAccountType',
'toAccountId' => 'getToAccountId',
'instructionType' => 'getInstructionType',
'amount' => 'getAmount',
'validFrom' => 'getValidFrom',
'recurrenceType' => 'getRecurrenceType',
'recurrenceInterval' => 'getRecurrenceInterval',
'recurrenceFrequency' => 'getRecurrenceFrequency',
'locale' => 'getLocale',
'dateFormat' => 'getDateFormat',
'recurrenceOnMonthDay' => 'getRecurrenceOnMonthDay',
'monthDayFormat' => 'getMonthDayFormat'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fromOfficeId'] = isset($data['fromOfficeId']) ? $data['fromOfficeId'] : null;
        $this->container['fromClientId'] = isset($data['fromClientId']) ? $data['fromClientId'] : null;
        $this->container['fromAccountType'] = isset($data['fromAccountType']) ? $data['fromAccountType'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['transferType'] = isset($data['transferType']) ? $data['transferType'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['fromAccountId'] = isset($data['fromAccountId']) ? $data['fromAccountId'] : null;
        $this->container['toOfficeId'] = isset($data['toOfficeId']) ? $data['toOfficeId'] : null;
        $this->container['toClientId'] = isset($data['toClientId']) ? $data['toClientId'] : null;
        $this->container['toAccountType'] = isset($data['toAccountType']) ? $data['toAccountType'] : null;
        $this->container['toAccountId'] = isset($data['toAccountId']) ? $data['toAccountId'] : null;
        $this->container['instructionType'] = isset($data['instructionType']) ? $data['instructionType'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['validFrom'] = isset($data['validFrom']) ? $data['validFrom'] : null;
        $this->container['recurrenceType'] = isset($data['recurrenceType']) ? $data['recurrenceType'] : null;
        $this->container['recurrenceInterval'] = isset($data['recurrenceInterval']) ? $data['recurrenceInterval'] : null;
        $this->container['recurrenceFrequency'] = isset($data['recurrenceFrequency']) ? $data['recurrenceFrequency'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['dateFormat'] = isset($data['dateFormat']) ? $data['dateFormat'] : null;
        $this->container['recurrenceOnMonthDay'] = isset($data['recurrenceOnMonthDay']) ? $data['recurrenceOnMonthDay'] : null;
        $this->container['monthDayFormat'] = isset($data['monthDayFormat']) ? $data['monthDayFormat'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fromOfficeId
     *
     * @return int
     */
    public function getFromOfficeId()
    {
        return $this->container['fromOfficeId'];
    }

    /**
     * Sets fromOfficeId
     *
     * @param int $fromOfficeId fromOfficeId
     *
     * @return $this
     */
    public function setFromOfficeId($fromOfficeId)
    {
        $this->container['fromOfficeId'] = $fromOfficeId;

        return $this;
    }

    /**
     * Gets fromClientId
     *
     * @return int
     */
    public function getFromClientId()
    {
        return $this->container['fromClientId'];
    }

    /**
     * Sets fromClientId
     *
     * @param int $fromClientId fromClientId
     *
     * @return $this
     */
    public function setFromClientId($fromClientId)
    {
        $this->container['fromClientId'] = $fromClientId;

        return $this;
    }

    /**
     * Gets fromAccountType
     *
     * @return int
     */
    public function getFromAccountType()
    {
        return $this->container['fromAccountType'];
    }

    /**
     * Sets fromAccountType
     *
     * @param int $fromAccountType fromAccountType
     *
     * @return $this
     */
    public function setFromAccountType($fromAccountType)
    {
        $this->container['fromAccountType'] = $fromAccountType;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets transferType
     *
     * @return int
     */
    public function getTransferType()
    {
        return $this->container['transferType'];
    }

    /**
     * Sets transferType
     *
     * @param int $transferType transferType
     *
     * @return $this
     */
    public function setTransferType($transferType)
    {
        $this->container['transferType'] = $transferType;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets fromAccountId
     *
     * @return int
     */
    public function getFromAccountId()
    {
        return $this->container['fromAccountId'];
    }

    /**
     * Sets fromAccountId
     *
     * @param int $fromAccountId fromAccountId
     *
     * @return $this
     */
    public function setFromAccountId($fromAccountId)
    {
        $this->container['fromAccountId'] = $fromAccountId;

        return $this;
    }

    /**
     * Gets toOfficeId
     *
     * @return int
     */
    public function getToOfficeId()
    {
        return $this->container['toOfficeId'];
    }

    /**
     * Sets toOfficeId
     *
     * @param int $toOfficeId toOfficeId
     *
     * @return $this
     */
    public function setToOfficeId($toOfficeId)
    {
        $this->container['toOfficeId'] = $toOfficeId;

        return $this;
    }

    /**
     * Gets toClientId
     *
     * @return int
     */
    public function getToClientId()
    {
        return $this->container['toClientId'];
    }

    /**
     * Sets toClientId
     *
     * @param int $toClientId toClientId
     *
     * @return $this
     */
    public function setToClientId($toClientId)
    {
        $this->container['toClientId'] = $toClientId;

        return $this;
    }

    /**
     * Gets toAccountType
     *
     * @return int
     */
    public function getToAccountType()
    {
        return $this->container['toAccountType'];
    }

    /**
     * Sets toAccountType
     *
     * @param int $toAccountType toAccountType
     *
     * @return $this
     */
    public function setToAccountType($toAccountType)
    {
        $this->container['toAccountType'] = $toAccountType;

        return $this;
    }

    /**
     * Gets toAccountId
     *
     * @return int
     */
    public function getToAccountId()
    {
        return $this->container['toAccountId'];
    }

    /**
     * Sets toAccountId
     *
     * @param int $toAccountId toAccountId
     *
     * @return $this
     */
    public function setToAccountId($toAccountId)
    {
        $this->container['toAccountId'] = $toAccountId;

        return $this;
    }

    /**
     * Gets instructionType
     *
     * @return int
     */
    public function getInstructionType()
    {
        return $this->container['instructionType'];
    }

    /**
     * Sets instructionType
     *
     * @param int $instructionType instructionType
     *
     * @return $this
     */
    public function setInstructionType($instructionType)
    {
        $this->container['instructionType'] = $instructionType;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return string
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param string $validFrom validFrom
     *
     * @return $this
     */
    public function setValidFrom($validFrom)
    {
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets recurrenceType
     *
     * @return int
     */
    public function getRecurrenceType()
    {
        return $this->container['recurrenceType'];
    }

    /**
     * Sets recurrenceType
     *
     * @param int $recurrenceType recurrenceType
     *
     * @return $this
     */
    public function setRecurrenceType($recurrenceType)
    {
        $this->container['recurrenceType'] = $recurrenceType;

        return $this;
    }

    /**
     * Gets recurrenceInterval
     *
     * @return int
     */
    public function getRecurrenceInterval()
    {
        return $this->container['recurrenceInterval'];
    }

    /**
     * Sets recurrenceInterval
     *
     * @param int $recurrenceInterval recurrenceInterval
     *
     * @return $this
     */
    public function setRecurrenceInterval($recurrenceInterval)
    {
        $this->container['recurrenceInterval'] = $recurrenceInterval;

        return $this;
    }

    /**
     * Gets recurrenceFrequency
     *
     * @return int
     */
    public function getRecurrenceFrequency()
    {
        return $this->container['recurrenceFrequency'];
    }

    /**
     * Sets recurrenceFrequency
     *
     * @param int $recurrenceFrequency recurrenceFrequency
     *
     * @return $this
     */
    public function setRecurrenceFrequency($recurrenceFrequency)
    {
        $this->container['recurrenceFrequency'] = $recurrenceFrequency;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale en
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets dateFormat
     *
     * @return string
     */
    public function getDateFormat()
    {
        return $this->container['dateFormat'];
    }

    /**
     * Sets dateFormat
     *
     * @param string $dateFormat dateFormat
     *
     * @return $this
     */
    public function setDateFormat($dateFormat)
    {
        $this->container['dateFormat'] = $dateFormat;

        return $this;
    }

    /**
     * Gets recurrenceOnMonthDay
     *
     * @return string
     */
    public function getRecurrenceOnMonthDay()
    {
        return $this->container['recurrenceOnMonthDay'];
    }

    /**
     * Sets recurrenceOnMonthDay
     *
     * @param string $recurrenceOnMonthDay recurrenceOnMonthDay
     *
     * @return $this
     */
    public function setRecurrenceOnMonthDay($recurrenceOnMonthDay)
    {
        $this->container['recurrenceOnMonthDay'] = $recurrenceOnMonthDay;

        return $this;
    }

    /**
     * Gets monthDayFormat
     *
     * @return string
     */
    public function getMonthDayFormat()
    {
        return $this->container['monthDayFormat'];
    }

    /**
     * Sets monthDayFormat
     *
     * @param string $monthDayFormat monthDayFormat
     *
     * @return $this
     */
    public function setMonthDayFormat($monthDayFormat)
    {
        $this->container['monthDayFormat'] = $monthDayFormat;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
