<?php
/**
 * SavingsProductData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * SavingsProductData Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SavingsProductData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SavingsProductData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'currency' => '\Frengky\Fineract\Model\CurrencyData',
'nominalAnnualInterestRate' => 'float',
'interestCompoundingPeriodType' => '\Frengky\Fineract\Model\EnumOptionData',
'interestPostingPeriodType' => '\Frengky\Fineract\Model\EnumOptionData',
'interestCalculationType' => '\Frengky\Fineract\Model\EnumOptionData',
'interestCalculationDaysInYearType' => '\Frengky\Fineract\Model\EnumOptionData',
'minRequiredOpeningBalance' => 'float',
'lockinPeriodFrequency' => 'int',
'lockinPeriodFrequencyType' => '\Frengky\Fineract\Model\EnumOptionData',
'withdrawalFeeForTransfers' => 'bool',
'allowOverdraft' => 'bool',
'overdraftLimit' => 'float',
'minRequiredBalance' => 'float',
'depositAccountType' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'name' => null,
'currency' => null,
'nominalAnnualInterestRate' => null,
'interestCompoundingPeriodType' => null,
'interestPostingPeriodType' => null,
'interestCalculationType' => null,
'interestCalculationDaysInYearType' => null,
'minRequiredOpeningBalance' => null,
'lockinPeriodFrequency' => 'int32',
'lockinPeriodFrequencyType' => null,
'withdrawalFeeForTransfers' => null,
'allowOverdraft' => null,
'overdraftLimit' => null,
'minRequiredBalance' => null,
'depositAccountType' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'currency' => 'currency',
'nominalAnnualInterestRate' => 'nominalAnnualInterestRate',
'interestCompoundingPeriodType' => 'interestCompoundingPeriodType',
'interestPostingPeriodType' => 'interestPostingPeriodType',
'interestCalculationType' => 'interestCalculationType',
'interestCalculationDaysInYearType' => 'interestCalculationDaysInYearType',
'minRequiredOpeningBalance' => 'minRequiredOpeningBalance',
'lockinPeriodFrequency' => 'lockinPeriodFrequency',
'lockinPeriodFrequencyType' => 'lockinPeriodFrequencyType',
'withdrawalFeeForTransfers' => 'withdrawalFeeForTransfers',
'allowOverdraft' => 'allowOverdraft',
'overdraftLimit' => 'overdraftLimit',
'minRequiredBalance' => 'minRequiredBalance',
'depositAccountType' => 'depositAccountType'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'currency' => 'setCurrency',
'nominalAnnualInterestRate' => 'setNominalAnnualInterestRate',
'interestCompoundingPeriodType' => 'setInterestCompoundingPeriodType',
'interestPostingPeriodType' => 'setInterestPostingPeriodType',
'interestCalculationType' => 'setInterestCalculationType',
'interestCalculationDaysInYearType' => 'setInterestCalculationDaysInYearType',
'minRequiredOpeningBalance' => 'setMinRequiredOpeningBalance',
'lockinPeriodFrequency' => 'setLockinPeriodFrequency',
'lockinPeriodFrequencyType' => 'setLockinPeriodFrequencyType',
'withdrawalFeeForTransfers' => 'setWithdrawalFeeForTransfers',
'allowOverdraft' => 'setAllowOverdraft',
'overdraftLimit' => 'setOverdraftLimit',
'minRequiredBalance' => 'setMinRequiredBalance',
'depositAccountType' => 'setDepositAccountType'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'currency' => 'getCurrency',
'nominalAnnualInterestRate' => 'getNominalAnnualInterestRate',
'interestCompoundingPeriodType' => 'getInterestCompoundingPeriodType',
'interestPostingPeriodType' => 'getInterestPostingPeriodType',
'interestCalculationType' => 'getInterestCalculationType',
'interestCalculationDaysInYearType' => 'getInterestCalculationDaysInYearType',
'minRequiredOpeningBalance' => 'getMinRequiredOpeningBalance',
'lockinPeriodFrequency' => 'getLockinPeriodFrequency',
'lockinPeriodFrequencyType' => 'getLockinPeriodFrequencyType',
'withdrawalFeeForTransfers' => 'getWithdrawalFeeForTransfers',
'allowOverdraft' => 'getAllowOverdraft',
'overdraftLimit' => 'getOverdraftLimit',
'minRequiredBalance' => 'getMinRequiredBalance',
'depositAccountType' => 'getDepositAccountType'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['nominalAnnualInterestRate'] = isset($data['nominalAnnualInterestRate']) ? $data['nominalAnnualInterestRate'] : null;
        $this->container['interestCompoundingPeriodType'] = isset($data['interestCompoundingPeriodType']) ? $data['interestCompoundingPeriodType'] : null;
        $this->container['interestPostingPeriodType'] = isset($data['interestPostingPeriodType']) ? $data['interestPostingPeriodType'] : null;
        $this->container['interestCalculationType'] = isset($data['interestCalculationType']) ? $data['interestCalculationType'] : null;
        $this->container['interestCalculationDaysInYearType'] = isset($data['interestCalculationDaysInYearType']) ? $data['interestCalculationDaysInYearType'] : null;
        $this->container['minRequiredOpeningBalance'] = isset($data['minRequiredOpeningBalance']) ? $data['minRequiredOpeningBalance'] : null;
        $this->container['lockinPeriodFrequency'] = isset($data['lockinPeriodFrequency']) ? $data['lockinPeriodFrequency'] : null;
        $this->container['lockinPeriodFrequencyType'] = isset($data['lockinPeriodFrequencyType']) ? $data['lockinPeriodFrequencyType'] : null;
        $this->container['withdrawalFeeForTransfers'] = isset($data['withdrawalFeeForTransfers']) ? $data['withdrawalFeeForTransfers'] : null;
        $this->container['allowOverdraft'] = isset($data['allowOverdraft']) ? $data['allowOverdraft'] : null;
        $this->container['overdraftLimit'] = isset($data['overdraftLimit']) ? $data['overdraftLimit'] : null;
        $this->container['minRequiredBalance'] = isset($data['minRequiredBalance']) ? $data['minRequiredBalance'] : null;
        $this->container['depositAccountType'] = isset($data['depositAccountType']) ? $data['depositAccountType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Frengky\Fineract\Model\CurrencyData
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Frengky\Fineract\Model\CurrencyData $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets nominalAnnualInterestRate
     *
     * @return float
     */
    public function getNominalAnnualInterestRate()
    {
        return $this->container['nominalAnnualInterestRate'];
    }

    /**
     * Sets nominalAnnualInterestRate
     *
     * @param float $nominalAnnualInterestRate nominalAnnualInterestRate
     *
     * @return $this
     */
    public function setNominalAnnualInterestRate($nominalAnnualInterestRate)
    {
        $this->container['nominalAnnualInterestRate'] = $nominalAnnualInterestRate;

        return $this;
    }

    /**
     * Gets interestCompoundingPeriodType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getInterestCompoundingPeriodType()
    {
        return $this->container['interestCompoundingPeriodType'];
    }

    /**
     * Sets interestCompoundingPeriodType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $interestCompoundingPeriodType interestCompoundingPeriodType
     *
     * @return $this
     */
    public function setInterestCompoundingPeriodType($interestCompoundingPeriodType)
    {
        $this->container['interestCompoundingPeriodType'] = $interestCompoundingPeriodType;

        return $this;
    }

    /**
     * Gets interestPostingPeriodType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getInterestPostingPeriodType()
    {
        return $this->container['interestPostingPeriodType'];
    }

    /**
     * Sets interestPostingPeriodType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $interestPostingPeriodType interestPostingPeriodType
     *
     * @return $this
     */
    public function setInterestPostingPeriodType($interestPostingPeriodType)
    {
        $this->container['interestPostingPeriodType'] = $interestPostingPeriodType;

        return $this;
    }

    /**
     * Gets interestCalculationType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getInterestCalculationType()
    {
        return $this->container['interestCalculationType'];
    }

    /**
     * Sets interestCalculationType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $interestCalculationType interestCalculationType
     *
     * @return $this
     */
    public function setInterestCalculationType($interestCalculationType)
    {
        $this->container['interestCalculationType'] = $interestCalculationType;

        return $this;
    }

    /**
     * Gets interestCalculationDaysInYearType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getInterestCalculationDaysInYearType()
    {
        return $this->container['interestCalculationDaysInYearType'];
    }

    /**
     * Sets interestCalculationDaysInYearType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $interestCalculationDaysInYearType interestCalculationDaysInYearType
     *
     * @return $this
     */
    public function setInterestCalculationDaysInYearType($interestCalculationDaysInYearType)
    {
        $this->container['interestCalculationDaysInYearType'] = $interestCalculationDaysInYearType;

        return $this;
    }

    /**
     * Gets minRequiredOpeningBalance
     *
     * @return float
     */
    public function getMinRequiredOpeningBalance()
    {
        return $this->container['minRequiredOpeningBalance'];
    }

    /**
     * Sets minRequiredOpeningBalance
     *
     * @param float $minRequiredOpeningBalance minRequiredOpeningBalance
     *
     * @return $this
     */
    public function setMinRequiredOpeningBalance($minRequiredOpeningBalance)
    {
        $this->container['minRequiredOpeningBalance'] = $minRequiredOpeningBalance;

        return $this;
    }

    /**
     * Gets lockinPeriodFrequency
     *
     * @return int
     */
    public function getLockinPeriodFrequency()
    {
        return $this->container['lockinPeriodFrequency'];
    }

    /**
     * Sets lockinPeriodFrequency
     *
     * @param int $lockinPeriodFrequency lockinPeriodFrequency
     *
     * @return $this
     */
    public function setLockinPeriodFrequency($lockinPeriodFrequency)
    {
        $this->container['lockinPeriodFrequency'] = $lockinPeriodFrequency;

        return $this;
    }

    /**
     * Gets lockinPeriodFrequencyType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getLockinPeriodFrequencyType()
    {
        return $this->container['lockinPeriodFrequencyType'];
    }

    /**
     * Sets lockinPeriodFrequencyType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $lockinPeriodFrequencyType lockinPeriodFrequencyType
     *
     * @return $this
     */
    public function setLockinPeriodFrequencyType($lockinPeriodFrequencyType)
    {
        $this->container['lockinPeriodFrequencyType'] = $lockinPeriodFrequencyType;

        return $this;
    }

    /**
     * Gets withdrawalFeeForTransfers
     *
     * @return bool
     */
    public function getWithdrawalFeeForTransfers()
    {
        return $this->container['withdrawalFeeForTransfers'];
    }

    /**
     * Sets withdrawalFeeForTransfers
     *
     * @param bool $withdrawalFeeForTransfers withdrawalFeeForTransfers
     *
     * @return $this
     */
    public function setWithdrawalFeeForTransfers($withdrawalFeeForTransfers)
    {
        $this->container['withdrawalFeeForTransfers'] = $withdrawalFeeForTransfers;

        return $this;
    }

    /**
     * Gets allowOverdraft
     *
     * @return bool
     */
    public function getAllowOverdraft()
    {
        return $this->container['allowOverdraft'];
    }

    /**
     * Sets allowOverdraft
     *
     * @param bool $allowOverdraft allowOverdraft
     *
     * @return $this
     */
    public function setAllowOverdraft($allowOverdraft)
    {
        $this->container['allowOverdraft'] = $allowOverdraft;

        return $this;
    }

    /**
     * Gets overdraftLimit
     *
     * @return float
     */
    public function getOverdraftLimit()
    {
        return $this->container['overdraftLimit'];
    }

    /**
     * Sets overdraftLimit
     *
     * @param float $overdraftLimit overdraftLimit
     *
     * @return $this
     */
    public function setOverdraftLimit($overdraftLimit)
    {
        $this->container['overdraftLimit'] = $overdraftLimit;

        return $this;
    }

    /**
     * Gets minRequiredBalance
     *
     * @return float
     */
    public function getMinRequiredBalance()
    {
        return $this->container['minRequiredBalance'];
    }

    /**
     * Sets minRequiredBalance
     *
     * @param float $minRequiredBalance minRequiredBalance
     *
     * @return $this
     */
    public function setMinRequiredBalance($minRequiredBalance)
    {
        $this->container['minRequiredBalance'] = $minRequiredBalance;

        return $this;
    }

    /**
     * Gets depositAccountType
     *
     * @return string
     */
    public function getDepositAccountType()
    {
        return $this->container['depositAccountType'];
    }

    /**
     * Sets depositAccountType
     *
     * @param string $depositAccountType depositAccountType
     *
     * @return $this
     */
    public function setDepositAccountType($depositAccountType)
    {
        $this->container['depositAccountType'] = $depositAccountType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
