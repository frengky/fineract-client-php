<?php
/**
 * GetClientClientIdAddressesResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetClientClientIdAddressesResponse Class Doc Comment
 *
 * @category Class
 * @description GetClientClientIdAddressesResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetClientClientIdAddressesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetClientClientIdAddressesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clientId' => 'int',
'addressType' => 'string',
'addressId' => 'int',
'addressTypeId' => 'int',
'isActive' => 'bool',
'street' => 'string',
'addressLine1' => 'string',
'addressLine2' => 'string',
'addressLine3' => 'string',
'townVillage' => 'string',
'city' => 'string',
'countyDistrict' => 'string',
'stateProvinceId' => 'int',
'countryName' => 'string',
'stateName' => 'string',
'countryId' => 'int',
'postalCode' => 'int',
'createdBy' => 'string',
'updatedBy' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clientId' => 'int64',
'addressType' => null,
'addressId' => 'int32',
'addressTypeId' => 'int32',
'isActive' => null,
'street' => null,
'addressLine1' => null,
'addressLine2' => null,
'addressLine3' => null,
'townVillage' => null,
'city' => null,
'countyDistrict' => null,
'stateProvinceId' => 'int32',
'countryName' => null,
'stateName' => null,
'countryId' => 'int32',
'postalCode' => 'int64',
'createdBy' => null,
'updatedBy' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clientId' => 'client_id',
'addressType' => 'addressType',
'addressId' => 'addressId',
'addressTypeId' => 'addressTypeId',
'isActive' => 'isActive',
'street' => 'street',
'addressLine1' => 'addressLine1',
'addressLine2' => 'addressLine2',
'addressLine3' => 'addressLine3',
'townVillage' => 'townVillage',
'city' => 'city',
'countyDistrict' => 'countyDistrict',
'stateProvinceId' => 'stateProvinceId',
'countryName' => 'countryName',
'stateName' => 'stateName',
'countryId' => 'countryId',
'postalCode' => 'postalCode',
'createdBy' => 'createdBy',
'updatedBy' => 'updatedBy'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clientId' => 'setClientId',
'addressType' => 'setAddressType',
'addressId' => 'setAddressId',
'addressTypeId' => 'setAddressTypeId',
'isActive' => 'setIsActive',
'street' => 'setStreet',
'addressLine1' => 'setAddressLine1',
'addressLine2' => 'setAddressLine2',
'addressLine3' => 'setAddressLine3',
'townVillage' => 'setTownVillage',
'city' => 'setCity',
'countyDistrict' => 'setCountyDistrict',
'stateProvinceId' => 'setStateProvinceId',
'countryName' => 'setCountryName',
'stateName' => 'setStateName',
'countryId' => 'setCountryId',
'postalCode' => 'setPostalCode',
'createdBy' => 'setCreatedBy',
'updatedBy' => 'setUpdatedBy'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clientId' => 'getClientId',
'addressType' => 'getAddressType',
'addressId' => 'getAddressId',
'addressTypeId' => 'getAddressTypeId',
'isActive' => 'getIsActive',
'street' => 'getStreet',
'addressLine1' => 'getAddressLine1',
'addressLine2' => 'getAddressLine2',
'addressLine3' => 'getAddressLine3',
'townVillage' => 'getTownVillage',
'city' => 'getCity',
'countyDistrict' => 'getCountyDistrict',
'stateProvinceId' => 'getStateProvinceId',
'countryName' => 'getCountryName',
'stateName' => 'getStateName',
'countryId' => 'getCountryId',
'postalCode' => 'getPostalCode',
'createdBy' => 'getCreatedBy',
'updatedBy' => 'getUpdatedBy'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clientId'] = isset($data['clientId']) ? $data['clientId'] : null;
        $this->container['addressType'] = isset($data['addressType']) ? $data['addressType'] : null;
        $this->container['addressId'] = isset($data['addressId']) ? $data['addressId'] : null;
        $this->container['addressTypeId'] = isset($data['addressTypeId']) ? $data['addressTypeId'] : null;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : null;
        $this->container['street'] = isset($data['street']) ? $data['street'] : null;
        $this->container['addressLine1'] = isset($data['addressLine1']) ? $data['addressLine1'] : null;
        $this->container['addressLine2'] = isset($data['addressLine2']) ? $data['addressLine2'] : null;
        $this->container['addressLine3'] = isset($data['addressLine3']) ? $data['addressLine3'] : null;
        $this->container['townVillage'] = isset($data['townVillage']) ? $data['townVillage'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['countyDistrict'] = isset($data['countyDistrict']) ? $data['countyDistrict'] : null;
        $this->container['stateProvinceId'] = isset($data['stateProvinceId']) ? $data['stateProvinceId'] : null;
        $this->container['countryName'] = isset($data['countryName']) ? $data['countryName'] : null;
        $this->container['stateName'] = isset($data['stateName']) ? $data['stateName'] : null;
        $this->container['countryId'] = isset($data['countryId']) ? $data['countryId'] : null;
        $this->container['postalCode'] = isset($data['postalCode']) ? $data['postalCode'] : null;
        $this->container['createdBy'] = isset($data['createdBy']) ? $data['createdBy'] : null;
        $this->container['updatedBy'] = isset($data['updatedBy']) ? $data['updatedBy'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clientId
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param int $clientId clientId
     *
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets addressType
     *
     * @return string
     */
    public function getAddressType()
    {
        return $this->container['addressType'];
    }

    /**
     * Sets addressType
     *
     * @param string $addressType addressType
     *
     * @return $this
     */
    public function setAddressType($addressType)
    {
        $this->container['addressType'] = $addressType;

        return $this;
    }

    /**
     * Gets addressId
     *
     * @return int
     */
    public function getAddressId()
    {
        return $this->container['addressId'];
    }

    /**
     * Sets addressId
     *
     * @param int $addressId addressId
     *
     * @return $this
     */
    public function setAddressId($addressId)
    {
        $this->container['addressId'] = $addressId;

        return $this;
    }

    /**
     * Gets addressTypeId
     *
     * @return int
     */
    public function getAddressTypeId()
    {
        return $this->container['addressTypeId'];
    }

    /**
     * Sets addressTypeId
     *
     * @param int $addressTypeId addressTypeId
     *
     * @return $this
     */
    public function setAddressTypeId($addressTypeId)
    {
        $this->container['addressTypeId'] = $addressTypeId;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive isActive
     *
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string $street street
     *
     * @return $this
     */
    public function setStreet($street)
    {
        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets addressLine1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['addressLine1'];
    }

    /**
     * Sets addressLine1
     *
     * @param string $addressLine1 addressLine1
     *
     * @return $this
     */
    public function setAddressLine1($addressLine1)
    {
        $this->container['addressLine1'] = $addressLine1;

        return $this;
    }

    /**
     * Gets addressLine2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['addressLine2'];
    }

    /**
     * Sets addressLine2
     *
     * @param string $addressLine2 addressLine2
     *
     * @return $this
     */
    public function setAddressLine2($addressLine2)
    {
        $this->container['addressLine2'] = $addressLine2;

        return $this;
    }

    /**
     * Gets addressLine3
     *
     * @return string
     */
    public function getAddressLine3()
    {
        return $this->container['addressLine3'];
    }

    /**
     * Sets addressLine3
     *
     * @param string $addressLine3 addressLine3
     *
     * @return $this
     */
    public function setAddressLine3($addressLine3)
    {
        $this->container['addressLine3'] = $addressLine3;

        return $this;
    }

    /**
     * Gets townVillage
     *
     * @return string
     */
    public function getTownVillage()
    {
        return $this->container['townVillage'];
    }

    /**
     * Sets townVillage
     *
     * @param string $townVillage townVillage
     *
     * @return $this
     */
    public function setTownVillage($townVillage)
    {
        $this->container['townVillage'] = $townVillage;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets countyDistrict
     *
     * @return string
     */
    public function getCountyDistrict()
    {
        return $this->container['countyDistrict'];
    }

    /**
     * Sets countyDistrict
     *
     * @param string $countyDistrict countyDistrict
     *
     * @return $this
     */
    public function setCountyDistrict($countyDistrict)
    {
        $this->container['countyDistrict'] = $countyDistrict;

        return $this;
    }

    /**
     * Gets stateProvinceId
     *
     * @return int
     */
    public function getStateProvinceId()
    {
        return $this->container['stateProvinceId'];
    }

    /**
     * Sets stateProvinceId
     *
     * @param int $stateProvinceId stateProvinceId
     *
     * @return $this
     */
    public function setStateProvinceId($stateProvinceId)
    {
        $this->container['stateProvinceId'] = $stateProvinceId;

        return $this;
    }

    /**
     * Gets countryName
     *
     * @return string
     */
    public function getCountryName()
    {
        return $this->container['countryName'];
    }

    /**
     * Sets countryName
     *
     * @param string $countryName countryName
     *
     * @return $this
     */
    public function setCountryName($countryName)
    {
        $this->container['countryName'] = $countryName;

        return $this;
    }

    /**
     * Gets stateName
     *
     * @return string
     */
    public function getStateName()
    {
        return $this->container['stateName'];
    }

    /**
     * Sets stateName
     *
     * @param string $stateName stateName
     *
     * @return $this
     */
    public function setStateName($stateName)
    {
        $this->container['stateName'] = $stateName;

        return $this;
    }

    /**
     * Gets countryId
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['countryId'];
    }

    /**
     * Sets countryId
     *
     * @param int $countryId countryId
     *
     * @return $this
     */
    public function setCountryId($countryId)
    {
        $this->container['countryId'] = $countryId;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return int
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param int $postalCode postalCode
     *
     * @return $this
     */
    public function setPostalCode($postalCode)
    {
        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets createdBy
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['createdBy'];
    }

    /**
     * Sets createdBy
     *
     * @param string $createdBy createdBy
     *
     * @return $this
     */
    public function setCreatedBy($createdBy)
    {
        $this->container['createdBy'] = $createdBy;

        return $this;
    }

    /**
     * Gets updatedBy
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updatedBy'];
    }

    /**
     * Sets updatedBy
     *
     * @param string $updatedBy updatedBy
     *
     * @return $this
     */
    public function setUpdatedBy($updatedBy)
    {
        $this->container['updatedBy'] = $updatedBy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
