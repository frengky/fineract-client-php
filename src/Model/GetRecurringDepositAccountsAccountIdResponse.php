<?php
/**
 * GetRecurringDepositAccountsAccountIdResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetRecurringDepositAccountsAccountIdResponse Class Doc Comment
 *
 * @category Class
 * @description GetRecurringDepositAccountsAccountIdResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetRecurringDepositAccountsAccountIdResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetRecurringDepositAccountsAccountIdResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'accountNo' => 'int',
'externalId' => 'string',
'clientId' => 'int',
'clientName' => 'string',
'savingsProductId' => 'int',
'savingsProductName' => 'string',
'fieldOfficerId' => 'int',
'status' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsStatus',
'timeline' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsTimeline',
'currency' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsCurrency',
'interestCompoundingPeriodType' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsInterestCompoundingPeriodType',
'interestPostingPeriodType' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsInterestPostingPeriodType',
'interestCalculationType' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsInterestCalculationType',
'interestCalculationDaysInYearType' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsInterestCalculationDaysInYearType',
'preClosurePenalApplicable' => 'bool',
'minDepositTerm' => 'int',
'maxDepositTerm' => 'int',
'minDepositTermType' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsMinDepositTermType',
'maxDepositTermType' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsMaxDepositTermType',
'recurringDepositAmount' => 'int',
'recurringDepositFrequency' => 'int',
'expectedFirstDepositOnDate' => '\DateTime',
'recurringDepositFrequencyType' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsRecurringDepositFrequencyType',
'depositPeriod' => 'int',
'depositPeriodFrequency' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsDepositPeriodFrequency',
'summary' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsSummary',
'accountChart' => '\Frengky\Fineract\Model\GetRecurringDepositAccountsAccountChart'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'accountNo' => 'int64',
'externalId' => null,
'clientId' => 'int32',
'clientName' => null,
'savingsProductId' => 'int32',
'savingsProductName' => null,
'fieldOfficerId' => 'int32',
'status' => null,
'timeline' => null,
'currency' => null,
'interestCompoundingPeriodType' => null,
'interestPostingPeriodType' => null,
'interestCalculationType' => null,
'interestCalculationDaysInYearType' => null,
'preClosurePenalApplicable' => null,
'minDepositTerm' => 'int32',
'maxDepositTerm' => 'int32',
'minDepositTermType' => null,
'maxDepositTermType' => null,
'recurringDepositAmount' => 'int32',
'recurringDepositFrequency' => 'int32',
'expectedFirstDepositOnDate' => 'date',
'recurringDepositFrequencyType' => null,
'depositPeriod' => 'int32',
'depositPeriodFrequency' => null,
'summary' => null,
'accountChart' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'accountNo' => 'accountNo',
'externalId' => 'externalId',
'clientId' => 'clientId',
'clientName' => 'clientName',
'savingsProductId' => 'savingsProductId',
'savingsProductName' => 'savingsProductName',
'fieldOfficerId' => 'fieldOfficerId',
'status' => 'status',
'timeline' => 'timeline',
'currency' => 'currency',
'interestCompoundingPeriodType' => 'interestCompoundingPeriodType',
'interestPostingPeriodType' => 'interestPostingPeriodType',
'interestCalculationType' => 'interestCalculationType',
'interestCalculationDaysInYearType' => 'interestCalculationDaysInYearType',
'preClosurePenalApplicable' => 'preClosurePenalApplicable',
'minDepositTerm' => 'minDepositTerm',
'maxDepositTerm' => 'maxDepositTerm',
'minDepositTermType' => 'minDepositTermType',
'maxDepositTermType' => 'maxDepositTermType',
'recurringDepositAmount' => 'recurringDepositAmount',
'recurringDepositFrequency' => 'recurringDepositFrequency',
'expectedFirstDepositOnDate' => 'expectedFirstDepositOnDate',
'recurringDepositFrequencyType' => 'recurringDepositFrequencyType',
'depositPeriod' => 'depositPeriod',
'depositPeriodFrequency' => 'depositPeriodFrequency',
'summary' => 'summary',
'accountChart' => 'accountChart'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'accountNo' => 'setAccountNo',
'externalId' => 'setExternalId',
'clientId' => 'setClientId',
'clientName' => 'setClientName',
'savingsProductId' => 'setSavingsProductId',
'savingsProductName' => 'setSavingsProductName',
'fieldOfficerId' => 'setFieldOfficerId',
'status' => 'setStatus',
'timeline' => 'setTimeline',
'currency' => 'setCurrency',
'interestCompoundingPeriodType' => 'setInterestCompoundingPeriodType',
'interestPostingPeriodType' => 'setInterestPostingPeriodType',
'interestCalculationType' => 'setInterestCalculationType',
'interestCalculationDaysInYearType' => 'setInterestCalculationDaysInYearType',
'preClosurePenalApplicable' => 'setPreClosurePenalApplicable',
'minDepositTerm' => 'setMinDepositTerm',
'maxDepositTerm' => 'setMaxDepositTerm',
'minDepositTermType' => 'setMinDepositTermType',
'maxDepositTermType' => 'setMaxDepositTermType',
'recurringDepositAmount' => 'setRecurringDepositAmount',
'recurringDepositFrequency' => 'setRecurringDepositFrequency',
'expectedFirstDepositOnDate' => 'setExpectedFirstDepositOnDate',
'recurringDepositFrequencyType' => 'setRecurringDepositFrequencyType',
'depositPeriod' => 'setDepositPeriod',
'depositPeriodFrequency' => 'setDepositPeriodFrequency',
'summary' => 'setSummary',
'accountChart' => 'setAccountChart'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'accountNo' => 'getAccountNo',
'externalId' => 'getExternalId',
'clientId' => 'getClientId',
'clientName' => 'getClientName',
'savingsProductId' => 'getSavingsProductId',
'savingsProductName' => 'getSavingsProductName',
'fieldOfficerId' => 'getFieldOfficerId',
'status' => 'getStatus',
'timeline' => 'getTimeline',
'currency' => 'getCurrency',
'interestCompoundingPeriodType' => 'getInterestCompoundingPeriodType',
'interestPostingPeriodType' => 'getInterestPostingPeriodType',
'interestCalculationType' => 'getInterestCalculationType',
'interestCalculationDaysInYearType' => 'getInterestCalculationDaysInYearType',
'preClosurePenalApplicable' => 'getPreClosurePenalApplicable',
'minDepositTerm' => 'getMinDepositTerm',
'maxDepositTerm' => 'getMaxDepositTerm',
'minDepositTermType' => 'getMinDepositTermType',
'maxDepositTermType' => 'getMaxDepositTermType',
'recurringDepositAmount' => 'getRecurringDepositAmount',
'recurringDepositFrequency' => 'getRecurringDepositFrequency',
'expectedFirstDepositOnDate' => 'getExpectedFirstDepositOnDate',
'recurringDepositFrequencyType' => 'getRecurringDepositFrequencyType',
'depositPeriod' => 'getDepositPeriod',
'depositPeriodFrequency' => 'getDepositPeriodFrequency',
'summary' => 'getSummary',
'accountChart' => 'getAccountChart'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['accountNo'] = isset($data['accountNo']) ? $data['accountNo'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['clientId'] = isset($data['clientId']) ? $data['clientId'] : null;
        $this->container['clientName'] = isset($data['clientName']) ? $data['clientName'] : null;
        $this->container['savingsProductId'] = isset($data['savingsProductId']) ? $data['savingsProductId'] : null;
        $this->container['savingsProductName'] = isset($data['savingsProductName']) ? $data['savingsProductName'] : null;
        $this->container['fieldOfficerId'] = isset($data['fieldOfficerId']) ? $data['fieldOfficerId'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['timeline'] = isset($data['timeline']) ? $data['timeline'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['interestCompoundingPeriodType'] = isset($data['interestCompoundingPeriodType']) ? $data['interestCompoundingPeriodType'] : null;
        $this->container['interestPostingPeriodType'] = isset($data['interestPostingPeriodType']) ? $data['interestPostingPeriodType'] : null;
        $this->container['interestCalculationType'] = isset($data['interestCalculationType']) ? $data['interestCalculationType'] : null;
        $this->container['interestCalculationDaysInYearType'] = isset($data['interestCalculationDaysInYearType']) ? $data['interestCalculationDaysInYearType'] : null;
        $this->container['preClosurePenalApplicable'] = isset($data['preClosurePenalApplicable']) ? $data['preClosurePenalApplicable'] : null;
        $this->container['minDepositTerm'] = isset($data['minDepositTerm']) ? $data['minDepositTerm'] : null;
        $this->container['maxDepositTerm'] = isset($data['maxDepositTerm']) ? $data['maxDepositTerm'] : null;
        $this->container['minDepositTermType'] = isset($data['minDepositTermType']) ? $data['minDepositTermType'] : null;
        $this->container['maxDepositTermType'] = isset($data['maxDepositTermType']) ? $data['maxDepositTermType'] : null;
        $this->container['recurringDepositAmount'] = isset($data['recurringDepositAmount']) ? $data['recurringDepositAmount'] : null;
        $this->container['recurringDepositFrequency'] = isset($data['recurringDepositFrequency']) ? $data['recurringDepositFrequency'] : null;
        $this->container['expectedFirstDepositOnDate'] = isset($data['expectedFirstDepositOnDate']) ? $data['expectedFirstDepositOnDate'] : null;
        $this->container['recurringDepositFrequencyType'] = isset($data['recurringDepositFrequencyType']) ? $data['recurringDepositFrequencyType'] : null;
        $this->container['depositPeriod'] = isset($data['depositPeriod']) ? $data['depositPeriod'] : null;
        $this->container['depositPeriodFrequency'] = isset($data['depositPeriodFrequency']) ? $data['depositPeriodFrequency'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['accountChart'] = isset($data['accountChart']) ? $data['accountChart'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accountNo
     *
     * @return int
     */
    public function getAccountNo()
    {
        return $this->container['accountNo'];
    }

    /**
     * Sets accountNo
     *
     * @param int $accountNo accountNo
     *
     * @return $this
     */
    public function setAccountNo($accountNo)
    {
        $this->container['accountNo'] = $accountNo;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId externalId
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param int $clientId clientId
     *
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets clientName
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['clientName'];
    }

    /**
     * Sets clientName
     *
     * @param string $clientName clientName
     *
     * @return $this
     */
    public function setClientName($clientName)
    {
        $this->container['clientName'] = $clientName;

        return $this;
    }

    /**
     * Gets savingsProductId
     *
     * @return int
     */
    public function getSavingsProductId()
    {
        return $this->container['savingsProductId'];
    }

    /**
     * Sets savingsProductId
     *
     * @param int $savingsProductId savingsProductId
     *
     * @return $this
     */
    public function setSavingsProductId($savingsProductId)
    {
        $this->container['savingsProductId'] = $savingsProductId;

        return $this;
    }

    /**
     * Gets savingsProductName
     *
     * @return string
     */
    public function getSavingsProductName()
    {
        return $this->container['savingsProductName'];
    }

    /**
     * Sets savingsProductName
     *
     * @param string $savingsProductName savingsProductName
     *
     * @return $this
     */
    public function setSavingsProductName($savingsProductName)
    {
        $this->container['savingsProductName'] = $savingsProductName;

        return $this;
    }

    /**
     * Gets fieldOfficerId
     *
     * @return int
     */
    public function getFieldOfficerId()
    {
        return $this->container['fieldOfficerId'];
    }

    /**
     * Sets fieldOfficerId
     *
     * @param int $fieldOfficerId fieldOfficerId
     *
     * @return $this
     */
    public function setFieldOfficerId($fieldOfficerId)
    {
        $this->container['fieldOfficerId'] = $fieldOfficerId;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets timeline
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsTimeline
     */
    public function getTimeline()
    {
        return $this->container['timeline'];
    }

    /**
     * Sets timeline
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsTimeline $timeline timeline
     *
     * @return $this
     */
    public function setTimeline($timeline)
    {
        $this->container['timeline'] = $timeline;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets interestCompoundingPeriodType
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsInterestCompoundingPeriodType
     */
    public function getInterestCompoundingPeriodType()
    {
        return $this->container['interestCompoundingPeriodType'];
    }

    /**
     * Sets interestCompoundingPeriodType
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsInterestCompoundingPeriodType $interestCompoundingPeriodType interestCompoundingPeriodType
     *
     * @return $this
     */
    public function setInterestCompoundingPeriodType($interestCompoundingPeriodType)
    {
        $this->container['interestCompoundingPeriodType'] = $interestCompoundingPeriodType;

        return $this;
    }

    /**
     * Gets interestPostingPeriodType
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsInterestPostingPeriodType
     */
    public function getInterestPostingPeriodType()
    {
        return $this->container['interestPostingPeriodType'];
    }

    /**
     * Sets interestPostingPeriodType
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsInterestPostingPeriodType $interestPostingPeriodType interestPostingPeriodType
     *
     * @return $this
     */
    public function setInterestPostingPeriodType($interestPostingPeriodType)
    {
        $this->container['interestPostingPeriodType'] = $interestPostingPeriodType;

        return $this;
    }

    /**
     * Gets interestCalculationType
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsInterestCalculationType
     */
    public function getInterestCalculationType()
    {
        return $this->container['interestCalculationType'];
    }

    /**
     * Sets interestCalculationType
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsInterestCalculationType $interestCalculationType interestCalculationType
     *
     * @return $this
     */
    public function setInterestCalculationType($interestCalculationType)
    {
        $this->container['interestCalculationType'] = $interestCalculationType;

        return $this;
    }

    /**
     * Gets interestCalculationDaysInYearType
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsInterestCalculationDaysInYearType
     */
    public function getInterestCalculationDaysInYearType()
    {
        return $this->container['interestCalculationDaysInYearType'];
    }

    /**
     * Sets interestCalculationDaysInYearType
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsInterestCalculationDaysInYearType $interestCalculationDaysInYearType interestCalculationDaysInYearType
     *
     * @return $this
     */
    public function setInterestCalculationDaysInYearType($interestCalculationDaysInYearType)
    {
        $this->container['interestCalculationDaysInYearType'] = $interestCalculationDaysInYearType;

        return $this;
    }

    /**
     * Gets preClosurePenalApplicable
     *
     * @return bool
     */
    public function getPreClosurePenalApplicable()
    {
        return $this->container['preClosurePenalApplicable'];
    }

    /**
     * Sets preClosurePenalApplicable
     *
     * @param bool $preClosurePenalApplicable preClosurePenalApplicable
     *
     * @return $this
     */
    public function setPreClosurePenalApplicable($preClosurePenalApplicable)
    {
        $this->container['preClosurePenalApplicable'] = $preClosurePenalApplicable;

        return $this;
    }

    /**
     * Gets minDepositTerm
     *
     * @return int
     */
    public function getMinDepositTerm()
    {
        return $this->container['minDepositTerm'];
    }

    /**
     * Sets minDepositTerm
     *
     * @param int $minDepositTerm minDepositTerm
     *
     * @return $this
     */
    public function setMinDepositTerm($minDepositTerm)
    {
        $this->container['minDepositTerm'] = $minDepositTerm;

        return $this;
    }

    /**
     * Gets maxDepositTerm
     *
     * @return int
     */
    public function getMaxDepositTerm()
    {
        return $this->container['maxDepositTerm'];
    }

    /**
     * Sets maxDepositTerm
     *
     * @param int $maxDepositTerm maxDepositTerm
     *
     * @return $this
     */
    public function setMaxDepositTerm($maxDepositTerm)
    {
        $this->container['maxDepositTerm'] = $maxDepositTerm;

        return $this;
    }

    /**
     * Gets minDepositTermType
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsMinDepositTermType
     */
    public function getMinDepositTermType()
    {
        return $this->container['minDepositTermType'];
    }

    /**
     * Sets minDepositTermType
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsMinDepositTermType $minDepositTermType minDepositTermType
     *
     * @return $this
     */
    public function setMinDepositTermType($minDepositTermType)
    {
        $this->container['minDepositTermType'] = $minDepositTermType;

        return $this;
    }

    /**
     * Gets maxDepositTermType
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsMaxDepositTermType
     */
    public function getMaxDepositTermType()
    {
        return $this->container['maxDepositTermType'];
    }

    /**
     * Sets maxDepositTermType
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsMaxDepositTermType $maxDepositTermType maxDepositTermType
     *
     * @return $this
     */
    public function setMaxDepositTermType($maxDepositTermType)
    {
        $this->container['maxDepositTermType'] = $maxDepositTermType;

        return $this;
    }

    /**
     * Gets recurringDepositAmount
     *
     * @return int
     */
    public function getRecurringDepositAmount()
    {
        return $this->container['recurringDepositAmount'];
    }

    /**
     * Sets recurringDepositAmount
     *
     * @param int $recurringDepositAmount recurringDepositAmount
     *
     * @return $this
     */
    public function setRecurringDepositAmount($recurringDepositAmount)
    {
        $this->container['recurringDepositAmount'] = $recurringDepositAmount;

        return $this;
    }

    /**
     * Gets recurringDepositFrequency
     *
     * @return int
     */
    public function getRecurringDepositFrequency()
    {
        return $this->container['recurringDepositFrequency'];
    }

    /**
     * Sets recurringDepositFrequency
     *
     * @param int $recurringDepositFrequency recurringDepositFrequency
     *
     * @return $this
     */
    public function setRecurringDepositFrequency($recurringDepositFrequency)
    {
        $this->container['recurringDepositFrequency'] = $recurringDepositFrequency;

        return $this;
    }

    /**
     * Gets expectedFirstDepositOnDate
     *
     * @return \DateTime
     */
    public function getExpectedFirstDepositOnDate()
    {
        return $this->container['expectedFirstDepositOnDate'];
    }

    /**
     * Sets expectedFirstDepositOnDate
     *
     * @param \DateTime $expectedFirstDepositOnDate expectedFirstDepositOnDate
     *
     * @return $this
     */
    public function setExpectedFirstDepositOnDate($expectedFirstDepositOnDate)
    {
        $this->container['expectedFirstDepositOnDate'] = $expectedFirstDepositOnDate;

        return $this;
    }

    /**
     * Gets recurringDepositFrequencyType
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsRecurringDepositFrequencyType
     */
    public function getRecurringDepositFrequencyType()
    {
        return $this->container['recurringDepositFrequencyType'];
    }

    /**
     * Sets recurringDepositFrequencyType
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsRecurringDepositFrequencyType $recurringDepositFrequencyType recurringDepositFrequencyType
     *
     * @return $this
     */
    public function setRecurringDepositFrequencyType($recurringDepositFrequencyType)
    {
        $this->container['recurringDepositFrequencyType'] = $recurringDepositFrequencyType;

        return $this;
    }

    /**
     * Gets depositPeriod
     *
     * @return int
     */
    public function getDepositPeriod()
    {
        return $this->container['depositPeriod'];
    }

    /**
     * Sets depositPeriod
     *
     * @param int $depositPeriod depositPeriod
     *
     * @return $this
     */
    public function setDepositPeriod($depositPeriod)
    {
        $this->container['depositPeriod'] = $depositPeriod;

        return $this;
    }

    /**
     * Gets depositPeriodFrequency
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsDepositPeriodFrequency
     */
    public function getDepositPeriodFrequency()
    {
        return $this->container['depositPeriodFrequency'];
    }

    /**
     * Sets depositPeriodFrequency
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsDepositPeriodFrequency $depositPeriodFrequency depositPeriodFrequency
     *
     * @return $this
     */
    public function setDepositPeriodFrequency($depositPeriodFrequency)
    {
        $this->container['depositPeriodFrequency'] = $depositPeriodFrequency;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsSummary
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsSummary $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets accountChart
     *
     * @return \Frengky\Fineract\Model\GetRecurringDepositAccountsAccountChart
     */
    public function getAccountChart()
    {
        return $this->container['accountChart'];
    }

    /**
     * Sets accountChart
     *
     * @param \Frengky\Fineract\Model\GetRecurringDepositAccountsAccountChart $accountChart accountChart
     *
     * @return $this
     */
    public function setAccountChart($accountChart)
    {
        $this->container['accountChart'] = $accountChart;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
