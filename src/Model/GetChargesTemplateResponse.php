<?php
/**
 * GetChargesTemplateResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetChargesTemplateResponse Class Doc Comment
 *
 * @category Class
 * @description GetChargesTemplateResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetChargesTemplateResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetChargesTemplateResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'string',
'penalty' => 'string',
'currencyOptions' => '\Frengky\Fineract\Model\GetChargesCurrencyResponse[]',
'chargeCalculationTypeOptions' => '\Frengky\Fineract\Model\GetChargesCalculationTypeResponse[]',
'chargeAppliesToOptions' => '\Frengky\Fineract\Model\GetChargesAppliesToResponse[]',
'chargeTimeTypeOptions' => '\Frengky\Fineract\Model\GetChargesTimeTypeResponse[]',
'chargePaymentModeOptions' => '\Frengky\Fineract\Model\GetChargesPaymentModeResponse[]',
'loanChargeCalculationTypeOptions' => '\Frengky\Fineract\Model\GetChargesTemplateLoanChargeCalculationTypeOptions[]',
'loanChargeTimeTypeOptions' => '\Frengky\Fineract\Model\GetChargesTemplateLoanChargeTimeTypeOptions[]',
'savingsChargeCalculationTypeOptions' => '\Frengky\Fineract\Model\GetChargesTemplateLoanChargeCalculationTypeOptions[]',
'savingsChargeTimeTypeOptions' => '\Frengky\Fineract\Model\GetChargesTemplateLoanChargeTimeTypeOptions[]',
'feeFrequencyOptions' => '\Frengky\Fineract\Model\GetChargesTemplateFeeFrequencyOptions[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
'penalty' => null,
'currencyOptions' => null,
'chargeCalculationTypeOptions' => null,
'chargeAppliesToOptions' => null,
'chargeTimeTypeOptions' => null,
'chargePaymentModeOptions' => null,
'loanChargeCalculationTypeOptions' => null,
'loanChargeTimeTypeOptions' => null,
'savingsChargeCalculationTypeOptions' => null,
'savingsChargeTimeTypeOptions' => null,
'feeFrequencyOptions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
'penalty' => 'penalty',
'currencyOptions' => 'currencyOptions',
'chargeCalculationTypeOptions' => 'chargeCalculationTypeOptions',
'chargeAppliesToOptions' => 'chargeAppliesToOptions',
'chargeTimeTypeOptions' => 'chargeTimeTypeOptions',
'chargePaymentModeOptions' => 'chargePaymentModeOptions',
'loanChargeCalculationTypeOptions' => 'loanChargeCalculationTypeOptions',
'loanChargeTimeTypeOptions' => 'loanChargeTimeTypeOptions',
'savingsChargeCalculationTypeOptions' => 'savingsChargeCalculationTypeOptions',
'savingsChargeTimeTypeOptions' => 'savingsChargeTimeTypeOptions',
'feeFrequencyOptions' => 'feeFrequencyOptions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
'penalty' => 'setPenalty',
'currencyOptions' => 'setCurrencyOptions',
'chargeCalculationTypeOptions' => 'setChargeCalculationTypeOptions',
'chargeAppliesToOptions' => 'setChargeAppliesToOptions',
'chargeTimeTypeOptions' => 'setChargeTimeTypeOptions',
'chargePaymentModeOptions' => 'setChargePaymentModeOptions',
'loanChargeCalculationTypeOptions' => 'setLoanChargeCalculationTypeOptions',
'loanChargeTimeTypeOptions' => 'setLoanChargeTimeTypeOptions',
'savingsChargeCalculationTypeOptions' => 'setSavingsChargeCalculationTypeOptions',
'savingsChargeTimeTypeOptions' => 'setSavingsChargeTimeTypeOptions',
'feeFrequencyOptions' => 'setFeeFrequencyOptions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
'penalty' => 'getPenalty',
'currencyOptions' => 'getCurrencyOptions',
'chargeCalculationTypeOptions' => 'getChargeCalculationTypeOptions',
'chargeAppliesToOptions' => 'getChargeAppliesToOptions',
'chargeTimeTypeOptions' => 'getChargeTimeTypeOptions',
'chargePaymentModeOptions' => 'getChargePaymentModeOptions',
'loanChargeCalculationTypeOptions' => 'getLoanChargeCalculationTypeOptions',
'loanChargeTimeTypeOptions' => 'getLoanChargeTimeTypeOptions',
'savingsChargeCalculationTypeOptions' => 'getSavingsChargeCalculationTypeOptions',
'savingsChargeTimeTypeOptions' => 'getSavingsChargeTimeTypeOptions',
'feeFrequencyOptions' => 'getFeeFrequencyOptions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['penalty'] = isset($data['penalty']) ? $data['penalty'] : null;
        $this->container['currencyOptions'] = isset($data['currencyOptions']) ? $data['currencyOptions'] : null;
        $this->container['chargeCalculationTypeOptions'] = isset($data['chargeCalculationTypeOptions']) ? $data['chargeCalculationTypeOptions'] : null;
        $this->container['chargeAppliesToOptions'] = isset($data['chargeAppliesToOptions']) ? $data['chargeAppliesToOptions'] : null;
        $this->container['chargeTimeTypeOptions'] = isset($data['chargeTimeTypeOptions']) ? $data['chargeTimeTypeOptions'] : null;
        $this->container['chargePaymentModeOptions'] = isset($data['chargePaymentModeOptions']) ? $data['chargePaymentModeOptions'] : null;
        $this->container['loanChargeCalculationTypeOptions'] = isset($data['loanChargeCalculationTypeOptions']) ? $data['loanChargeCalculationTypeOptions'] : null;
        $this->container['loanChargeTimeTypeOptions'] = isset($data['loanChargeTimeTypeOptions']) ? $data['loanChargeTimeTypeOptions'] : null;
        $this->container['savingsChargeCalculationTypeOptions'] = isset($data['savingsChargeCalculationTypeOptions']) ? $data['savingsChargeCalculationTypeOptions'] : null;
        $this->container['savingsChargeTimeTypeOptions'] = isset($data['savingsChargeTimeTypeOptions']) ? $data['savingsChargeTimeTypeOptions'] : null;
        $this->container['feeFrequencyOptions'] = isset($data['feeFrequencyOptions']) ? $data['feeFrequencyOptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return string
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets penalty
     *
     * @return string
     */
    public function getPenalty()
    {
        return $this->container['penalty'];
    }

    /**
     * Sets penalty
     *
     * @param string $penalty penalty
     *
     * @return $this
     */
    public function setPenalty($penalty)
    {
        $this->container['penalty'] = $penalty;

        return $this;
    }

    /**
     * Gets currencyOptions
     *
     * @return \Frengky\Fineract\Model\GetChargesCurrencyResponse[]
     */
    public function getCurrencyOptions()
    {
        return $this->container['currencyOptions'];
    }

    /**
     * Sets currencyOptions
     *
     * @param \Frengky\Fineract\Model\GetChargesCurrencyResponse[] $currencyOptions currencyOptions
     *
     * @return $this
     */
    public function setCurrencyOptions($currencyOptions)
    {
        $this->container['currencyOptions'] = $currencyOptions;

        return $this;
    }

    /**
     * Gets chargeCalculationTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetChargesCalculationTypeResponse[]
     */
    public function getChargeCalculationTypeOptions()
    {
        return $this->container['chargeCalculationTypeOptions'];
    }

    /**
     * Sets chargeCalculationTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetChargesCalculationTypeResponse[] $chargeCalculationTypeOptions chargeCalculationTypeOptions
     *
     * @return $this
     */
    public function setChargeCalculationTypeOptions($chargeCalculationTypeOptions)
    {
        $this->container['chargeCalculationTypeOptions'] = $chargeCalculationTypeOptions;

        return $this;
    }

    /**
     * Gets chargeAppliesToOptions
     *
     * @return \Frengky\Fineract\Model\GetChargesAppliesToResponse[]
     */
    public function getChargeAppliesToOptions()
    {
        return $this->container['chargeAppliesToOptions'];
    }

    /**
     * Sets chargeAppliesToOptions
     *
     * @param \Frengky\Fineract\Model\GetChargesAppliesToResponse[] $chargeAppliesToOptions chargeAppliesToOptions
     *
     * @return $this
     */
    public function setChargeAppliesToOptions($chargeAppliesToOptions)
    {
        $this->container['chargeAppliesToOptions'] = $chargeAppliesToOptions;

        return $this;
    }

    /**
     * Gets chargeTimeTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetChargesTimeTypeResponse[]
     */
    public function getChargeTimeTypeOptions()
    {
        return $this->container['chargeTimeTypeOptions'];
    }

    /**
     * Sets chargeTimeTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetChargesTimeTypeResponse[] $chargeTimeTypeOptions chargeTimeTypeOptions
     *
     * @return $this
     */
    public function setChargeTimeTypeOptions($chargeTimeTypeOptions)
    {
        $this->container['chargeTimeTypeOptions'] = $chargeTimeTypeOptions;

        return $this;
    }

    /**
     * Gets chargePaymentModeOptions
     *
     * @return \Frengky\Fineract\Model\GetChargesPaymentModeResponse[]
     */
    public function getChargePaymentModeOptions()
    {
        return $this->container['chargePaymentModeOptions'];
    }

    /**
     * Sets chargePaymentModeOptions
     *
     * @param \Frengky\Fineract\Model\GetChargesPaymentModeResponse[] $chargePaymentModeOptions chargePaymentModeOptions
     *
     * @return $this
     */
    public function setChargePaymentModeOptions($chargePaymentModeOptions)
    {
        $this->container['chargePaymentModeOptions'] = $chargePaymentModeOptions;

        return $this;
    }

    /**
     * Gets loanChargeCalculationTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetChargesTemplateLoanChargeCalculationTypeOptions[]
     */
    public function getLoanChargeCalculationTypeOptions()
    {
        return $this->container['loanChargeCalculationTypeOptions'];
    }

    /**
     * Sets loanChargeCalculationTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetChargesTemplateLoanChargeCalculationTypeOptions[] $loanChargeCalculationTypeOptions loanChargeCalculationTypeOptions
     *
     * @return $this
     */
    public function setLoanChargeCalculationTypeOptions($loanChargeCalculationTypeOptions)
    {
        $this->container['loanChargeCalculationTypeOptions'] = $loanChargeCalculationTypeOptions;

        return $this;
    }

    /**
     * Gets loanChargeTimeTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetChargesTemplateLoanChargeTimeTypeOptions[]
     */
    public function getLoanChargeTimeTypeOptions()
    {
        return $this->container['loanChargeTimeTypeOptions'];
    }

    /**
     * Sets loanChargeTimeTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetChargesTemplateLoanChargeTimeTypeOptions[] $loanChargeTimeTypeOptions loanChargeTimeTypeOptions
     *
     * @return $this
     */
    public function setLoanChargeTimeTypeOptions($loanChargeTimeTypeOptions)
    {
        $this->container['loanChargeTimeTypeOptions'] = $loanChargeTimeTypeOptions;

        return $this;
    }

    /**
     * Gets savingsChargeCalculationTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetChargesTemplateLoanChargeCalculationTypeOptions[]
     */
    public function getSavingsChargeCalculationTypeOptions()
    {
        return $this->container['savingsChargeCalculationTypeOptions'];
    }

    /**
     * Sets savingsChargeCalculationTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetChargesTemplateLoanChargeCalculationTypeOptions[] $savingsChargeCalculationTypeOptions savingsChargeCalculationTypeOptions
     *
     * @return $this
     */
    public function setSavingsChargeCalculationTypeOptions($savingsChargeCalculationTypeOptions)
    {
        $this->container['savingsChargeCalculationTypeOptions'] = $savingsChargeCalculationTypeOptions;

        return $this;
    }

    /**
     * Gets savingsChargeTimeTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetChargesTemplateLoanChargeTimeTypeOptions[]
     */
    public function getSavingsChargeTimeTypeOptions()
    {
        return $this->container['savingsChargeTimeTypeOptions'];
    }

    /**
     * Sets savingsChargeTimeTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetChargesTemplateLoanChargeTimeTypeOptions[] $savingsChargeTimeTypeOptions savingsChargeTimeTypeOptions
     *
     * @return $this
     */
    public function setSavingsChargeTimeTypeOptions($savingsChargeTimeTypeOptions)
    {
        $this->container['savingsChargeTimeTypeOptions'] = $savingsChargeTimeTypeOptions;

        return $this;
    }

    /**
     * Gets feeFrequencyOptions
     *
     * @return \Frengky\Fineract\Model\GetChargesTemplateFeeFrequencyOptions[]
     */
    public function getFeeFrequencyOptions()
    {
        return $this->container['feeFrequencyOptions'];
    }

    /**
     * Sets feeFrequencyOptions
     *
     * @param \Frengky\Fineract\Model\GetChargesTemplateFeeFrequencyOptions[] $feeFrequencyOptions feeFrequencyOptions
     *
     * @return $this
     */
    public function setFeeFrequencyOptions($feeFrequencyOptions)
    {
        $this->container['feeFrequencyOptions'] = $feeFrequencyOptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
