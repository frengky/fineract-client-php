<?php
/**
 * GetLoansLoanIdSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetLoansLoanIdSummary Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetLoansLoanIdSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetLoansLoanIdSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency' => '\Frengky\Fineract\Model\GetLoansLoanIdCurrency',
'principalDisbursed' => 'int',
'principalPaid' => 'int',
'principalWrittenOff' => 'int',
'principalOutstanding' => 'int',
'principalOverdue' => 'double',
'interestCharged' => 'int',
'interestPaid' => 'int',
'interestWaived' => 'int',
'interestWrittenOff' => 'int',
'interestOutstanding' => 'int',
'interestOverdue' => 'int',
'feeChargesCharged' => 'int',
'feeChargesDueAtDisbursementCharged' => 'int',
'feeChargesPaid' => 'int',
'feeChargesWaived' => 'int',
'feeChargesWrittenOff' => 'int',
'feeChargesOutstanding' => 'int',
'feeChargesOverdue' => 'int',
'penaltyChargesCharged' => 'int',
'penaltyChargesPaid' => 'int',
'penaltyChargesWaived' => 'int',
'penaltyChargesWrittenOff' => 'int',
'penaltyChargesOutstanding' => 'int',
'penaltyChargesOverdue' => 'int',
'totalExpectedRepayment' => 'int',
'totalRepayment' => 'int',
'totalExpectedCostOfLoan' => 'int',
'totalCostOfLoan' => 'int',
'totalWaived' => 'int',
'totalWrittenOff' => 'int',
'totalOutstanding' => 'int',
'totalOverdue' => 'double',
'overdueSinceDate' => '\DateTime',
'linkedAccount' => '\Frengky\Fineract\Model\GetLoansLoanIdLinkedAccount',
'disbursementDetails' => '\Frengky\Fineract\Model\GetLoansLoanIdDisbursementDetails[]',
'fixedEmiAmount' => 'float',
'maxOutstandingLoanBalance' => 'int',
'canDisburse' => 'bool',
'emiAmountVariations' => '\Frengky\Fineract\Model\GetLoansLoanIdEmiVariations[]',
'inArrears' => 'bool',
'isNPA' => 'bool',
'overdueCharges' => '\Frengky\Fineract\Model\GetLoansLoanIdOverdueCharges[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency' => null,
'principalDisbursed' => 'int64',
'principalPaid' => 'int64',
'principalWrittenOff' => 'int64',
'principalOutstanding' => 'int64',
'principalOverdue' => 'double',
'interestCharged' => 'int64',
'interestPaid' => 'int64',
'interestWaived' => 'int64',
'interestWrittenOff' => 'int64',
'interestOutstanding' => 'int64',
'interestOverdue' => 'int64',
'feeChargesCharged' => 'int64',
'feeChargesDueAtDisbursementCharged' => 'int64',
'feeChargesPaid' => 'int64',
'feeChargesWaived' => 'int64',
'feeChargesWrittenOff' => 'int64',
'feeChargesOutstanding' => 'int64',
'feeChargesOverdue' => 'int64',
'penaltyChargesCharged' => 'int64',
'penaltyChargesPaid' => 'int64',
'penaltyChargesWaived' => 'int64',
'penaltyChargesWrittenOff' => 'int64',
'penaltyChargesOutstanding' => 'int64',
'penaltyChargesOverdue' => 'int64',
'totalExpectedRepayment' => 'int64',
'totalRepayment' => 'int64',
'totalExpectedCostOfLoan' => 'int64',
'totalCostOfLoan' => 'int64',
'totalWaived' => 'int64',
'totalWrittenOff' => 'int64',
'totalOutstanding' => 'int64',
'totalOverdue' => 'double',
'overdueSinceDate' => 'date',
'linkedAccount' => null,
'disbursementDetails' => null,
'fixedEmiAmount' => 'float',
'maxOutstandingLoanBalance' => 'int64',
'canDisburse' => null,
'emiAmountVariations' => null,
'inArrears' => null,
'isNPA' => null,
'overdueCharges' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
'principalDisbursed' => 'principalDisbursed',
'principalPaid' => 'principalPaid',
'principalWrittenOff' => 'principalWrittenOff',
'principalOutstanding' => 'principalOutstanding',
'principalOverdue' => 'principalOverdue',
'interestCharged' => 'interestCharged',
'interestPaid' => 'interestPaid',
'interestWaived' => 'interestWaived',
'interestWrittenOff' => 'interestWrittenOff',
'interestOutstanding' => 'interestOutstanding',
'interestOverdue' => 'interestOverdue',
'feeChargesCharged' => 'feeChargesCharged',
'feeChargesDueAtDisbursementCharged' => 'feeChargesDueAtDisbursementCharged',
'feeChargesPaid' => 'feeChargesPaid',
'feeChargesWaived' => 'feeChargesWaived',
'feeChargesWrittenOff' => 'feeChargesWrittenOff',
'feeChargesOutstanding' => 'feeChargesOutstanding',
'feeChargesOverdue' => 'feeChargesOverdue',
'penaltyChargesCharged' => 'penaltyChargesCharged',
'penaltyChargesPaid' => 'penaltyChargesPaid',
'penaltyChargesWaived' => 'penaltyChargesWaived',
'penaltyChargesWrittenOff' => 'penaltyChargesWrittenOff',
'penaltyChargesOutstanding' => 'penaltyChargesOutstanding',
'penaltyChargesOverdue' => 'penaltyChargesOverdue',
'totalExpectedRepayment' => 'totalExpectedRepayment',
'totalRepayment' => 'totalRepayment',
'totalExpectedCostOfLoan' => 'totalExpectedCostOfLoan',
'totalCostOfLoan' => 'totalCostOfLoan',
'totalWaived' => 'totalWaived',
'totalWrittenOff' => 'totalWrittenOff',
'totalOutstanding' => 'totalOutstanding',
'totalOverdue' => 'totalOverdue',
'overdueSinceDate' => 'overdueSinceDate',
'linkedAccount' => 'linkedAccount',
'disbursementDetails' => 'disbursementDetails',
'fixedEmiAmount' => 'fixedEmiAmount',
'maxOutstandingLoanBalance' => 'maxOutstandingLoanBalance',
'canDisburse' => 'canDisburse',
'emiAmountVariations' => 'emiAmountVariations',
'inArrears' => 'inArrears',
'isNPA' => 'isNPA',
'overdueCharges' => 'overdueCharges'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
'principalDisbursed' => 'setPrincipalDisbursed',
'principalPaid' => 'setPrincipalPaid',
'principalWrittenOff' => 'setPrincipalWrittenOff',
'principalOutstanding' => 'setPrincipalOutstanding',
'principalOverdue' => 'setPrincipalOverdue',
'interestCharged' => 'setInterestCharged',
'interestPaid' => 'setInterestPaid',
'interestWaived' => 'setInterestWaived',
'interestWrittenOff' => 'setInterestWrittenOff',
'interestOutstanding' => 'setInterestOutstanding',
'interestOverdue' => 'setInterestOverdue',
'feeChargesCharged' => 'setFeeChargesCharged',
'feeChargesDueAtDisbursementCharged' => 'setFeeChargesDueAtDisbursementCharged',
'feeChargesPaid' => 'setFeeChargesPaid',
'feeChargesWaived' => 'setFeeChargesWaived',
'feeChargesWrittenOff' => 'setFeeChargesWrittenOff',
'feeChargesOutstanding' => 'setFeeChargesOutstanding',
'feeChargesOverdue' => 'setFeeChargesOverdue',
'penaltyChargesCharged' => 'setPenaltyChargesCharged',
'penaltyChargesPaid' => 'setPenaltyChargesPaid',
'penaltyChargesWaived' => 'setPenaltyChargesWaived',
'penaltyChargesWrittenOff' => 'setPenaltyChargesWrittenOff',
'penaltyChargesOutstanding' => 'setPenaltyChargesOutstanding',
'penaltyChargesOverdue' => 'setPenaltyChargesOverdue',
'totalExpectedRepayment' => 'setTotalExpectedRepayment',
'totalRepayment' => 'setTotalRepayment',
'totalExpectedCostOfLoan' => 'setTotalExpectedCostOfLoan',
'totalCostOfLoan' => 'setTotalCostOfLoan',
'totalWaived' => 'setTotalWaived',
'totalWrittenOff' => 'setTotalWrittenOff',
'totalOutstanding' => 'setTotalOutstanding',
'totalOverdue' => 'setTotalOverdue',
'overdueSinceDate' => 'setOverdueSinceDate',
'linkedAccount' => 'setLinkedAccount',
'disbursementDetails' => 'setDisbursementDetails',
'fixedEmiAmount' => 'setFixedEmiAmount',
'maxOutstandingLoanBalance' => 'setMaxOutstandingLoanBalance',
'canDisburse' => 'setCanDisburse',
'emiAmountVariations' => 'setEmiAmountVariations',
'inArrears' => 'setInArrears',
'isNPA' => 'setIsNPA',
'overdueCharges' => 'setOverdueCharges'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
'principalDisbursed' => 'getPrincipalDisbursed',
'principalPaid' => 'getPrincipalPaid',
'principalWrittenOff' => 'getPrincipalWrittenOff',
'principalOutstanding' => 'getPrincipalOutstanding',
'principalOverdue' => 'getPrincipalOverdue',
'interestCharged' => 'getInterestCharged',
'interestPaid' => 'getInterestPaid',
'interestWaived' => 'getInterestWaived',
'interestWrittenOff' => 'getInterestWrittenOff',
'interestOutstanding' => 'getInterestOutstanding',
'interestOverdue' => 'getInterestOverdue',
'feeChargesCharged' => 'getFeeChargesCharged',
'feeChargesDueAtDisbursementCharged' => 'getFeeChargesDueAtDisbursementCharged',
'feeChargesPaid' => 'getFeeChargesPaid',
'feeChargesWaived' => 'getFeeChargesWaived',
'feeChargesWrittenOff' => 'getFeeChargesWrittenOff',
'feeChargesOutstanding' => 'getFeeChargesOutstanding',
'feeChargesOverdue' => 'getFeeChargesOverdue',
'penaltyChargesCharged' => 'getPenaltyChargesCharged',
'penaltyChargesPaid' => 'getPenaltyChargesPaid',
'penaltyChargesWaived' => 'getPenaltyChargesWaived',
'penaltyChargesWrittenOff' => 'getPenaltyChargesWrittenOff',
'penaltyChargesOutstanding' => 'getPenaltyChargesOutstanding',
'penaltyChargesOverdue' => 'getPenaltyChargesOverdue',
'totalExpectedRepayment' => 'getTotalExpectedRepayment',
'totalRepayment' => 'getTotalRepayment',
'totalExpectedCostOfLoan' => 'getTotalExpectedCostOfLoan',
'totalCostOfLoan' => 'getTotalCostOfLoan',
'totalWaived' => 'getTotalWaived',
'totalWrittenOff' => 'getTotalWrittenOff',
'totalOutstanding' => 'getTotalOutstanding',
'totalOverdue' => 'getTotalOverdue',
'overdueSinceDate' => 'getOverdueSinceDate',
'linkedAccount' => 'getLinkedAccount',
'disbursementDetails' => 'getDisbursementDetails',
'fixedEmiAmount' => 'getFixedEmiAmount',
'maxOutstandingLoanBalance' => 'getMaxOutstandingLoanBalance',
'canDisburse' => 'getCanDisburse',
'emiAmountVariations' => 'getEmiAmountVariations',
'inArrears' => 'getInArrears',
'isNPA' => 'getIsNPA',
'overdueCharges' => 'getOverdueCharges'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['principalDisbursed'] = isset($data['principalDisbursed']) ? $data['principalDisbursed'] : null;
        $this->container['principalPaid'] = isset($data['principalPaid']) ? $data['principalPaid'] : null;
        $this->container['principalWrittenOff'] = isset($data['principalWrittenOff']) ? $data['principalWrittenOff'] : null;
        $this->container['principalOutstanding'] = isset($data['principalOutstanding']) ? $data['principalOutstanding'] : null;
        $this->container['principalOverdue'] = isset($data['principalOverdue']) ? $data['principalOverdue'] : null;
        $this->container['interestCharged'] = isset($data['interestCharged']) ? $data['interestCharged'] : null;
        $this->container['interestPaid'] = isset($data['interestPaid']) ? $data['interestPaid'] : null;
        $this->container['interestWaived'] = isset($data['interestWaived']) ? $data['interestWaived'] : null;
        $this->container['interestWrittenOff'] = isset($data['interestWrittenOff']) ? $data['interestWrittenOff'] : null;
        $this->container['interestOutstanding'] = isset($data['interestOutstanding']) ? $data['interestOutstanding'] : null;
        $this->container['interestOverdue'] = isset($data['interestOverdue']) ? $data['interestOverdue'] : null;
        $this->container['feeChargesCharged'] = isset($data['feeChargesCharged']) ? $data['feeChargesCharged'] : null;
        $this->container['feeChargesDueAtDisbursementCharged'] = isset($data['feeChargesDueAtDisbursementCharged']) ? $data['feeChargesDueAtDisbursementCharged'] : null;
        $this->container['feeChargesPaid'] = isset($data['feeChargesPaid']) ? $data['feeChargesPaid'] : null;
        $this->container['feeChargesWaived'] = isset($data['feeChargesWaived']) ? $data['feeChargesWaived'] : null;
        $this->container['feeChargesWrittenOff'] = isset($data['feeChargesWrittenOff']) ? $data['feeChargesWrittenOff'] : null;
        $this->container['feeChargesOutstanding'] = isset($data['feeChargesOutstanding']) ? $data['feeChargesOutstanding'] : null;
        $this->container['feeChargesOverdue'] = isset($data['feeChargesOverdue']) ? $data['feeChargesOverdue'] : null;
        $this->container['penaltyChargesCharged'] = isset($data['penaltyChargesCharged']) ? $data['penaltyChargesCharged'] : null;
        $this->container['penaltyChargesPaid'] = isset($data['penaltyChargesPaid']) ? $data['penaltyChargesPaid'] : null;
        $this->container['penaltyChargesWaived'] = isset($data['penaltyChargesWaived']) ? $data['penaltyChargesWaived'] : null;
        $this->container['penaltyChargesWrittenOff'] = isset($data['penaltyChargesWrittenOff']) ? $data['penaltyChargesWrittenOff'] : null;
        $this->container['penaltyChargesOutstanding'] = isset($data['penaltyChargesOutstanding']) ? $data['penaltyChargesOutstanding'] : null;
        $this->container['penaltyChargesOverdue'] = isset($data['penaltyChargesOverdue']) ? $data['penaltyChargesOverdue'] : null;
        $this->container['totalExpectedRepayment'] = isset($data['totalExpectedRepayment']) ? $data['totalExpectedRepayment'] : null;
        $this->container['totalRepayment'] = isset($data['totalRepayment']) ? $data['totalRepayment'] : null;
        $this->container['totalExpectedCostOfLoan'] = isset($data['totalExpectedCostOfLoan']) ? $data['totalExpectedCostOfLoan'] : null;
        $this->container['totalCostOfLoan'] = isset($data['totalCostOfLoan']) ? $data['totalCostOfLoan'] : null;
        $this->container['totalWaived'] = isset($data['totalWaived']) ? $data['totalWaived'] : null;
        $this->container['totalWrittenOff'] = isset($data['totalWrittenOff']) ? $data['totalWrittenOff'] : null;
        $this->container['totalOutstanding'] = isset($data['totalOutstanding']) ? $data['totalOutstanding'] : null;
        $this->container['totalOverdue'] = isset($data['totalOverdue']) ? $data['totalOverdue'] : null;
        $this->container['overdueSinceDate'] = isset($data['overdueSinceDate']) ? $data['overdueSinceDate'] : null;
        $this->container['linkedAccount'] = isset($data['linkedAccount']) ? $data['linkedAccount'] : null;
        $this->container['disbursementDetails'] = isset($data['disbursementDetails']) ? $data['disbursementDetails'] : null;
        $this->container['fixedEmiAmount'] = isset($data['fixedEmiAmount']) ? $data['fixedEmiAmount'] : null;
        $this->container['maxOutstandingLoanBalance'] = isset($data['maxOutstandingLoanBalance']) ? $data['maxOutstandingLoanBalance'] : null;
        $this->container['canDisburse'] = isset($data['canDisburse']) ? $data['canDisburse'] : null;
        $this->container['emiAmountVariations'] = isset($data['emiAmountVariations']) ? $data['emiAmountVariations'] : null;
        $this->container['inArrears'] = isset($data['inArrears']) ? $data['inArrears'] : null;
        $this->container['isNPA'] = isset($data['isNPA']) ? $data['isNPA'] : null;
        $this->container['overdueCharges'] = isset($data['overdueCharges']) ? $data['overdueCharges'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return \Frengky\Fineract\Model\GetLoansLoanIdCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Frengky\Fineract\Model\GetLoansLoanIdCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets principalDisbursed
     *
     * @return int
     */
    public function getPrincipalDisbursed()
    {
        return $this->container['principalDisbursed'];
    }

    /**
     * Sets principalDisbursed
     *
     * @param int $principalDisbursed principalDisbursed
     *
     * @return $this
     */
    public function setPrincipalDisbursed($principalDisbursed)
    {
        $this->container['principalDisbursed'] = $principalDisbursed;

        return $this;
    }

    /**
     * Gets principalPaid
     *
     * @return int
     */
    public function getPrincipalPaid()
    {
        return $this->container['principalPaid'];
    }

    /**
     * Sets principalPaid
     *
     * @param int $principalPaid principalPaid
     *
     * @return $this
     */
    public function setPrincipalPaid($principalPaid)
    {
        $this->container['principalPaid'] = $principalPaid;

        return $this;
    }

    /**
     * Gets principalWrittenOff
     *
     * @return int
     */
    public function getPrincipalWrittenOff()
    {
        return $this->container['principalWrittenOff'];
    }

    /**
     * Sets principalWrittenOff
     *
     * @param int $principalWrittenOff principalWrittenOff
     *
     * @return $this
     */
    public function setPrincipalWrittenOff($principalWrittenOff)
    {
        $this->container['principalWrittenOff'] = $principalWrittenOff;

        return $this;
    }

    /**
     * Gets principalOutstanding
     *
     * @return int
     */
    public function getPrincipalOutstanding()
    {
        return $this->container['principalOutstanding'];
    }

    /**
     * Sets principalOutstanding
     *
     * @param int $principalOutstanding principalOutstanding
     *
     * @return $this
     */
    public function setPrincipalOutstanding($principalOutstanding)
    {
        $this->container['principalOutstanding'] = $principalOutstanding;

        return $this;
    }

    /**
     * Gets principalOverdue
     *
     * @return double
     */
    public function getPrincipalOverdue()
    {
        return $this->container['principalOverdue'];
    }

    /**
     * Sets principalOverdue
     *
     * @param double $principalOverdue principalOverdue
     *
     * @return $this
     */
    public function setPrincipalOverdue($principalOverdue)
    {
        $this->container['principalOverdue'] = $principalOverdue;

        return $this;
    }

    /**
     * Gets interestCharged
     *
     * @return int
     */
    public function getInterestCharged()
    {
        return $this->container['interestCharged'];
    }

    /**
     * Sets interestCharged
     *
     * @param int $interestCharged interestCharged
     *
     * @return $this
     */
    public function setInterestCharged($interestCharged)
    {
        $this->container['interestCharged'] = $interestCharged;

        return $this;
    }

    /**
     * Gets interestPaid
     *
     * @return int
     */
    public function getInterestPaid()
    {
        return $this->container['interestPaid'];
    }

    /**
     * Sets interestPaid
     *
     * @param int $interestPaid interestPaid
     *
     * @return $this
     */
    public function setInterestPaid($interestPaid)
    {
        $this->container['interestPaid'] = $interestPaid;

        return $this;
    }

    /**
     * Gets interestWaived
     *
     * @return int
     */
    public function getInterestWaived()
    {
        return $this->container['interestWaived'];
    }

    /**
     * Sets interestWaived
     *
     * @param int $interestWaived interestWaived
     *
     * @return $this
     */
    public function setInterestWaived($interestWaived)
    {
        $this->container['interestWaived'] = $interestWaived;

        return $this;
    }

    /**
     * Gets interestWrittenOff
     *
     * @return int
     */
    public function getInterestWrittenOff()
    {
        return $this->container['interestWrittenOff'];
    }

    /**
     * Sets interestWrittenOff
     *
     * @param int $interestWrittenOff interestWrittenOff
     *
     * @return $this
     */
    public function setInterestWrittenOff($interestWrittenOff)
    {
        $this->container['interestWrittenOff'] = $interestWrittenOff;

        return $this;
    }

    /**
     * Gets interestOutstanding
     *
     * @return int
     */
    public function getInterestOutstanding()
    {
        return $this->container['interestOutstanding'];
    }

    /**
     * Sets interestOutstanding
     *
     * @param int $interestOutstanding interestOutstanding
     *
     * @return $this
     */
    public function setInterestOutstanding($interestOutstanding)
    {
        $this->container['interestOutstanding'] = $interestOutstanding;

        return $this;
    }

    /**
     * Gets interestOverdue
     *
     * @return int
     */
    public function getInterestOverdue()
    {
        return $this->container['interestOverdue'];
    }

    /**
     * Sets interestOverdue
     *
     * @param int $interestOverdue interestOverdue
     *
     * @return $this
     */
    public function setInterestOverdue($interestOverdue)
    {
        $this->container['interestOverdue'] = $interestOverdue;

        return $this;
    }

    /**
     * Gets feeChargesCharged
     *
     * @return int
     */
    public function getFeeChargesCharged()
    {
        return $this->container['feeChargesCharged'];
    }

    /**
     * Sets feeChargesCharged
     *
     * @param int $feeChargesCharged feeChargesCharged
     *
     * @return $this
     */
    public function setFeeChargesCharged($feeChargesCharged)
    {
        $this->container['feeChargesCharged'] = $feeChargesCharged;

        return $this;
    }

    /**
     * Gets feeChargesDueAtDisbursementCharged
     *
     * @return int
     */
    public function getFeeChargesDueAtDisbursementCharged()
    {
        return $this->container['feeChargesDueAtDisbursementCharged'];
    }

    /**
     * Sets feeChargesDueAtDisbursementCharged
     *
     * @param int $feeChargesDueAtDisbursementCharged feeChargesDueAtDisbursementCharged
     *
     * @return $this
     */
    public function setFeeChargesDueAtDisbursementCharged($feeChargesDueAtDisbursementCharged)
    {
        $this->container['feeChargesDueAtDisbursementCharged'] = $feeChargesDueAtDisbursementCharged;

        return $this;
    }

    /**
     * Gets feeChargesPaid
     *
     * @return int
     */
    public function getFeeChargesPaid()
    {
        return $this->container['feeChargesPaid'];
    }

    /**
     * Sets feeChargesPaid
     *
     * @param int $feeChargesPaid feeChargesPaid
     *
     * @return $this
     */
    public function setFeeChargesPaid($feeChargesPaid)
    {
        $this->container['feeChargesPaid'] = $feeChargesPaid;

        return $this;
    }

    /**
     * Gets feeChargesWaived
     *
     * @return int
     */
    public function getFeeChargesWaived()
    {
        return $this->container['feeChargesWaived'];
    }

    /**
     * Sets feeChargesWaived
     *
     * @param int $feeChargesWaived feeChargesWaived
     *
     * @return $this
     */
    public function setFeeChargesWaived($feeChargesWaived)
    {
        $this->container['feeChargesWaived'] = $feeChargesWaived;

        return $this;
    }

    /**
     * Gets feeChargesWrittenOff
     *
     * @return int
     */
    public function getFeeChargesWrittenOff()
    {
        return $this->container['feeChargesWrittenOff'];
    }

    /**
     * Sets feeChargesWrittenOff
     *
     * @param int $feeChargesWrittenOff feeChargesWrittenOff
     *
     * @return $this
     */
    public function setFeeChargesWrittenOff($feeChargesWrittenOff)
    {
        $this->container['feeChargesWrittenOff'] = $feeChargesWrittenOff;

        return $this;
    }

    /**
     * Gets feeChargesOutstanding
     *
     * @return int
     */
    public function getFeeChargesOutstanding()
    {
        return $this->container['feeChargesOutstanding'];
    }

    /**
     * Sets feeChargesOutstanding
     *
     * @param int $feeChargesOutstanding feeChargesOutstanding
     *
     * @return $this
     */
    public function setFeeChargesOutstanding($feeChargesOutstanding)
    {
        $this->container['feeChargesOutstanding'] = $feeChargesOutstanding;

        return $this;
    }

    /**
     * Gets feeChargesOverdue
     *
     * @return int
     */
    public function getFeeChargesOverdue()
    {
        return $this->container['feeChargesOverdue'];
    }

    /**
     * Sets feeChargesOverdue
     *
     * @param int $feeChargesOverdue feeChargesOverdue
     *
     * @return $this
     */
    public function setFeeChargesOverdue($feeChargesOverdue)
    {
        $this->container['feeChargesOverdue'] = $feeChargesOverdue;

        return $this;
    }

    /**
     * Gets penaltyChargesCharged
     *
     * @return int
     */
    public function getPenaltyChargesCharged()
    {
        return $this->container['penaltyChargesCharged'];
    }

    /**
     * Sets penaltyChargesCharged
     *
     * @param int $penaltyChargesCharged penaltyChargesCharged
     *
     * @return $this
     */
    public function setPenaltyChargesCharged($penaltyChargesCharged)
    {
        $this->container['penaltyChargesCharged'] = $penaltyChargesCharged;

        return $this;
    }

    /**
     * Gets penaltyChargesPaid
     *
     * @return int
     */
    public function getPenaltyChargesPaid()
    {
        return $this->container['penaltyChargesPaid'];
    }

    /**
     * Sets penaltyChargesPaid
     *
     * @param int $penaltyChargesPaid penaltyChargesPaid
     *
     * @return $this
     */
    public function setPenaltyChargesPaid($penaltyChargesPaid)
    {
        $this->container['penaltyChargesPaid'] = $penaltyChargesPaid;

        return $this;
    }

    /**
     * Gets penaltyChargesWaived
     *
     * @return int
     */
    public function getPenaltyChargesWaived()
    {
        return $this->container['penaltyChargesWaived'];
    }

    /**
     * Sets penaltyChargesWaived
     *
     * @param int $penaltyChargesWaived penaltyChargesWaived
     *
     * @return $this
     */
    public function setPenaltyChargesWaived($penaltyChargesWaived)
    {
        $this->container['penaltyChargesWaived'] = $penaltyChargesWaived;

        return $this;
    }

    /**
     * Gets penaltyChargesWrittenOff
     *
     * @return int
     */
    public function getPenaltyChargesWrittenOff()
    {
        return $this->container['penaltyChargesWrittenOff'];
    }

    /**
     * Sets penaltyChargesWrittenOff
     *
     * @param int $penaltyChargesWrittenOff penaltyChargesWrittenOff
     *
     * @return $this
     */
    public function setPenaltyChargesWrittenOff($penaltyChargesWrittenOff)
    {
        $this->container['penaltyChargesWrittenOff'] = $penaltyChargesWrittenOff;

        return $this;
    }

    /**
     * Gets penaltyChargesOutstanding
     *
     * @return int
     */
    public function getPenaltyChargesOutstanding()
    {
        return $this->container['penaltyChargesOutstanding'];
    }

    /**
     * Sets penaltyChargesOutstanding
     *
     * @param int $penaltyChargesOutstanding penaltyChargesOutstanding
     *
     * @return $this
     */
    public function setPenaltyChargesOutstanding($penaltyChargesOutstanding)
    {
        $this->container['penaltyChargesOutstanding'] = $penaltyChargesOutstanding;

        return $this;
    }

    /**
     * Gets penaltyChargesOverdue
     *
     * @return int
     */
    public function getPenaltyChargesOverdue()
    {
        return $this->container['penaltyChargesOverdue'];
    }

    /**
     * Sets penaltyChargesOverdue
     *
     * @param int $penaltyChargesOverdue penaltyChargesOverdue
     *
     * @return $this
     */
    public function setPenaltyChargesOverdue($penaltyChargesOverdue)
    {
        $this->container['penaltyChargesOverdue'] = $penaltyChargesOverdue;

        return $this;
    }

    /**
     * Gets totalExpectedRepayment
     *
     * @return int
     */
    public function getTotalExpectedRepayment()
    {
        return $this->container['totalExpectedRepayment'];
    }

    /**
     * Sets totalExpectedRepayment
     *
     * @param int $totalExpectedRepayment totalExpectedRepayment
     *
     * @return $this
     */
    public function setTotalExpectedRepayment($totalExpectedRepayment)
    {
        $this->container['totalExpectedRepayment'] = $totalExpectedRepayment;

        return $this;
    }

    /**
     * Gets totalRepayment
     *
     * @return int
     */
    public function getTotalRepayment()
    {
        return $this->container['totalRepayment'];
    }

    /**
     * Sets totalRepayment
     *
     * @param int $totalRepayment totalRepayment
     *
     * @return $this
     */
    public function setTotalRepayment($totalRepayment)
    {
        $this->container['totalRepayment'] = $totalRepayment;

        return $this;
    }

    /**
     * Gets totalExpectedCostOfLoan
     *
     * @return int
     */
    public function getTotalExpectedCostOfLoan()
    {
        return $this->container['totalExpectedCostOfLoan'];
    }

    /**
     * Sets totalExpectedCostOfLoan
     *
     * @param int $totalExpectedCostOfLoan totalExpectedCostOfLoan
     *
     * @return $this
     */
    public function setTotalExpectedCostOfLoan($totalExpectedCostOfLoan)
    {
        $this->container['totalExpectedCostOfLoan'] = $totalExpectedCostOfLoan;

        return $this;
    }

    /**
     * Gets totalCostOfLoan
     *
     * @return int
     */
    public function getTotalCostOfLoan()
    {
        return $this->container['totalCostOfLoan'];
    }

    /**
     * Sets totalCostOfLoan
     *
     * @param int $totalCostOfLoan totalCostOfLoan
     *
     * @return $this
     */
    public function setTotalCostOfLoan($totalCostOfLoan)
    {
        $this->container['totalCostOfLoan'] = $totalCostOfLoan;

        return $this;
    }

    /**
     * Gets totalWaived
     *
     * @return int
     */
    public function getTotalWaived()
    {
        return $this->container['totalWaived'];
    }

    /**
     * Sets totalWaived
     *
     * @param int $totalWaived totalWaived
     *
     * @return $this
     */
    public function setTotalWaived($totalWaived)
    {
        $this->container['totalWaived'] = $totalWaived;

        return $this;
    }

    /**
     * Gets totalWrittenOff
     *
     * @return int
     */
    public function getTotalWrittenOff()
    {
        return $this->container['totalWrittenOff'];
    }

    /**
     * Sets totalWrittenOff
     *
     * @param int $totalWrittenOff totalWrittenOff
     *
     * @return $this
     */
    public function setTotalWrittenOff($totalWrittenOff)
    {
        $this->container['totalWrittenOff'] = $totalWrittenOff;

        return $this;
    }

    /**
     * Gets totalOutstanding
     *
     * @return int
     */
    public function getTotalOutstanding()
    {
        return $this->container['totalOutstanding'];
    }

    /**
     * Sets totalOutstanding
     *
     * @param int $totalOutstanding totalOutstanding
     *
     * @return $this
     */
    public function setTotalOutstanding($totalOutstanding)
    {
        $this->container['totalOutstanding'] = $totalOutstanding;

        return $this;
    }

    /**
     * Gets totalOverdue
     *
     * @return double
     */
    public function getTotalOverdue()
    {
        return $this->container['totalOverdue'];
    }

    /**
     * Sets totalOverdue
     *
     * @param double $totalOverdue totalOverdue
     *
     * @return $this
     */
    public function setTotalOverdue($totalOverdue)
    {
        $this->container['totalOverdue'] = $totalOverdue;

        return $this;
    }

    /**
     * Gets overdueSinceDate
     *
     * @return \DateTime
     */
    public function getOverdueSinceDate()
    {
        return $this->container['overdueSinceDate'];
    }

    /**
     * Sets overdueSinceDate
     *
     * @param \DateTime $overdueSinceDate overdueSinceDate
     *
     * @return $this
     */
    public function setOverdueSinceDate($overdueSinceDate)
    {
        $this->container['overdueSinceDate'] = $overdueSinceDate;

        return $this;
    }

    /**
     * Gets linkedAccount
     *
     * @return \Frengky\Fineract\Model\GetLoansLoanIdLinkedAccount
     */
    public function getLinkedAccount()
    {
        return $this->container['linkedAccount'];
    }

    /**
     * Sets linkedAccount
     *
     * @param \Frengky\Fineract\Model\GetLoansLoanIdLinkedAccount $linkedAccount linkedAccount
     *
     * @return $this
     */
    public function setLinkedAccount($linkedAccount)
    {
        $this->container['linkedAccount'] = $linkedAccount;

        return $this;
    }

    /**
     * Gets disbursementDetails
     *
     * @return \Frengky\Fineract\Model\GetLoansLoanIdDisbursementDetails[]
     */
    public function getDisbursementDetails()
    {
        return $this->container['disbursementDetails'];
    }

    /**
     * Sets disbursementDetails
     *
     * @param \Frengky\Fineract\Model\GetLoansLoanIdDisbursementDetails[] $disbursementDetails disbursementDetails
     *
     * @return $this
     */
    public function setDisbursementDetails($disbursementDetails)
    {
        $this->container['disbursementDetails'] = $disbursementDetails;

        return $this;
    }

    /**
     * Gets fixedEmiAmount
     *
     * @return float
     */
    public function getFixedEmiAmount()
    {
        return $this->container['fixedEmiAmount'];
    }

    /**
     * Sets fixedEmiAmount
     *
     * @param float $fixedEmiAmount fixedEmiAmount
     *
     * @return $this
     */
    public function setFixedEmiAmount($fixedEmiAmount)
    {
        $this->container['fixedEmiAmount'] = $fixedEmiAmount;

        return $this;
    }

    /**
     * Gets maxOutstandingLoanBalance
     *
     * @return int
     */
    public function getMaxOutstandingLoanBalance()
    {
        return $this->container['maxOutstandingLoanBalance'];
    }

    /**
     * Sets maxOutstandingLoanBalance
     *
     * @param int $maxOutstandingLoanBalance maxOutstandingLoanBalance
     *
     * @return $this
     */
    public function setMaxOutstandingLoanBalance($maxOutstandingLoanBalance)
    {
        $this->container['maxOutstandingLoanBalance'] = $maxOutstandingLoanBalance;

        return $this;
    }

    /**
     * Gets canDisburse
     *
     * @return bool
     */
    public function getCanDisburse()
    {
        return $this->container['canDisburse'];
    }

    /**
     * Sets canDisburse
     *
     * @param bool $canDisburse canDisburse
     *
     * @return $this
     */
    public function setCanDisburse($canDisburse)
    {
        $this->container['canDisburse'] = $canDisburse;

        return $this;
    }

    /**
     * Gets emiAmountVariations
     *
     * @return \Frengky\Fineract\Model\GetLoansLoanIdEmiVariations[]
     */
    public function getEmiAmountVariations()
    {
        return $this->container['emiAmountVariations'];
    }

    /**
     * Sets emiAmountVariations
     *
     * @param \Frengky\Fineract\Model\GetLoansLoanIdEmiVariations[] $emiAmountVariations emiAmountVariations
     *
     * @return $this
     */
    public function setEmiAmountVariations($emiAmountVariations)
    {
        $this->container['emiAmountVariations'] = $emiAmountVariations;

        return $this;
    }

    /**
     * Gets inArrears
     *
     * @return bool
     */
    public function getInArrears()
    {
        return $this->container['inArrears'];
    }

    /**
     * Sets inArrears
     *
     * @param bool $inArrears inArrears
     *
     * @return $this
     */
    public function setInArrears($inArrears)
    {
        $this->container['inArrears'] = $inArrears;

        return $this;
    }

    /**
     * Gets isNPA
     *
     * @return bool
     */
    public function getIsNPA()
    {
        return $this->container['isNPA'];
    }

    /**
     * Sets isNPA
     *
     * @param bool $isNPA isNPA
     *
     * @return $this
     */
    public function setIsNPA($isNPA)
    {
        $this->container['isNPA'] = $isNPA;

        return $this;
    }

    /**
     * Gets overdueCharges
     *
     * @return \Frengky\Fineract\Model\GetLoansLoanIdOverdueCharges[]
     */
    public function getOverdueCharges()
    {
        return $this->container['overdueCharges'];
    }

    /**
     * Sets overdueCharges
     *
     * @param \Frengky\Fineract\Model\GetLoansLoanIdOverdueCharges[] $overdueCharges overdueCharges
     *
     * @return $this
     */
    public function setOverdueCharges($overdueCharges)
    {
        $this->container['overdueCharges'] = $overdueCharges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
