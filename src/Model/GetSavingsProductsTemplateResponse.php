<?php
/**
 * GetSavingsProductsTemplateResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetSavingsProductsTemplateResponse Class Doc Comment
 *
 * @category Class
 * @description GetSavingsProductsTemplateResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetSavingsProductsTemplateResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetSavingsProductsTemplateResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency' => '\Frengky\Fineract\Model\GetSavingsCurrency',
'interestCompoundingPeriodType' => '\Frengky\Fineract\Model\GetSavingsProductsInterestCompoundingPeriodType',
'interestPostingPeriodType' => '\Frengky\Fineract\Model\GetSavingsProductsInterestPostingPeriodType',
'interestCalculationType' => '\Frengky\Fineract\Model\GetSavingsProductsInterestCalculationType',
'interestCalculationDaysInYearType' => '\Frengky\Fineract\Model\GetSavingsProductsInterestCalculationDaysInYearType',
'accountingRule' => '\Frengky\Fineract\Model\GetSavingsProductsTemplateAccountingRule',
'currencyOptions' => '\Frengky\Fineract\Model\GetSavingsCurrency[]',
'interestCompoundingPeriodTypeOptions' => '\Frengky\Fineract\Model\GetSavingsProductsInterestCompoundingPeriodType[]',
'interestPostingPeriodTypeOptions' => '\Frengky\Fineract\Model\GetSavingsProductsInterestPostingPeriodType[]',
'interestCalculationTypeOptions' => '\Frengky\Fineract\Model\GetSavingsProductsInterestCalculationType[]',
'interestCalculationDaysInYearTypeOptions' => '\Frengky\Fineract\Model\GetSavingsProductsInterestCalculationDaysInYearType[]',
'lockinPeriodFrequencyTypeOptions' => '\Frengky\Fineract\Model\GetSavingsProductsLockinPeriodFrequencyTypeOptions[]',
'withdrawalFeeTypeOptions' => '\Frengky\Fineract\Model\GetSavingsProductsWithdrawalFeeTypeOptions[]',
'paymentTypeOptions' => '\Frengky\Fineract\Model\GetSavingsProductsPaymentTypeOptions[]',
'accountingRuleOptions' => '\Frengky\Fineract\Model\GetSavingsProductsTemplateAccountingRule[]',
'accountingMappingOptions' => '\Frengky\Fineract\Model\GetSavingsProductsAccountingMappingOptions[]',
'chargeOptions' => '\Frengky\Fineract\Model\GetSavingsProductsChargeOptions[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency' => null,
'interestCompoundingPeriodType' => null,
'interestPostingPeriodType' => null,
'interestCalculationType' => null,
'interestCalculationDaysInYearType' => null,
'accountingRule' => null,
'currencyOptions' => null,
'interestCompoundingPeriodTypeOptions' => null,
'interestPostingPeriodTypeOptions' => null,
'interestCalculationTypeOptions' => null,
'interestCalculationDaysInYearTypeOptions' => null,
'lockinPeriodFrequencyTypeOptions' => null,
'withdrawalFeeTypeOptions' => null,
'paymentTypeOptions' => null,
'accountingRuleOptions' => null,
'accountingMappingOptions' => null,
'chargeOptions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
'interestCompoundingPeriodType' => 'interestCompoundingPeriodType',
'interestPostingPeriodType' => 'interestPostingPeriodType',
'interestCalculationType' => 'interestCalculationType',
'interestCalculationDaysInYearType' => 'interestCalculationDaysInYearType',
'accountingRule' => 'accountingRule',
'currencyOptions' => 'currencyOptions',
'interestCompoundingPeriodTypeOptions' => 'interestCompoundingPeriodTypeOptions',
'interestPostingPeriodTypeOptions' => 'interestPostingPeriodTypeOptions',
'interestCalculationTypeOptions' => 'interestCalculationTypeOptions',
'interestCalculationDaysInYearTypeOptions' => 'interestCalculationDaysInYearTypeOptions',
'lockinPeriodFrequencyTypeOptions' => 'lockinPeriodFrequencyTypeOptions',
'withdrawalFeeTypeOptions' => 'withdrawalFeeTypeOptions',
'paymentTypeOptions' => 'paymentTypeOptions',
'accountingRuleOptions' => 'accountingRuleOptions',
'accountingMappingOptions' => 'accountingMappingOptions',
'chargeOptions' => 'chargeOptions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
'interestCompoundingPeriodType' => 'setInterestCompoundingPeriodType',
'interestPostingPeriodType' => 'setInterestPostingPeriodType',
'interestCalculationType' => 'setInterestCalculationType',
'interestCalculationDaysInYearType' => 'setInterestCalculationDaysInYearType',
'accountingRule' => 'setAccountingRule',
'currencyOptions' => 'setCurrencyOptions',
'interestCompoundingPeriodTypeOptions' => 'setInterestCompoundingPeriodTypeOptions',
'interestPostingPeriodTypeOptions' => 'setInterestPostingPeriodTypeOptions',
'interestCalculationTypeOptions' => 'setInterestCalculationTypeOptions',
'interestCalculationDaysInYearTypeOptions' => 'setInterestCalculationDaysInYearTypeOptions',
'lockinPeriodFrequencyTypeOptions' => 'setLockinPeriodFrequencyTypeOptions',
'withdrawalFeeTypeOptions' => 'setWithdrawalFeeTypeOptions',
'paymentTypeOptions' => 'setPaymentTypeOptions',
'accountingRuleOptions' => 'setAccountingRuleOptions',
'accountingMappingOptions' => 'setAccountingMappingOptions',
'chargeOptions' => 'setChargeOptions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
'interestCompoundingPeriodType' => 'getInterestCompoundingPeriodType',
'interestPostingPeriodType' => 'getInterestPostingPeriodType',
'interestCalculationType' => 'getInterestCalculationType',
'interestCalculationDaysInYearType' => 'getInterestCalculationDaysInYearType',
'accountingRule' => 'getAccountingRule',
'currencyOptions' => 'getCurrencyOptions',
'interestCompoundingPeriodTypeOptions' => 'getInterestCompoundingPeriodTypeOptions',
'interestPostingPeriodTypeOptions' => 'getInterestPostingPeriodTypeOptions',
'interestCalculationTypeOptions' => 'getInterestCalculationTypeOptions',
'interestCalculationDaysInYearTypeOptions' => 'getInterestCalculationDaysInYearTypeOptions',
'lockinPeriodFrequencyTypeOptions' => 'getLockinPeriodFrequencyTypeOptions',
'withdrawalFeeTypeOptions' => 'getWithdrawalFeeTypeOptions',
'paymentTypeOptions' => 'getPaymentTypeOptions',
'accountingRuleOptions' => 'getAccountingRuleOptions',
'accountingMappingOptions' => 'getAccountingMappingOptions',
'chargeOptions' => 'getChargeOptions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['interestCompoundingPeriodType'] = isset($data['interestCompoundingPeriodType']) ? $data['interestCompoundingPeriodType'] : null;
        $this->container['interestPostingPeriodType'] = isset($data['interestPostingPeriodType']) ? $data['interestPostingPeriodType'] : null;
        $this->container['interestCalculationType'] = isset($data['interestCalculationType']) ? $data['interestCalculationType'] : null;
        $this->container['interestCalculationDaysInYearType'] = isset($data['interestCalculationDaysInYearType']) ? $data['interestCalculationDaysInYearType'] : null;
        $this->container['accountingRule'] = isset($data['accountingRule']) ? $data['accountingRule'] : null;
        $this->container['currencyOptions'] = isset($data['currencyOptions']) ? $data['currencyOptions'] : null;
        $this->container['interestCompoundingPeriodTypeOptions'] = isset($data['interestCompoundingPeriodTypeOptions']) ? $data['interestCompoundingPeriodTypeOptions'] : null;
        $this->container['interestPostingPeriodTypeOptions'] = isset($data['interestPostingPeriodTypeOptions']) ? $data['interestPostingPeriodTypeOptions'] : null;
        $this->container['interestCalculationTypeOptions'] = isset($data['interestCalculationTypeOptions']) ? $data['interestCalculationTypeOptions'] : null;
        $this->container['interestCalculationDaysInYearTypeOptions'] = isset($data['interestCalculationDaysInYearTypeOptions']) ? $data['interestCalculationDaysInYearTypeOptions'] : null;
        $this->container['lockinPeriodFrequencyTypeOptions'] = isset($data['lockinPeriodFrequencyTypeOptions']) ? $data['lockinPeriodFrequencyTypeOptions'] : null;
        $this->container['withdrawalFeeTypeOptions'] = isset($data['withdrawalFeeTypeOptions']) ? $data['withdrawalFeeTypeOptions'] : null;
        $this->container['paymentTypeOptions'] = isset($data['paymentTypeOptions']) ? $data['paymentTypeOptions'] : null;
        $this->container['accountingRuleOptions'] = isset($data['accountingRuleOptions']) ? $data['accountingRuleOptions'] : null;
        $this->container['accountingMappingOptions'] = isset($data['accountingMappingOptions']) ? $data['accountingMappingOptions'] : null;
        $this->container['chargeOptions'] = isset($data['chargeOptions']) ? $data['chargeOptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return \Frengky\Fineract\Model\GetSavingsCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Frengky\Fineract\Model\GetSavingsCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets interestCompoundingPeriodType
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsInterestCompoundingPeriodType
     */
    public function getInterestCompoundingPeriodType()
    {
        return $this->container['interestCompoundingPeriodType'];
    }

    /**
     * Sets interestCompoundingPeriodType
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsInterestCompoundingPeriodType $interestCompoundingPeriodType interestCompoundingPeriodType
     *
     * @return $this
     */
    public function setInterestCompoundingPeriodType($interestCompoundingPeriodType)
    {
        $this->container['interestCompoundingPeriodType'] = $interestCompoundingPeriodType;

        return $this;
    }

    /**
     * Gets interestPostingPeriodType
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsInterestPostingPeriodType
     */
    public function getInterestPostingPeriodType()
    {
        return $this->container['interestPostingPeriodType'];
    }

    /**
     * Sets interestPostingPeriodType
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsInterestPostingPeriodType $interestPostingPeriodType interestPostingPeriodType
     *
     * @return $this
     */
    public function setInterestPostingPeriodType($interestPostingPeriodType)
    {
        $this->container['interestPostingPeriodType'] = $interestPostingPeriodType;

        return $this;
    }

    /**
     * Gets interestCalculationType
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsInterestCalculationType
     */
    public function getInterestCalculationType()
    {
        return $this->container['interestCalculationType'];
    }

    /**
     * Sets interestCalculationType
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsInterestCalculationType $interestCalculationType interestCalculationType
     *
     * @return $this
     */
    public function setInterestCalculationType($interestCalculationType)
    {
        $this->container['interestCalculationType'] = $interestCalculationType;

        return $this;
    }

    /**
     * Gets interestCalculationDaysInYearType
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsInterestCalculationDaysInYearType
     */
    public function getInterestCalculationDaysInYearType()
    {
        return $this->container['interestCalculationDaysInYearType'];
    }

    /**
     * Sets interestCalculationDaysInYearType
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsInterestCalculationDaysInYearType $interestCalculationDaysInYearType interestCalculationDaysInYearType
     *
     * @return $this
     */
    public function setInterestCalculationDaysInYearType($interestCalculationDaysInYearType)
    {
        $this->container['interestCalculationDaysInYearType'] = $interestCalculationDaysInYearType;

        return $this;
    }

    /**
     * Gets accountingRule
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsTemplateAccountingRule
     */
    public function getAccountingRule()
    {
        return $this->container['accountingRule'];
    }

    /**
     * Sets accountingRule
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsTemplateAccountingRule $accountingRule accountingRule
     *
     * @return $this
     */
    public function setAccountingRule($accountingRule)
    {
        $this->container['accountingRule'] = $accountingRule;

        return $this;
    }

    /**
     * Gets currencyOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsCurrency[]
     */
    public function getCurrencyOptions()
    {
        return $this->container['currencyOptions'];
    }

    /**
     * Sets currencyOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsCurrency[] $currencyOptions currencyOptions
     *
     * @return $this
     */
    public function setCurrencyOptions($currencyOptions)
    {
        $this->container['currencyOptions'] = $currencyOptions;

        return $this;
    }

    /**
     * Gets interestCompoundingPeriodTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsInterestCompoundingPeriodType[]
     */
    public function getInterestCompoundingPeriodTypeOptions()
    {
        return $this->container['interestCompoundingPeriodTypeOptions'];
    }

    /**
     * Sets interestCompoundingPeriodTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsInterestCompoundingPeriodType[] $interestCompoundingPeriodTypeOptions interestCompoundingPeriodTypeOptions
     *
     * @return $this
     */
    public function setInterestCompoundingPeriodTypeOptions($interestCompoundingPeriodTypeOptions)
    {
        $this->container['interestCompoundingPeriodTypeOptions'] = $interestCompoundingPeriodTypeOptions;

        return $this;
    }

    /**
     * Gets interestPostingPeriodTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsInterestPostingPeriodType[]
     */
    public function getInterestPostingPeriodTypeOptions()
    {
        return $this->container['interestPostingPeriodTypeOptions'];
    }

    /**
     * Sets interestPostingPeriodTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsInterestPostingPeriodType[] $interestPostingPeriodTypeOptions interestPostingPeriodTypeOptions
     *
     * @return $this
     */
    public function setInterestPostingPeriodTypeOptions($interestPostingPeriodTypeOptions)
    {
        $this->container['interestPostingPeriodTypeOptions'] = $interestPostingPeriodTypeOptions;

        return $this;
    }

    /**
     * Gets interestCalculationTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsInterestCalculationType[]
     */
    public function getInterestCalculationTypeOptions()
    {
        return $this->container['interestCalculationTypeOptions'];
    }

    /**
     * Sets interestCalculationTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsInterestCalculationType[] $interestCalculationTypeOptions interestCalculationTypeOptions
     *
     * @return $this
     */
    public function setInterestCalculationTypeOptions($interestCalculationTypeOptions)
    {
        $this->container['interestCalculationTypeOptions'] = $interestCalculationTypeOptions;

        return $this;
    }

    /**
     * Gets interestCalculationDaysInYearTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsInterestCalculationDaysInYearType[]
     */
    public function getInterestCalculationDaysInYearTypeOptions()
    {
        return $this->container['interestCalculationDaysInYearTypeOptions'];
    }

    /**
     * Sets interestCalculationDaysInYearTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsInterestCalculationDaysInYearType[] $interestCalculationDaysInYearTypeOptions interestCalculationDaysInYearTypeOptions
     *
     * @return $this
     */
    public function setInterestCalculationDaysInYearTypeOptions($interestCalculationDaysInYearTypeOptions)
    {
        $this->container['interestCalculationDaysInYearTypeOptions'] = $interestCalculationDaysInYearTypeOptions;

        return $this;
    }

    /**
     * Gets lockinPeriodFrequencyTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsLockinPeriodFrequencyTypeOptions[]
     */
    public function getLockinPeriodFrequencyTypeOptions()
    {
        return $this->container['lockinPeriodFrequencyTypeOptions'];
    }

    /**
     * Sets lockinPeriodFrequencyTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsLockinPeriodFrequencyTypeOptions[] $lockinPeriodFrequencyTypeOptions lockinPeriodFrequencyTypeOptions
     *
     * @return $this
     */
    public function setLockinPeriodFrequencyTypeOptions($lockinPeriodFrequencyTypeOptions)
    {
        $this->container['lockinPeriodFrequencyTypeOptions'] = $lockinPeriodFrequencyTypeOptions;

        return $this;
    }

    /**
     * Gets withdrawalFeeTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsWithdrawalFeeTypeOptions[]
     */
    public function getWithdrawalFeeTypeOptions()
    {
        return $this->container['withdrawalFeeTypeOptions'];
    }

    /**
     * Sets withdrawalFeeTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsWithdrawalFeeTypeOptions[] $withdrawalFeeTypeOptions withdrawalFeeTypeOptions
     *
     * @return $this
     */
    public function setWithdrawalFeeTypeOptions($withdrawalFeeTypeOptions)
    {
        $this->container['withdrawalFeeTypeOptions'] = $withdrawalFeeTypeOptions;

        return $this;
    }

    /**
     * Gets paymentTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsPaymentTypeOptions[]
     */
    public function getPaymentTypeOptions()
    {
        return $this->container['paymentTypeOptions'];
    }

    /**
     * Sets paymentTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsPaymentTypeOptions[] $paymentTypeOptions paymentTypeOptions
     *
     * @return $this
     */
    public function setPaymentTypeOptions($paymentTypeOptions)
    {
        $this->container['paymentTypeOptions'] = $paymentTypeOptions;

        return $this;
    }

    /**
     * Gets accountingRuleOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsTemplateAccountingRule[]
     */
    public function getAccountingRuleOptions()
    {
        return $this->container['accountingRuleOptions'];
    }

    /**
     * Sets accountingRuleOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsTemplateAccountingRule[] $accountingRuleOptions accountingRuleOptions
     *
     * @return $this
     */
    public function setAccountingRuleOptions($accountingRuleOptions)
    {
        $this->container['accountingRuleOptions'] = $accountingRuleOptions;

        return $this;
    }

    /**
     * Gets accountingMappingOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsAccountingMappingOptions[]
     */
    public function getAccountingMappingOptions()
    {
        return $this->container['accountingMappingOptions'];
    }

    /**
     * Sets accountingMappingOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsAccountingMappingOptions[] $accountingMappingOptions accountingMappingOptions
     *
     * @return $this
     */
    public function setAccountingMappingOptions($accountingMappingOptions)
    {
        $this->container['accountingMappingOptions'] = $accountingMappingOptions;

        return $this;
    }

    /**
     * Gets chargeOptions
     *
     * @return \Frengky\Fineract\Model\GetSavingsProductsChargeOptions[]
     */
    public function getChargeOptions()
    {
        return $this->container['chargeOptions'];
    }

    /**
     * Sets chargeOptions
     *
     * @param \Frengky\Fineract\Model\GetSavingsProductsChargeOptions[] $chargeOptions chargeOptions
     *
     * @return $this
     */
    public function setChargeOptions($chargeOptions)
    {
        $this->container['chargeOptions'] = $chargeOptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
