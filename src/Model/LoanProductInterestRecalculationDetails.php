<?php
/**
 * LoanProductInterestRecalculationDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * LoanProductInterestRecalculationDetails Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoanProductInterestRecalculationDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoanProductInterestRecalculationDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'interestRecalculationCompoundingMethod' => 'int',
'rescheduleStrategyMethod' => 'int',
'restFrequencyType' => 'string',
'restInterval' => 'int',
'restFrequencyNthDay' => 'int',
'restFrequencyWeekday' => 'int',
'restFrequencyOnDay' => 'int',
'compoundingFrequencyType' => 'string',
'compoundingInterval' => 'int',
'compoundingFrequencyNthDay' => 'int',
'compoundingFrequencyWeekday' => 'int',
'compoundingFrequencyOnDay' => 'int',
'isCompoundingToBePostedAsTransaction' => 'bool',
'arrearsBasedOnOriginalSchedule' => 'bool',
'new' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'interestRecalculationCompoundingMethod' => 'int32',
'rescheduleStrategyMethod' => 'int32',
'restFrequencyType' => null,
'restInterval' => 'int32',
'restFrequencyNthDay' => 'int32',
'restFrequencyWeekday' => 'int32',
'restFrequencyOnDay' => 'int32',
'compoundingFrequencyType' => null,
'compoundingInterval' => 'int32',
'compoundingFrequencyNthDay' => 'int32',
'compoundingFrequencyWeekday' => 'int32',
'compoundingFrequencyOnDay' => 'int32',
'isCompoundingToBePostedAsTransaction' => null,
'arrearsBasedOnOriginalSchedule' => null,
'new' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'interestRecalculationCompoundingMethod' => 'interestRecalculationCompoundingMethod',
'rescheduleStrategyMethod' => 'rescheduleStrategyMethod',
'restFrequencyType' => 'restFrequencyType',
'restInterval' => 'restInterval',
'restFrequencyNthDay' => 'restFrequencyNthDay',
'restFrequencyWeekday' => 'restFrequencyWeekday',
'restFrequencyOnDay' => 'restFrequencyOnDay',
'compoundingFrequencyType' => 'compoundingFrequencyType',
'compoundingInterval' => 'compoundingInterval',
'compoundingFrequencyNthDay' => 'compoundingFrequencyNthDay',
'compoundingFrequencyWeekday' => 'compoundingFrequencyWeekday',
'compoundingFrequencyOnDay' => 'compoundingFrequencyOnDay',
'isCompoundingToBePostedAsTransaction' => 'isCompoundingToBePostedAsTransaction',
'arrearsBasedOnOriginalSchedule' => 'arrearsBasedOnOriginalSchedule',
'new' => 'new'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'interestRecalculationCompoundingMethod' => 'setInterestRecalculationCompoundingMethod',
'rescheduleStrategyMethod' => 'setRescheduleStrategyMethod',
'restFrequencyType' => 'setRestFrequencyType',
'restInterval' => 'setRestInterval',
'restFrequencyNthDay' => 'setRestFrequencyNthDay',
'restFrequencyWeekday' => 'setRestFrequencyWeekday',
'restFrequencyOnDay' => 'setRestFrequencyOnDay',
'compoundingFrequencyType' => 'setCompoundingFrequencyType',
'compoundingInterval' => 'setCompoundingInterval',
'compoundingFrequencyNthDay' => 'setCompoundingFrequencyNthDay',
'compoundingFrequencyWeekday' => 'setCompoundingFrequencyWeekday',
'compoundingFrequencyOnDay' => 'setCompoundingFrequencyOnDay',
'isCompoundingToBePostedAsTransaction' => 'setIsCompoundingToBePostedAsTransaction',
'arrearsBasedOnOriginalSchedule' => 'setArrearsBasedOnOriginalSchedule',
'new' => 'setNew'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'interestRecalculationCompoundingMethod' => 'getInterestRecalculationCompoundingMethod',
'rescheduleStrategyMethod' => 'getRescheduleStrategyMethod',
'restFrequencyType' => 'getRestFrequencyType',
'restInterval' => 'getRestInterval',
'restFrequencyNthDay' => 'getRestFrequencyNthDay',
'restFrequencyWeekday' => 'getRestFrequencyWeekday',
'restFrequencyOnDay' => 'getRestFrequencyOnDay',
'compoundingFrequencyType' => 'getCompoundingFrequencyType',
'compoundingInterval' => 'getCompoundingInterval',
'compoundingFrequencyNthDay' => 'getCompoundingFrequencyNthDay',
'compoundingFrequencyWeekday' => 'getCompoundingFrequencyWeekday',
'compoundingFrequencyOnDay' => 'getCompoundingFrequencyOnDay',
'isCompoundingToBePostedAsTransaction' => 'getIsCompoundingToBePostedAsTransaction',
'arrearsBasedOnOriginalSchedule' => 'getArrearsBasedOnOriginalSchedule',
'new' => 'getNew'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REST_FREQUENCY_TYPE_INVALID = 'INVALID';
const REST_FREQUENCY_TYPE_SAME_AS_REPAYMENT_PERIOD = 'SAME_AS_REPAYMENT_PERIOD';
const REST_FREQUENCY_TYPE_DAILY = 'DAILY';
const REST_FREQUENCY_TYPE_WEEKLY = 'WEEKLY';
const REST_FREQUENCY_TYPE_MONTHLY = 'MONTHLY';
const COMPOUNDING_FREQUENCY_TYPE_INVALID = 'INVALID';
const COMPOUNDING_FREQUENCY_TYPE_SAME_AS_REPAYMENT_PERIOD = 'SAME_AS_REPAYMENT_PERIOD';
const COMPOUNDING_FREQUENCY_TYPE_DAILY = 'DAILY';
const COMPOUNDING_FREQUENCY_TYPE_WEEKLY = 'WEEKLY';
const COMPOUNDING_FREQUENCY_TYPE_MONTHLY = 'MONTHLY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRestFrequencyTypeAllowableValues()
    {
        return [
            self::REST_FREQUENCY_TYPE_INVALID,
self::REST_FREQUENCY_TYPE_SAME_AS_REPAYMENT_PERIOD,
self::REST_FREQUENCY_TYPE_DAILY,
self::REST_FREQUENCY_TYPE_WEEKLY,
self::REST_FREQUENCY_TYPE_MONTHLY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompoundingFrequencyTypeAllowableValues()
    {
        return [
            self::COMPOUNDING_FREQUENCY_TYPE_INVALID,
self::COMPOUNDING_FREQUENCY_TYPE_SAME_AS_REPAYMENT_PERIOD,
self::COMPOUNDING_FREQUENCY_TYPE_DAILY,
self::COMPOUNDING_FREQUENCY_TYPE_WEEKLY,
self::COMPOUNDING_FREQUENCY_TYPE_MONTHLY,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['interestRecalculationCompoundingMethod'] = isset($data['interestRecalculationCompoundingMethod']) ? $data['interestRecalculationCompoundingMethod'] : null;
        $this->container['rescheduleStrategyMethod'] = isset($data['rescheduleStrategyMethod']) ? $data['rescheduleStrategyMethod'] : null;
        $this->container['restFrequencyType'] = isset($data['restFrequencyType']) ? $data['restFrequencyType'] : null;
        $this->container['restInterval'] = isset($data['restInterval']) ? $data['restInterval'] : null;
        $this->container['restFrequencyNthDay'] = isset($data['restFrequencyNthDay']) ? $data['restFrequencyNthDay'] : null;
        $this->container['restFrequencyWeekday'] = isset($data['restFrequencyWeekday']) ? $data['restFrequencyWeekday'] : null;
        $this->container['restFrequencyOnDay'] = isset($data['restFrequencyOnDay']) ? $data['restFrequencyOnDay'] : null;
        $this->container['compoundingFrequencyType'] = isset($data['compoundingFrequencyType']) ? $data['compoundingFrequencyType'] : null;
        $this->container['compoundingInterval'] = isset($data['compoundingInterval']) ? $data['compoundingInterval'] : null;
        $this->container['compoundingFrequencyNthDay'] = isset($data['compoundingFrequencyNthDay']) ? $data['compoundingFrequencyNthDay'] : null;
        $this->container['compoundingFrequencyWeekday'] = isset($data['compoundingFrequencyWeekday']) ? $data['compoundingFrequencyWeekday'] : null;
        $this->container['compoundingFrequencyOnDay'] = isset($data['compoundingFrequencyOnDay']) ? $data['compoundingFrequencyOnDay'] : null;
        $this->container['isCompoundingToBePostedAsTransaction'] = isset($data['isCompoundingToBePostedAsTransaction']) ? $data['isCompoundingToBePostedAsTransaction'] : null;
        $this->container['arrearsBasedOnOriginalSchedule'] = isset($data['arrearsBasedOnOriginalSchedule']) ? $data['arrearsBasedOnOriginalSchedule'] : null;
        $this->container['new'] = isset($data['new']) ? $data['new'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRestFrequencyTypeAllowableValues();
        if (!is_null($this->container['restFrequencyType']) && !in_array($this->container['restFrequencyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'restFrequencyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCompoundingFrequencyTypeAllowableValues();
        if (!is_null($this->container['compoundingFrequencyType']) && !in_array($this->container['compoundingFrequencyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'compoundingFrequencyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets interestRecalculationCompoundingMethod
     *
     * @return int
     */
    public function getInterestRecalculationCompoundingMethod()
    {
        return $this->container['interestRecalculationCompoundingMethod'];
    }

    /**
     * Sets interestRecalculationCompoundingMethod
     *
     * @param int $interestRecalculationCompoundingMethod interestRecalculationCompoundingMethod
     *
     * @return $this
     */
    public function setInterestRecalculationCompoundingMethod($interestRecalculationCompoundingMethod)
    {
        $this->container['interestRecalculationCompoundingMethod'] = $interestRecalculationCompoundingMethod;

        return $this;
    }

    /**
     * Gets rescheduleStrategyMethod
     *
     * @return int
     */
    public function getRescheduleStrategyMethod()
    {
        return $this->container['rescheduleStrategyMethod'];
    }

    /**
     * Sets rescheduleStrategyMethod
     *
     * @param int $rescheduleStrategyMethod rescheduleStrategyMethod
     *
     * @return $this
     */
    public function setRescheduleStrategyMethod($rescheduleStrategyMethod)
    {
        $this->container['rescheduleStrategyMethod'] = $rescheduleStrategyMethod;

        return $this;
    }

    /**
     * Gets restFrequencyType
     *
     * @return string
     */
    public function getRestFrequencyType()
    {
        return $this->container['restFrequencyType'];
    }

    /**
     * Sets restFrequencyType
     *
     * @param string $restFrequencyType restFrequencyType
     *
     * @return $this
     */
    public function setRestFrequencyType($restFrequencyType)
    {
        $allowedValues = $this->getRestFrequencyTypeAllowableValues();
        if (!is_null($restFrequencyType) && !in_array($restFrequencyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'restFrequencyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['restFrequencyType'] = $restFrequencyType;

        return $this;
    }

    /**
     * Gets restInterval
     *
     * @return int
     */
    public function getRestInterval()
    {
        return $this->container['restInterval'];
    }

    /**
     * Sets restInterval
     *
     * @param int $restInterval restInterval
     *
     * @return $this
     */
    public function setRestInterval($restInterval)
    {
        $this->container['restInterval'] = $restInterval;

        return $this;
    }

    /**
     * Gets restFrequencyNthDay
     *
     * @return int
     */
    public function getRestFrequencyNthDay()
    {
        return $this->container['restFrequencyNthDay'];
    }

    /**
     * Sets restFrequencyNthDay
     *
     * @param int $restFrequencyNthDay restFrequencyNthDay
     *
     * @return $this
     */
    public function setRestFrequencyNthDay($restFrequencyNthDay)
    {
        $this->container['restFrequencyNthDay'] = $restFrequencyNthDay;

        return $this;
    }

    /**
     * Gets restFrequencyWeekday
     *
     * @return int
     */
    public function getRestFrequencyWeekday()
    {
        return $this->container['restFrequencyWeekday'];
    }

    /**
     * Sets restFrequencyWeekday
     *
     * @param int $restFrequencyWeekday restFrequencyWeekday
     *
     * @return $this
     */
    public function setRestFrequencyWeekday($restFrequencyWeekday)
    {
        $this->container['restFrequencyWeekday'] = $restFrequencyWeekday;

        return $this;
    }

    /**
     * Gets restFrequencyOnDay
     *
     * @return int
     */
    public function getRestFrequencyOnDay()
    {
        return $this->container['restFrequencyOnDay'];
    }

    /**
     * Sets restFrequencyOnDay
     *
     * @param int $restFrequencyOnDay restFrequencyOnDay
     *
     * @return $this
     */
    public function setRestFrequencyOnDay($restFrequencyOnDay)
    {
        $this->container['restFrequencyOnDay'] = $restFrequencyOnDay;

        return $this;
    }

    /**
     * Gets compoundingFrequencyType
     *
     * @return string
     */
    public function getCompoundingFrequencyType()
    {
        return $this->container['compoundingFrequencyType'];
    }

    /**
     * Sets compoundingFrequencyType
     *
     * @param string $compoundingFrequencyType compoundingFrequencyType
     *
     * @return $this
     */
    public function setCompoundingFrequencyType($compoundingFrequencyType)
    {
        $allowedValues = $this->getCompoundingFrequencyTypeAllowableValues();
        if (!is_null($compoundingFrequencyType) && !in_array($compoundingFrequencyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'compoundingFrequencyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['compoundingFrequencyType'] = $compoundingFrequencyType;

        return $this;
    }

    /**
     * Gets compoundingInterval
     *
     * @return int
     */
    public function getCompoundingInterval()
    {
        return $this->container['compoundingInterval'];
    }

    /**
     * Sets compoundingInterval
     *
     * @param int $compoundingInterval compoundingInterval
     *
     * @return $this
     */
    public function setCompoundingInterval($compoundingInterval)
    {
        $this->container['compoundingInterval'] = $compoundingInterval;

        return $this;
    }

    /**
     * Gets compoundingFrequencyNthDay
     *
     * @return int
     */
    public function getCompoundingFrequencyNthDay()
    {
        return $this->container['compoundingFrequencyNthDay'];
    }

    /**
     * Sets compoundingFrequencyNthDay
     *
     * @param int $compoundingFrequencyNthDay compoundingFrequencyNthDay
     *
     * @return $this
     */
    public function setCompoundingFrequencyNthDay($compoundingFrequencyNthDay)
    {
        $this->container['compoundingFrequencyNthDay'] = $compoundingFrequencyNthDay;

        return $this;
    }

    /**
     * Gets compoundingFrequencyWeekday
     *
     * @return int
     */
    public function getCompoundingFrequencyWeekday()
    {
        return $this->container['compoundingFrequencyWeekday'];
    }

    /**
     * Sets compoundingFrequencyWeekday
     *
     * @param int $compoundingFrequencyWeekday compoundingFrequencyWeekday
     *
     * @return $this
     */
    public function setCompoundingFrequencyWeekday($compoundingFrequencyWeekday)
    {
        $this->container['compoundingFrequencyWeekday'] = $compoundingFrequencyWeekday;

        return $this;
    }

    /**
     * Gets compoundingFrequencyOnDay
     *
     * @return int
     */
    public function getCompoundingFrequencyOnDay()
    {
        return $this->container['compoundingFrequencyOnDay'];
    }

    /**
     * Sets compoundingFrequencyOnDay
     *
     * @param int $compoundingFrequencyOnDay compoundingFrequencyOnDay
     *
     * @return $this
     */
    public function setCompoundingFrequencyOnDay($compoundingFrequencyOnDay)
    {
        $this->container['compoundingFrequencyOnDay'] = $compoundingFrequencyOnDay;

        return $this;
    }

    /**
     * Gets isCompoundingToBePostedAsTransaction
     *
     * @return bool
     */
    public function getIsCompoundingToBePostedAsTransaction()
    {
        return $this->container['isCompoundingToBePostedAsTransaction'];
    }

    /**
     * Sets isCompoundingToBePostedAsTransaction
     *
     * @param bool $isCompoundingToBePostedAsTransaction isCompoundingToBePostedAsTransaction
     *
     * @return $this
     */
    public function setIsCompoundingToBePostedAsTransaction($isCompoundingToBePostedAsTransaction)
    {
        $this->container['isCompoundingToBePostedAsTransaction'] = $isCompoundingToBePostedAsTransaction;

        return $this;
    }

    /**
     * Gets arrearsBasedOnOriginalSchedule
     *
     * @return bool
     */
    public function getArrearsBasedOnOriginalSchedule()
    {
        return $this->container['arrearsBasedOnOriginalSchedule'];
    }

    /**
     * Sets arrearsBasedOnOriginalSchedule
     *
     * @param bool $arrearsBasedOnOriginalSchedule arrearsBasedOnOriginalSchedule
     *
     * @return $this
     */
    public function setArrearsBasedOnOriginalSchedule($arrearsBasedOnOriginalSchedule)
    {
        $this->container['arrearsBasedOnOriginalSchedule'] = $arrearsBasedOnOriginalSchedule;

        return $this;
    }

    /**
     * Gets new
     *
     * @return bool
     */
    public function getNew()
    {
        return $this->container['new'];
    }

    /**
     * Sets new
     *
     * @param bool $new new
     *
     * @return $this
     */
    public function setNew($new)
    {
        $this->container['new'] = $new;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
