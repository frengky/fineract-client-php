<?php
/**
 * Group
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * Group Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Group implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Group';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'office' => '\Frengky\Fineract\Model\Office',
'staff' => '\Frengky\Fineract\Model\Staff',
'parent' => '\Frengky\Fineract\Model\Group',
'groupLevel' => '\Frengky\Fineract\Model\GroupLevel',
'groupMembers' => '\Frengky\Fineract\Model\Group[]',
'clientMembers' => '\Frengky\Fineract\Model\Client[]',
'submittedOnDate' => '\DateTime',
'accountNumberRequiresAutoGeneration' => 'bool',
'active' => 'bool',
'group' => 'bool',
'activationLocalDate' => '\DateTime',
'center' => 'bool',
'transferInProgress' => 'bool',
'transferOnHold' => 'bool',
'transferInProgressOrOnHold' => 'bool',
'notPending' => 'bool',
'childGroup' => 'bool',
'activeClientMembers' => '\Frengky\Fineract\Model\Client[]',
'notActive' => 'bool',
'pending' => 'bool',
'closed' => 'bool',
'new' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'office' => null,
'staff' => null,
'parent' => null,
'groupLevel' => null,
'groupMembers' => null,
'clientMembers' => null,
'submittedOnDate' => 'date',
'accountNumberRequiresAutoGeneration' => null,
'active' => null,
'group' => null,
'activationLocalDate' => 'date',
'center' => null,
'transferInProgress' => null,
'transferOnHold' => null,
'transferInProgressOrOnHold' => null,
'notPending' => null,
'childGroup' => null,
'activeClientMembers' => null,
'notActive' => null,
'pending' => null,
'closed' => null,
'new' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'office' => 'office',
'staff' => 'staff',
'parent' => 'parent',
'groupLevel' => 'groupLevel',
'groupMembers' => 'groupMembers',
'clientMembers' => 'clientMembers',
'submittedOnDate' => 'submittedOnDate',
'accountNumberRequiresAutoGeneration' => 'accountNumberRequiresAutoGeneration',
'active' => 'active',
'group' => 'group',
'activationLocalDate' => 'activationLocalDate',
'center' => 'center',
'transferInProgress' => 'transferInProgress',
'transferOnHold' => 'transferOnHold',
'transferInProgressOrOnHold' => 'transferInProgressOrOnHold',
'notPending' => 'notPending',
'childGroup' => 'childGroup',
'activeClientMembers' => 'activeClientMembers',
'notActive' => 'notActive',
'pending' => 'pending',
'closed' => 'closed',
'new' => 'new'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'office' => 'setOffice',
'staff' => 'setStaff',
'parent' => 'setParent',
'groupLevel' => 'setGroupLevel',
'groupMembers' => 'setGroupMembers',
'clientMembers' => 'setClientMembers',
'submittedOnDate' => 'setSubmittedOnDate',
'accountNumberRequiresAutoGeneration' => 'setAccountNumberRequiresAutoGeneration',
'active' => 'setActive',
'group' => 'setGroup',
'activationLocalDate' => 'setActivationLocalDate',
'center' => 'setCenter',
'transferInProgress' => 'setTransferInProgress',
'transferOnHold' => 'setTransferOnHold',
'transferInProgressOrOnHold' => 'setTransferInProgressOrOnHold',
'notPending' => 'setNotPending',
'childGroup' => 'setChildGroup',
'activeClientMembers' => 'setActiveClientMembers',
'notActive' => 'setNotActive',
'pending' => 'setPending',
'closed' => 'setClosed',
'new' => 'setNew'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'office' => 'getOffice',
'staff' => 'getStaff',
'parent' => 'getParent',
'groupLevel' => 'getGroupLevel',
'groupMembers' => 'getGroupMembers',
'clientMembers' => 'getClientMembers',
'submittedOnDate' => 'getSubmittedOnDate',
'accountNumberRequiresAutoGeneration' => 'getAccountNumberRequiresAutoGeneration',
'active' => 'getActive',
'group' => 'getGroup',
'activationLocalDate' => 'getActivationLocalDate',
'center' => 'getCenter',
'transferInProgress' => 'getTransferInProgress',
'transferOnHold' => 'getTransferOnHold',
'transferInProgressOrOnHold' => 'getTransferInProgressOrOnHold',
'notPending' => 'getNotPending',
'childGroup' => 'getChildGroup',
'activeClientMembers' => 'getActiveClientMembers',
'notActive' => 'getNotActive',
'pending' => 'getPending',
'closed' => 'getClosed',
'new' => 'getNew'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['office'] = isset($data['office']) ? $data['office'] : null;
        $this->container['staff'] = isset($data['staff']) ? $data['staff'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['groupLevel'] = isset($data['groupLevel']) ? $data['groupLevel'] : null;
        $this->container['groupMembers'] = isset($data['groupMembers']) ? $data['groupMembers'] : null;
        $this->container['clientMembers'] = isset($data['clientMembers']) ? $data['clientMembers'] : null;
        $this->container['submittedOnDate'] = isset($data['submittedOnDate']) ? $data['submittedOnDate'] : null;
        $this->container['accountNumberRequiresAutoGeneration'] = isset($data['accountNumberRequiresAutoGeneration']) ? $data['accountNumberRequiresAutoGeneration'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['activationLocalDate'] = isset($data['activationLocalDate']) ? $data['activationLocalDate'] : null;
        $this->container['center'] = isset($data['center']) ? $data['center'] : null;
        $this->container['transferInProgress'] = isset($data['transferInProgress']) ? $data['transferInProgress'] : null;
        $this->container['transferOnHold'] = isset($data['transferOnHold']) ? $data['transferOnHold'] : null;
        $this->container['transferInProgressOrOnHold'] = isset($data['transferInProgressOrOnHold']) ? $data['transferInProgressOrOnHold'] : null;
        $this->container['notPending'] = isset($data['notPending']) ? $data['notPending'] : null;
        $this->container['childGroup'] = isset($data['childGroup']) ? $data['childGroup'] : null;
        $this->container['activeClientMembers'] = isset($data['activeClientMembers']) ? $data['activeClientMembers'] : null;
        $this->container['notActive'] = isset($data['notActive']) ? $data['notActive'] : null;
        $this->container['pending'] = isset($data['pending']) ? $data['pending'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['new'] = isset($data['new']) ? $data['new'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets office
     *
     * @return \Frengky\Fineract\Model\Office
     */
    public function getOffice()
    {
        return $this->container['office'];
    }

    /**
     * Sets office
     *
     * @param \Frengky\Fineract\Model\Office $office office
     *
     * @return $this
     */
    public function setOffice($office)
    {
        $this->container['office'] = $office;

        return $this;
    }

    /**
     * Gets staff
     *
     * @return \Frengky\Fineract\Model\Staff
     */
    public function getStaff()
    {
        return $this->container['staff'];
    }

    /**
     * Sets staff
     *
     * @param \Frengky\Fineract\Model\Staff $staff staff
     *
     * @return $this
     */
    public function setStaff($staff)
    {
        $this->container['staff'] = $staff;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \Frengky\Fineract\Model\Group
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Frengky\Fineract\Model\Group $parent parent
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets groupLevel
     *
     * @return \Frengky\Fineract\Model\GroupLevel
     */
    public function getGroupLevel()
    {
        return $this->container['groupLevel'];
    }

    /**
     * Sets groupLevel
     *
     * @param \Frengky\Fineract\Model\GroupLevel $groupLevel groupLevel
     *
     * @return $this
     */
    public function setGroupLevel($groupLevel)
    {
        $this->container['groupLevel'] = $groupLevel;

        return $this;
    }

    /**
     * Gets groupMembers
     *
     * @return \Frengky\Fineract\Model\Group[]
     */
    public function getGroupMembers()
    {
        return $this->container['groupMembers'];
    }

    /**
     * Sets groupMembers
     *
     * @param \Frengky\Fineract\Model\Group[] $groupMembers groupMembers
     *
     * @return $this
     */
    public function setGroupMembers($groupMembers)
    {
        $this->container['groupMembers'] = $groupMembers;

        return $this;
    }

    /**
     * Gets clientMembers
     *
     * @return \Frengky\Fineract\Model\Client[]
     */
    public function getClientMembers()
    {
        return $this->container['clientMembers'];
    }

    /**
     * Sets clientMembers
     *
     * @param \Frengky\Fineract\Model\Client[] $clientMembers clientMembers
     *
     * @return $this
     */
    public function setClientMembers($clientMembers)
    {
        $this->container['clientMembers'] = $clientMembers;

        return $this;
    }

    /**
     * Gets submittedOnDate
     *
     * @return \DateTime
     */
    public function getSubmittedOnDate()
    {
        return $this->container['submittedOnDate'];
    }

    /**
     * Sets submittedOnDate
     *
     * @param \DateTime $submittedOnDate submittedOnDate
     *
     * @return $this
     */
    public function setSubmittedOnDate($submittedOnDate)
    {
        $this->container['submittedOnDate'] = $submittedOnDate;

        return $this;
    }

    /**
     * Gets accountNumberRequiresAutoGeneration
     *
     * @return bool
     */
    public function getAccountNumberRequiresAutoGeneration()
    {
        return $this->container['accountNumberRequiresAutoGeneration'];
    }

    /**
     * Sets accountNumberRequiresAutoGeneration
     *
     * @param bool $accountNumberRequiresAutoGeneration accountNumberRequiresAutoGeneration
     *
     * @return $this
     */
    public function setAccountNumberRequiresAutoGeneration($accountNumberRequiresAutoGeneration)
    {
        $this->container['accountNumberRequiresAutoGeneration'] = $accountNumberRequiresAutoGeneration;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets group
     *
     * @return bool
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param bool $group group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets activationLocalDate
     *
     * @return \DateTime
     */
    public function getActivationLocalDate()
    {
        return $this->container['activationLocalDate'];
    }

    /**
     * Sets activationLocalDate
     *
     * @param \DateTime $activationLocalDate activationLocalDate
     *
     * @return $this
     */
    public function setActivationLocalDate($activationLocalDate)
    {
        $this->container['activationLocalDate'] = $activationLocalDate;

        return $this;
    }

    /**
     * Gets center
     *
     * @return bool
     */
    public function getCenter()
    {
        return $this->container['center'];
    }

    /**
     * Sets center
     *
     * @param bool $center center
     *
     * @return $this
     */
    public function setCenter($center)
    {
        $this->container['center'] = $center;

        return $this;
    }

    /**
     * Gets transferInProgress
     *
     * @return bool
     */
    public function getTransferInProgress()
    {
        return $this->container['transferInProgress'];
    }

    /**
     * Sets transferInProgress
     *
     * @param bool $transferInProgress transferInProgress
     *
     * @return $this
     */
    public function setTransferInProgress($transferInProgress)
    {
        $this->container['transferInProgress'] = $transferInProgress;

        return $this;
    }

    /**
     * Gets transferOnHold
     *
     * @return bool
     */
    public function getTransferOnHold()
    {
        return $this->container['transferOnHold'];
    }

    /**
     * Sets transferOnHold
     *
     * @param bool $transferOnHold transferOnHold
     *
     * @return $this
     */
    public function setTransferOnHold($transferOnHold)
    {
        $this->container['transferOnHold'] = $transferOnHold;

        return $this;
    }

    /**
     * Gets transferInProgressOrOnHold
     *
     * @return bool
     */
    public function getTransferInProgressOrOnHold()
    {
        return $this->container['transferInProgressOrOnHold'];
    }

    /**
     * Sets transferInProgressOrOnHold
     *
     * @param bool $transferInProgressOrOnHold transferInProgressOrOnHold
     *
     * @return $this
     */
    public function setTransferInProgressOrOnHold($transferInProgressOrOnHold)
    {
        $this->container['transferInProgressOrOnHold'] = $transferInProgressOrOnHold;

        return $this;
    }

    /**
     * Gets notPending
     *
     * @return bool
     */
    public function getNotPending()
    {
        return $this->container['notPending'];
    }

    /**
     * Sets notPending
     *
     * @param bool $notPending notPending
     *
     * @return $this
     */
    public function setNotPending($notPending)
    {
        $this->container['notPending'] = $notPending;

        return $this;
    }

    /**
     * Gets childGroup
     *
     * @return bool
     */
    public function getChildGroup()
    {
        return $this->container['childGroup'];
    }

    /**
     * Sets childGroup
     *
     * @param bool $childGroup childGroup
     *
     * @return $this
     */
    public function setChildGroup($childGroup)
    {
        $this->container['childGroup'] = $childGroup;

        return $this;
    }

    /**
     * Gets activeClientMembers
     *
     * @return \Frengky\Fineract\Model\Client[]
     */
    public function getActiveClientMembers()
    {
        return $this->container['activeClientMembers'];
    }

    /**
     * Sets activeClientMembers
     *
     * @param \Frengky\Fineract\Model\Client[] $activeClientMembers activeClientMembers
     *
     * @return $this
     */
    public function setActiveClientMembers($activeClientMembers)
    {
        $this->container['activeClientMembers'] = $activeClientMembers;

        return $this;
    }

    /**
     * Gets notActive
     *
     * @return bool
     */
    public function getNotActive()
    {
        return $this->container['notActive'];
    }

    /**
     * Sets notActive
     *
     * @param bool $notActive notActive
     *
     * @return $this
     */
    public function setNotActive($notActive)
    {
        $this->container['notActive'] = $notActive;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return bool
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param bool $pending pending
     *
     * @return $this
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed closed
     *
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets new
     *
     * @return bool
     */
    public function getNew()
    {
        return $this->container['new'];
    }

    /**
     * Sets new
     *
     * @param bool $new new
     *
     * @return $this
     */
    public function setNew($new)
    {
        $this->container['new'] = $new;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
