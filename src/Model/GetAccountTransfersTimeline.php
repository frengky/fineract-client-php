<?php
/**
 * GetAccountTransfersTimeline
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetAccountTransfersTimeline Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetAccountTransfersTimeline implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetAccountTransfersTimeline';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'submittedOnDate' => '\DateTime',
'submittedByUsername' => 'string',
'submittedByFirstname' => 'string',
'submittedByLastname' => 'string',
'activatedOnDate' => '\DateTime',
'activatedByUsername' => 'string',
'activatedByFirstname' => 'string',
'activatedByLastname' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'submittedOnDate' => 'date',
'submittedByUsername' => null,
'submittedByFirstname' => null,
'submittedByLastname' => null,
'activatedOnDate' => 'date',
'activatedByUsername' => null,
'activatedByFirstname' => null,
'activatedByLastname' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'submittedOnDate' => 'submittedOnDate',
'submittedByUsername' => 'submittedByUsername',
'submittedByFirstname' => 'submittedByFirstname',
'submittedByLastname' => 'submittedByLastname',
'activatedOnDate' => 'activatedOnDate',
'activatedByUsername' => 'activatedByUsername',
'activatedByFirstname' => 'activatedByFirstname',
'activatedByLastname' => 'activatedByLastname'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'submittedOnDate' => 'setSubmittedOnDate',
'submittedByUsername' => 'setSubmittedByUsername',
'submittedByFirstname' => 'setSubmittedByFirstname',
'submittedByLastname' => 'setSubmittedByLastname',
'activatedOnDate' => 'setActivatedOnDate',
'activatedByUsername' => 'setActivatedByUsername',
'activatedByFirstname' => 'setActivatedByFirstname',
'activatedByLastname' => 'setActivatedByLastname'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'submittedOnDate' => 'getSubmittedOnDate',
'submittedByUsername' => 'getSubmittedByUsername',
'submittedByFirstname' => 'getSubmittedByFirstname',
'submittedByLastname' => 'getSubmittedByLastname',
'activatedOnDate' => 'getActivatedOnDate',
'activatedByUsername' => 'getActivatedByUsername',
'activatedByFirstname' => 'getActivatedByFirstname',
'activatedByLastname' => 'getActivatedByLastname'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['submittedOnDate'] = isset($data['submittedOnDate']) ? $data['submittedOnDate'] : null;
        $this->container['submittedByUsername'] = isset($data['submittedByUsername']) ? $data['submittedByUsername'] : null;
        $this->container['submittedByFirstname'] = isset($data['submittedByFirstname']) ? $data['submittedByFirstname'] : null;
        $this->container['submittedByLastname'] = isset($data['submittedByLastname']) ? $data['submittedByLastname'] : null;
        $this->container['activatedOnDate'] = isset($data['activatedOnDate']) ? $data['activatedOnDate'] : null;
        $this->container['activatedByUsername'] = isset($data['activatedByUsername']) ? $data['activatedByUsername'] : null;
        $this->container['activatedByFirstname'] = isset($data['activatedByFirstname']) ? $data['activatedByFirstname'] : null;
        $this->container['activatedByLastname'] = isset($data['activatedByLastname']) ? $data['activatedByLastname'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets submittedOnDate
     *
     * @return \DateTime
     */
    public function getSubmittedOnDate()
    {
        return $this->container['submittedOnDate'];
    }

    /**
     * Sets submittedOnDate
     *
     * @param \DateTime $submittedOnDate submittedOnDate
     *
     * @return $this
     */
    public function setSubmittedOnDate($submittedOnDate)
    {
        $this->container['submittedOnDate'] = $submittedOnDate;

        return $this;
    }

    /**
     * Gets submittedByUsername
     *
     * @return string
     */
    public function getSubmittedByUsername()
    {
        return $this->container['submittedByUsername'];
    }

    /**
     * Sets submittedByUsername
     *
     * @param string $submittedByUsername submittedByUsername
     *
     * @return $this
     */
    public function setSubmittedByUsername($submittedByUsername)
    {
        $this->container['submittedByUsername'] = $submittedByUsername;

        return $this;
    }

    /**
     * Gets submittedByFirstname
     *
     * @return string
     */
    public function getSubmittedByFirstname()
    {
        return $this->container['submittedByFirstname'];
    }

    /**
     * Sets submittedByFirstname
     *
     * @param string $submittedByFirstname submittedByFirstname
     *
     * @return $this
     */
    public function setSubmittedByFirstname($submittedByFirstname)
    {
        $this->container['submittedByFirstname'] = $submittedByFirstname;

        return $this;
    }

    /**
     * Gets submittedByLastname
     *
     * @return string
     */
    public function getSubmittedByLastname()
    {
        return $this->container['submittedByLastname'];
    }

    /**
     * Sets submittedByLastname
     *
     * @param string $submittedByLastname submittedByLastname
     *
     * @return $this
     */
    public function setSubmittedByLastname($submittedByLastname)
    {
        $this->container['submittedByLastname'] = $submittedByLastname;

        return $this;
    }

    /**
     * Gets activatedOnDate
     *
     * @return \DateTime
     */
    public function getActivatedOnDate()
    {
        return $this->container['activatedOnDate'];
    }

    /**
     * Sets activatedOnDate
     *
     * @param \DateTime $activatedOnDate activatedOnDate
     *
     * @return $this
     */
    public function setActivatedOnDate($activatedOnDate)
    {
        $this->container['activatedOnDate'] = $activatedOnDate;

        return $this;
    }

    /**
     * Gets activatedByUsername
     *
     * @return string
     */
    public function getActivatedByUsername()
    {
        return $this->container['activatedByUsername'];
    }

    /**
     * Sets activatedByUsername
     *
     * @param string $activatedByUsername activatedByUsername
     *
     * @return $this
     */
    public function setActivatedByUsername($activatedByUsername)
    {
        $this->container['activatedByUsername'] = $activatedByUsername;

        return $this;
    }

    /**
     * Gets activatedByFirstname
     *
     * @return string
     */
    public function getActivatedByFirstname()
    {
        return $this->container['activatedByFirstname'];
    }

    /**
     * Sets activatedByFirstname
     *
     * @param string $activatedByFirstname activatedByFirstname
     *
     * @return $this
     */
    public function setActivatedByFirstname($activatedByFirstname)
    {
        $this->container['activatedByFirstname'] = $activatedByFirstname;

        return $this;
    }

    /**
     * Gets activatedByLastname
     *
     * @return string
     */
    public function getActivatedByLastname()
    {
        return $this->container['activatedByLastname'];
    }

    /**
     * Sets activatedByLastname
     *
     * @param string $activatedByLastname activatedByLastname
     *
     * @return $this
     */
    public function setActivatedByLastname($activatedByLastname)
    {
        $this->container['activatedByLastname'] = $activatedByLastname;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
