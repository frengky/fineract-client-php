<?php
/**
 * AppUser
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * AppUser Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppUser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AppUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'email' => 'string',
'username' => 'string',
'firstname' => 'string',
'lastname' => 'string',
'password' => 'string',
'accountNonExpired' => 'bool',
'accountNonLocked' => 'bool',
'credentialsNonExpired' => 'bool',
'enabled' => 'bool',
'deleted' => 'bool',
'office' => '\Frengky\Fineract\Model\Office',
'staff' => '\Frengky\Fineract\Model\Staff',
'roles' => '\Frengky\Fineract\Model\Role[]',
'lastTimePasswordUpdated' => '\DateTime',
'passwordNeverExpires' => 'bool',
'appUserClientMappings' => '\Frengky\Fineract\Model\AppUserClientMapping[]',
'selfServiceUser' => 'bool',
'systemUser' => 'bool',
'staffId' => 'int',
'staffDisplayName' => 'string',
'notEnabled' => 'bool',
'authorities' => '\Frengky\Fineract\Model\GrantedAuthority[]',
'new' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'email' => null,
'username' => null,
'firstname' => null,
'lastname' => null,
'password' => null,
'accountNonExpired' => null,
'accountNonLocked' => null,
'credentialsNonExpired' => null,
'enabled' => null,
'deleted' => null,
'office' => null,
'staff' => null,
'roles' => null,
'lastTimePasswordUpdated' => 'date-time',
'passwordNeverExpires' => null,
'appUserClientMappings' => null,
'selfServiceUser' => null,
'systemUser' => null,
'staffId' => 'int64',
'staffDisplayName' => null,
'notEnabled' => null,
'authorities' => null,
'new' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'email' => 'email',
'username' => 'username',
'firstname' => 'firstname',
'lastname' => 'lastname',
'password' => 'password',
'accountNonExpired' => 'accountNonExpired',
'accountNonLocked' => 'accountNonLocked',
'credentialsNonExpired' => 'credentialsNonExpired',
'enabled' => 'enabled',
'deleted' => 'deleted',
'office' => 'office',
'staff' => 'staff',
'roles' => 'roles',
'lastTimePasswordUpdated' => 'lastTimePasswordUpdated',
'passwordNeverExpires' => 'passwordNeverExpires',
'appUserClientMappings' => 'appUserClientMappings',
'selfServiceUser' => 'selfServiceUser',
'systemUser' => 'systemUser',
'staffId' => 'staffId',
'staffDisplayName' => 'staffDisplayName',
'notEnabled' => 'notEnabled',
'authorities' => 'authorities',
'new' => 'new'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'email' => 'setEmail',
'username' => 'setUsername',
'firstname' => 'setFirstname',
'lastname' => 'setLastname',
'password' => 'setPassword',
'accountNonExpired' => 'setAccountNonExpired',
'accountNonLocked' => 'setAccountNonLocked',
'credentialsNonExpired' => 'setCredentialsNonExpired',
'enabled' => 'setEnabled',
'deleted' => 'setDeleted',
'office' => 'setOffice',
'staff' => 'setStaff',
'roles' => 'setRoles',
'lastTimePasswordUpdated' => 'setLastTimePasswordUpdated',
'passwordNeverExpires' => 'setPasswordNeverExpires',
'appUserClientMappings' => 'setAppUserClientMappings',
'selfServiceUser' => 'setSelfServiceUser',
'systemUser' => 'setSystemUser',
'staffId' => 'setStaffId',
'staffDisplayName' => 'setStaffDisplayName',
'notEnabled' => 'setNotEnabled',
'authorities' => 'setAuthorities',
'new' => 'setNew'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'email' => 'getEmail',
'username' => 'getUsername',
'firstname' => 'getFirstname',
'lastname' => 'getLastname',
'password' => 'getPassword',
'accountNonExpired' => 'getAccountNonExpired',
'accountNonLocked' => 'getAccountNonLocked',
'credentialsNonExpired' => 'getCredentialsNonExpired',
'enabled' => 'getEnabled',
'deleted' => 'getDeleted',
'office' => 'getOffice',
'staff' => 'getStaff',
'roles' => 'getRoles',
'lastTimePasswordUpdated' => 'getLastTimePasswordUpdated',
'passwordNeverExpires' => 'getPasswordNeverExpires',
'appUserClientMappings' => 'getAppUserClientMappings',
'selfServiceUser' => 'getSelfServiceUser',
'systemUser' => 'getSystemUser',
'staffId' => 'getStaffId',
'staffDisplayName' => 'getStaffDisplayName',
'notEnabled' => 'getNotEnabled',
'authorities' => 'getAuthorities',
'new' => 'getNew'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['accountNonExpired'] = isset($data['accountNonExpired']) ? $data['accountNonExpired'] : null;
        $this->container['accountNonLocked'] = isset($data['accountNonLocked']) ? $data['accountNonLocked'] : null;
        $this->container['credentialsNonExpired'] = isset($data['credentialsNonExpired']) ? $data['credentialsNonExpired'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['office'] = isset($data['office']) ? $data['office'] : null;
        $this->container['staff'] = isset($data['staff']) ? $data['staff'] : null;
        $this->container['roles'] = isset($data['roles']) ? $data['roles'] : null;
        $this->container['lastTimePasswordUpdated'] = isset($data['lastTimePasswordUpdated']) ? $data['lastTimePasswordUpdated'] : null;
        $this->container['passwordNeverExpires'] = isset($data['passwordNeverExpires']) ? $data['passwordNeverExpires'] : null;
        $this->container['appUserClientMappings'] = isset($data['appUserClientMappings']) ? $data['appUserClientMappings'] : null;
        $this->container['selfServiceUser'] = isset($data['selfServiceUser']) ? $data['selfServiceUser'] : null;
        $this->container['systemUser'] = isset($data['systemUser']) ? $data['systemUser'] : null;
        $this->container['staffId'] = isset($data['staffId']) ? $data['staffId'] : null;
        $this->container['staffDisplayName'] = isset($data['staffDisplayName']) ? $data['staffDisplayName'] : null;
        $this->container['notEnabled'] = isset($data['notEnabled']) ? $data['notEnabled'] : null;
        $this->container['authorities'] = isset($data['authorities']) ? $data['authorities'] : null;
        $this->container['new'] = isset($data['new']) ? $data['new'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets accountNonExpired
     *
     * @return bool
     */
    public function getAccountNonExpired()
    {
        return $this->container['accountNonExpired'];
    }

    /**
     * Sets accountNonExpired
     *
     * @param bool $accountNonExpired accountNonExpired
     *
     * @return $this
     */
    public function setAccountNonExpired($accountNonExpired)
    {
        $this->container['accountNonExpired'] = $accountNonExpired;

        return $this;
    }

    /**
     * Gets accountNonLocked
     *
     * @return bool
     */
    public function getAccountNonLocked()
    {
        return $this->container['accountNonLocked'];
    }

    /**
     * Sets accountNonLocked
     *
     * @param bool $accountNonLocked accountNonLocked
     *
     * @return $this
     */
    public function setAccountNonLocked($accountNonLocked)
    {
        $this->container['accountNonLocked'] = $accountNonLocked;

        return $this;
    }

    /**
     * Gets credentialsNonExpired
     *
     * @return bool
     */
    public function getCredentialsNonExpired()
    {
        return $this->container['credentialsNonExpired'];
    }

    /**
     * Sets credentialsNonExpired
     *
     * @param bool $credentialsNonExpired credentialsNonExpired
     *
     * @return $this
     */
    public function setCredentialsNonExpired($credentialsNonExpired)
    {
        $this->container['credentialsNonExpired'] = $credentialsNonExpired;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled enabled
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets office
     *
     * @return \Frengky\Fineract\Model\Office
     */
    public function getOffice()
    {
        return $this->container['office'];
    }

    /**
     * Sets office
     *
     * @param \Frengky\Fineract\Model\Office $office office
     *
     * @return $this
     */
    public function setOffice($office)
    {
        $this->container['office'] = $office;

        return $this;
    }

    /**
     * Gets staff
     *
     * @return \Frengky\Fineract\Model\Staff
     */
    public function getStaff()
    {
        return $this->container['staff'];
    }

    /**
     * Sets staff
     *
     * @param \Frengky\Fineract\Model\Staff $staff staff
     *
     * @return $this
     */
    public function setStaff($staff)
    {
        $this->container['staff'] = $staff;

        return $this;
    }

    /**
     * Gets roles
     *
     * @return \Frengky\Fineract\Model\Role[]
     */
    public function getRoles()
    {
        return $this->container['roles'];
    }

    /**
     * Sets roles
     *
     * @param \Frengky\Fineract\Model\Role[] $roles roles
     *
     * @return $this
     */
    public function setRoles($roles)
    {
        $this->container['roles'] = $roles;

        return $this;
    }

    /**
     * Gets lastTimePasswordUpdated
     *
     * @return \DateTime
     */
    public function getLastTimePasswordUpdated()
    {
        return $this->container['lastTimePasswordUpdated'];
    }

    /**
     * Sets lastTimePasswordUpdated
     *
     * @param \DateTime $lastTimePasswordUpdated lastTimePasswordUpdated
     *
     * @return $this
     */
    public function setLastTimePasswordUpdated($lastTimePasswordUpdated)
    {
        $this->container['lastTimePasswordUpdated'] = $lastTimePasswordUpdated;

        return $this;
    }

    /**
     * Gets passwordNeverExpires
     *
     * @return bool
     */
    public function getPasswordNeverExpires()
    {
        return $this->container['passwordNeverExpires'];
    }

    /**
     * Sets passwordNeverExpires
     *
     * @param bool $passwordNeverExpires passwordNeverExpires
     *
     * @return $this
     */
    public function setPasswordNeverExpires($passwordNeverExpires)
    {
        $this->container['passwordNeverExpires'] = $passwordNeverExpires;

        return $this;
    }

    /**
     * Gets appUserClientMappings
     *
     * @return \Frengky\Fineract\Model\AppUserClientMapping[]
     */
    public function getAppUserClientMappings()
    {
        return $this->container['appUserClientMappings'];
    }

    /**
     * Sets appUserClientMappings
     *
     * @param \Frengky\Fineract\Model\AppUserClientMapping[] $appUserClientMappings appUserClientMappings
     *
     * @return $this
     */
    public function setAppUserClientMappings($appUserClientMappings)
    {
        $this->container['appUserClientMappings'] = $appUserClientMappings;

        return $this;
    }

    /**
     * Gets selfServiceUser
     *
     * @return bool
     */
    public function getSelfServiceUser()
    {
        return $this->container['selfServiceUser'];
    }

    /**
     * Sets selfServiceUser
     *
     * @param bool $selfServiceUser selfServiceUser
     *
     * @return $this
     */
    public function setSelfServiceUser($selfServiceUser)
    {
        $this->container['selfServiceUser'] = $selfServiceUser;

        return $this;
    }

    /**
     * Gets systemUser
     *
     * @return bool
     */
    public function getSystemUser()
    {
        return $this->container['systemUser'];
    }

    /**
     * Sets systemUser
     *
     * @param bool $systemUser systemUser
     *
     * @return $this
     */
    public function setSystemUser($systemUser)
    {
        $this->container['systemUser'] = $systemUser;

        return $this;
    }

    /**
     * Gets staffId
     *
     * @return int
     */
    public function getStaffId()
    {
        return $this->container['staffId'];
    }

    /**
     * Sets staffId
     *
     * @param int $staffId staffId
     *
     * @return $this
     */
    public function setStaffId($staffId)
    {
        $this->container['staffId'] = $staffId;

        return $this;
    }

    /**
     * Gets staffDisplayName
     *
     * @return string
     */
    public function getStaffDisplayName()
    {
        return $this->container['staffDisplayName'];
    }

    /**
     * Sets staffDisplayName
     *
     * @param string $staffDisplayName staffDisplayName
     *
     * @return $this
     */
    public function setStaffDisplayName($staffDisplayName)
    {
        $this->container['staffDisplayName'] = $staffDisplayName;

        return $this;
    }

    /**
     * Gets notEnabled
     *
     * @return bool
     */
    public function getNotEnabled()
    {
        return $this->container['notEnabled'];
    }

    /**
     * Sets notEnabled
     *
     * @param bool $notEnabled notEnabled
     *
     * @return $this
     */
    public function setNotEnabled($notEnabled)
    {
        $this->container['notEnabled'] = $notEnabled;

        return $this;
    }

    /**
     * Gets authorities
     *
     * @return \Frengky\Fineract\Model\GrantedAuthority[]
     */
    public function getAuthorities()
    {
        return $this->container['authorities'];
    }

    /**
     * Sets authorities
     *
     * @param \Frengky\Fineract\Model\GrantedAuthority[] $authorities authorities
     *
     * @return $this
     */
    public function setAuthorities($authorities)
    {
        $this->container['authorities'] = $authorities;

        return $this;
    }

    /**
     * Gets new
     *
     * @return bool
     */
    public function getNew()
    {
        return $this->container['new'];
    }

    /**
     * Sets new
     *
     * @param bool $new new
     *
     * @return $this
     */
    public function setNew($new)
    {
        $this->container['new'] = $new;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
