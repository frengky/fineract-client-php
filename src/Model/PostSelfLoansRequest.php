<?php
/**
 * PostSelfLoansRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * PostSelfLoansRequest Class Doc Comment
 *
 * @category Class
 * @description PostSelfLoansRequest
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostSelfLoansRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostSelfLoansRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dateFormat' => 'string',
'locale' => 'string',
'clientId' => 'int',
'productId' => 'int',
'principal' => 'double',
'loanTermFrequency' => 'int',
'loanTermFrequencyType' => 'int',
'loanType' => 'string',
'numberOfRepayments' => 'int',
'repaymentEvery' => 'int',
'repaymentFrequencyType' => 'int',
'interestRatePerPeriod' => 'int',
'amortizationType' => 'int',
'interestType' => 'int',
'interestCalculationPeriodType' => 'int',
'transactionProcessingStrategyId' => 'int',
'expectedDisbursementDate' => 'string',
'submittedOnDate' => 'string',
'linkAccountId' => 'int',
'fixedEmiAmount' => 'int',
'maxOutstandingLoanBalance' => 'int',
'disbursementData' => '\Frengky\Fineract\Model\PostSelfLoansDisbursementData[]',
'datatables' => '\Frengky\Fineract\Model\PostSelfLoansDatatables[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dateFormat' => null,
'locale' => null,
'clientId' => 'int32',
'productId' => 'int32',
'principal' => 'double',
'loanTermFrequency' => 'int32',
'loanTermFrequencyType' => 'int32',
'loanType' => null,
'numberOfRepayments' => 'int32',
'repaymentEvery' => 'int32',
'repaymentFrequencyType' => 'int32',
'interestRatePerPeriod' => 'int32',
'amortizationType' => 'int32',
'interestType' => 'int32',
'interestCalculationPeriodType' => 'int32',
'transactionProcessingStrategyId' => 'int32',
'expectedDisbursementDate' => null,
'submittedOnDate' => null,
'linkAccountId' => 'int32',
'fixedEmiAmount' => 'int32',
'maxOutstandingLoanBalance' => 'int64',
'disbursementData' => null,
'datatables' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dateFormat' => 'dateFormat',
'locale' => 'locale',
'clientId' => 'clientId',
'productId' => 'productId',
'principal' => 'principal',
'loanTermFrequency' => 'loanTermFrequency',
'loanTermFrequencyType' => 'loanTermFrequencyType',
'loanType' => 'loanType',
'numberOfRepayments' => 'numberOfRepayments',
'repaymentEvery' => 'repaymentEvery',
'repaymentFrequencyType' => 'repaymentFrequencyType',
'interestRatePerPeriod' => 'interestRatePerPeriod',
'amortizationType' => 'amortizationType',
'interestType' => 'interestType',
'interestCalculationPeriodType' => 'interestCalculationPeriodType',
'transactionProcessingStrategyId' => 'transactionProcessingStrategyId',
'expectedDisbursementDate' => 'expectedDisbursementDate',
'submittedOnDate' => 'submittedOnDate',
'linkAccountId' => 'linkAccountId',
'fixedEmiAmount' => 'fixedEmiAmount',
'maxOutstandingLoanBalance' => 'maxOutstandingLoanBalance',
'disbursementData' => 'disbursementData',
'datatables' => 'datatables'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dateFormat' => 'setDateFormat',
'locale' => 'setLocale',
'clientId' => 'setClientId',
'productId' => 'setProductId',
'principal' => 'setPrincipal',
'loanTermFrequency' => 'setLoanTermFrequency',
'loanTermFrequencyType' => 'setLoanTermFrequencyType',
'loanType' => 'setLoanType',
'numberOfRepayments' => 'setNumberOfRepayments',
'repaymentEvery' => 'setRepaymentEvery',
'repaymentFrequencyType' => 'setRepaymentFrequencyType',
'interestRatePerPeriod' => 'setInterestRatePerPeriod',
'amortizationType' => 'setAmortizationType',
'interestType' => 'setInterestType',
'interestCalculationPeriodType' => 'setInterestCalculationPeriodType',
'transactionProcessingStrategyId' => 'setTransactionProcessingStrategyId',
'expectedDisbursementDate' => 'setExpectedDisbursementDate',
'submittedOnDate' => 'setSubmittedOnDate',
'linkAccountId' => 'setLinkAccountId',
'fixedEmiAmount' => 'setFixedEmiAmount',
'maxOutstandingLoanBalance' => 'setMaxOutstandingLoanBalance',
'disbursementData' => 'setDisbursementData',
'datatables' => 'setDatatables'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dateFormat' => 'getDateFormat',
'locale' => 'getLocale',
'clientId' => 'getClientId',
'productId' => 'getProductId',
'principal' => 'getPrincipal',
'loanTermFrequency' => 'getLoanTermFrequency',
'loanTermFrequencyType' => 'getLoanTermFrequencyType',
'loanType' => 'getLoanType',
'numberOfRepayments' => 'getNumberOfRepayments',
'repaymentEvery' => 'getRepaymentEvery',
'repaymentFrequencyType' => 'getRepaymentFrequencyType',
'interestRatePerPeriod' => 'getInterestRatePerPeriod',
'amortizationType' => 'getAmortizationType',
'interestType' => 'getInterestType',
'interestCalculationPeriodType' => 'getInterestCalculationPeriodType',
'transactionProcessingStrategyId' => 'getTransactionProcessingStrategyId',
'expectedDisbursementDate' => 'getExpectedDisbursementDate',
'submittedOnDate' => 'getSubmittedOnDate',
'linkAccountId' => 'getLinkAccountId',
'fixedEmiAmount' => 'getFixedEmiAmount',
'maxOutstandingLoanBalance' => 'getMaxOutstandingLoanBalance',
'disbursementData' => 'getDisbursementData',
'datatables' => 'getDatatables'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dateFormat'] = isset($data['dateFormat']) ? $data['dateFormat'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['clientId'] = isset($data['clientId']) ? $data['clientId'] : null;
        $this->container['productId'] = isset($data['productId']) ? $data['productId'] : null;
        $this->container['principal'] = isset($data['principal']) ? $data['principal'] : null;
        $this->container['loanTermFrequency'] = isset($data['loanTermFrequency']) ? $data['loanTermFrequency'] : null;
        $this->container['loanTermFrequencyType'] = isset($data['loanTermFrequencyType']) ? $data['loanTermFrequencyType'] : null;
        $this->container['loanType'] = isset($data['loanType']) ? $data['loanType'] : null;
        $this->container['numberOfRepayments'] = isset($data['numberOfRepayments']) ? $data['numberOfRepayments'] : null;
        $this->container['repaymentEvery'] = isset($data['repaymentEvery']) ? $data['repaymentEvery'] : null;
        $this->container['repaymentFrequencyType'] = isset($data['repaymentFrequencyType']) ? $data['repaymentFrequencyType'] : null;
        $this->container['interestRatePerPeriod'] = isset($data['interestRatePerPeriod']) ? $data['interestRatePerPeriod'] : null;
        $this->container['amortizationType'] = isset($data['amortizationType']) ? $data['amortizationType'] : null;
        $this->container['interestType'] = isset($data['interestType']) ? $data['interestType'] : null;
        $this->container['interestCalculationPeriodType'] = isset($data['interestCalculationPeriodType']) ? $data['interestCalculationPeriodType'] : null;
        $this->container['transactionProcessingStrategyId'] = isset($data['transactionProcessingStrategyId']) ? $data['transactionProcessingStrategyId'] : null;
        $this->container['expectedDisbursementDate'] = isset($data['expectedDisbursementDate']) ? $data['expectedDisbursementDate'] : null;
        $this->container['submittedOnDate'] = isset($data['submittedOnDate']) ? $data['submittedOnDate'] : null;
        $this->container['linkAccountId'] = isset($data['linkAccountId']) ? $data['linkAccountId'] : null;
        $this->container['fixedEmiAmount'] = isset($data['fixedEmiAmount']) ? $data['fixedEmiAmount'] : null;
        $this->container['maxOutstandingLoanBalance'] = isset($data['maxOutstandingLoanBalance']) ? $data['maxOutstandingLoanBalance'] : null;
        $this->container['disbursementData'] = isset($data['disbursementData']) ? $data['disbursementData'] : null;
        $this->container['datatables'] = isset($data['datatables']) ? $data['datatables'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dateFormat
     *
     * @return string
     */
    public function getDateFormat()
    {
        return $this->container['dateFormat'];
    }

    /**
     * Sets dateFormat
     *
     * @param string $dateFormat dateFormat
     *
     * @return $this
     */
    public function setDateFormat($dateFormat)
    {
        $this->container['dateFormat'] = $dateFormat;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param int $clientId clientId
     *
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param int $productId productId
     *
     * @return $this
     */
    public function setProductId($productId)
    {
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return double
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param double $principal principal
     *
     * @return $this
     */
    public function setPrincipal($principal)
    {
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets loanTermFrequency
     *
     * @return int
     */
    public function getLoanTermFrequency()
    {
        return $this->container['loanTermFrequency'];
    }

    /**
     * Sets loanTermFrequency
     *
     * @param int $loanTermFrequency loanTermFrequency
     *
     * @return $this
     */
    public function setLoanTermFrequency($loanTermFrequency)
    {
        $this->container['loanTermFrequency'] = $loanTermFrequency;

        return $this;
    }

    /**
     * Gets loanTermFrequencyType
     *
     * @return int
     */
    public function getLoanTermFrequencyType()
    {
        return $this->container['loanTermFrequencyType'];
    }

    /**
     * Sets loanTermFrequencyType
     *
     * @param int $loanTermFrequencyType loanTermFrequencyType
     *
     * @return $this
     */
    public function setLoanTermFrequencyType($loanTermFrequencyType)
    {
        $this->container['loanTermFrequencyType'] = $loanTermFrequencyType;

        return $this;
    }

    /**
     * Gets loanType
     *
     * @return string
     */
    public function getLoanType()
    {
        return $this->container['loanType'];
    }

    /**
     * Sets loanType
     *
     * @param string $loanType loanType
     *
     * @return $this
     */
    public function setLoanType($loanType)
    {
        $this->container['loanType'] = $loanType;

        return $this;
    }

    /**
     * Gets numberOfRepayments
     *
     * @return int
     */
    public function getNumberOfRepayments()
    {
        return $this->container['numberOfRepayments'];
    }

    /**
     * Sets numberOfRepayments
     *
     * @param int $numberOfRepayments numberOfRepayments
     *
     * @return $this
     */
    public function setNumberOfRepayments($numberOfRepayments)
    {
        $this->container['numberOfRepayments'] = $numberOfRepayments;

        return $this;
    }

    /**
     * Gets repaymentEvery
     *
     * @return int
     */
    public function getRepaymentEvery()
    {
        return $this->container['repaymentEvery'];
    }

    /**
     * Sets repaymentEvery
     *
     * @param int $repaymentEvery repaymentEvery
     *
     * @return $this
     */
    public function setRepaymentEvery($repaymentEvery)
    {
        $this->container['repaymentEvery'] = $repaymentEvery;

        return $this;
    }

    /**
     * Gets repaymentFrequencyType
     *
     * @return int
     */
    public function getRepaymentFrequencyType()
    {
        return $this->container['repaymentFrequencyType'];
    }

    /**
     * Sets repaymentFrequencyType
     *
     * @param int $repaymentFrequencyType repaymentFrequencyType
     *
     * @return $this
     */
    public function setRepaymentFrequencyType($repaymentFrequencyType)
    {
        $this->container['repaymentFrequencyType'] = $repaymentFrequencyType;

        return $this;
    }

    /**
     * Gets interestRatePerPeriod
     *
     * @return int
     */
    public function getInterestRatePerPeriod()
    {
        return $this->container['interestRatePerPeriod'];
    }

    /**
     * Sets interestRatePerPeriod
     *
     * @param int $interestRatePerPeriod interestRatePerPeriod
     *
     * @return $this
     */
    public function setInterestRatePerPeriod($interestRatePerPeriod)
    {
        $this->container['interestRatePerPeriod'] = $interestRatePerPeriod;

        return $this;
    }

    /**
     * Gets amortizationType
     *
     * @return int
     */
    public function getAmortizationType()
    {
        return $this->container['amortizationType'];
    }

    /**
     * Sets amortizationType
     *
     * @param int $amortizationType amortizationType
     *
     * @return $this
     */
    public function setAmortizationType($amortizationType)
    {
        $this->container['amortizationType'] = $amortizationType;

        return $this;
    }

    /**
     * Gets interestType
     *
     * @return int
     */
    public function getInterestType()
    {
        return $this->container['interestType'];
    }

    /**
     * Sets interestType
     *
     * @param int $interestType interestType
     *
     * @return $this
     */
    public function setInterestType($interestType)
    {
        $this->container['interestType'] = $interestType;

        return $this;
    }

    /**
     * Gets interestCalculationPeriodType
     *
     * @return int
     */
    public function getInterestCalculationPeriodType()
    {
        return $this->container['interestCalculationPeriodType'];
    }

    /**
     * Sets interestCalculationPeriodType
     *
     * @param int $interestCalculationPeriodType interestCalculationPeriodType
     *
     * @return $this
     */
    public function setInterestCalculationPeriodType($interestCalculationPeriodType)
    {
        $this->container['interestCalculationPeriodType'] = $interestCalculationPeriodType;

        return $this;
    }

    /**
     * Gets transactionProcessingStrategyId
     *
     * @return int
     */
    public function getTransactionProcessingStrategyId()
    {
        return $this->container['transactionProcessingStrategyId'];
    }

    /**
     * Sets transactionProcessingStrategyId
     *
     * @param int $transactionProcessingStrategyId transactionProcessingStrategyId
     *
     * @return $this
     */
    public function setTransactionProcessingStrategyId($transactionProcessingStrategyId)
    {
        $this->container['transactionProcessingStrategyId'] = $transactionProcessingStrategyId;

        return $this;
    }

    /**
     * Gets expectedDisbursementDate
     *
     * @return string
     */
    public function getExpectedDisbursementDate()
    {
        return $this->container['expectedDisbursementDate'];
    }

    /**
     * Sets expectedDisbursementDate
     *
     * @param string $expectedDisbursementDate expectedDisbursementDate
     *
     * @return $this
     */
    public function setExpectedDisbursementDate($expectedDisbursementDate)
    {
        $this->container['expectedDisbursementDate'] = $expectedDisbursementDate;

        return $this;
    }

    /**
     * Gets submittedOnDate
     *
     * @return string
     */
    public function getSubmittedOnDate()
    {
        return $this->container['submittedOnDate'];
    }

    /**
     * Sets submittedOnDate
     *
     * @param string $submittedOnDate submittedOnDate
     *
     * @return $this
     */
    public function setSubmittedOnDate($submittedOnDate)
    {
        $this->container['submittedOnDate'] = $submittedOnDate;

        return $this;
    }

    /**
     * Gets linkAccountId
     *
     * @return int
     */
    public function getLinkAccountId()
    {
        return $this->container['linkAccountId'];
    }

    /**
     * Sets linkAccountId
     *
     * @param int $linkAccountId linkAccountId
     *
     * @return $this
     */
    public function setLinkAccountId($linkAccountId)
    {
        $this->container['linkAccountId'] = $linkAccountId;

        return $this;
    }

    /**
     * Gets fixedEmiAmount
     *
     * @return int
     */
    public function getFixedEmiAmount()
    {
        return $this->container['fixedEmiAmount'];
    }

    /**
     * Sets fixedEmiAmount
     *
     * @param int $fixedEmiAmount fixedEmiAmount
     *
     * @return $this
     */
    public function setFixedEmiAmount($fixedEmiAmount)
    {
        $this->container['fixedEmiAmount'] = $fixedEmiAmount;

        return $this;
    }

    /**
     * Gets maxOutstandingLoanBalance
     *
     * @return int
     */
    public function getMaxOutstandingLoanBalance()
    {
        return $this->container['maxOutstandingLoanBalance'];
    }

    /**
     * Sets maxOutstandingLoanBalance
     *
     * @param int $maxOutstandingLoanBalance maxOutstandingLoanBalance
     *
     * @return $this
     */
    public function setMaxOutstandingLoanBalance($maxOutstandingLoanBalance)
    {
        $this->container['maxOutstandingLoanBalance'] = $maxOutstandingLoanBalance;

        return $this;
    }

    /**
     * Gets disbursementData
     *
     * @return \Frengky\Fineract\Model\PostSelfLoansDisbursementData[]
     */
    public function getDisbursementData()
    {
        return $this->container['disbursementData'];
    }

    /**
     * Sets disbursementData
     *
     * @param \Frengky\Fineract\Model\PostSelfLoansDisbursementData[] $disbursementData disbursementData
     *
     * @return $this
     */
    public function setDisbursementData($disbursementData)
    {
        $this->container['disbursementData'] = $disbursementData;

        return $this;
    }

    /**
     * Gets datatables
     *
     * @return \Frengky\Fineract\Model\PostSelfLoansDatatables[]
     */
    public function getDatatables()
    {
        return $this->container['datatables'];
    }

    /**
     * Sets datatables
     *
     * @param \Frengky\Fineract\Model\PostSelfLoansDatatables[] $datatables datatables
     *
     * @return $this
     */
    public function setDatatables($datatables)
    {
        $this->container['datatables'] = $datatables;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
