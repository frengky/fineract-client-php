<?php
/**
 * PostLoansResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * PostLoansResponse Class Doc Comment
 *
 * @category Class
 * @description PostLoansResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostLoansResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostLoansResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency' => '\Frengky\Fineract\Model\GetLoansLoanIdCurrency',
'loanTermInDays' => 'int',
'totalPrincipalDisbursed' => 'int',
'totalPrincipalExpected' => 'int',
'totalPrincipalPaid' => 'int',
'totalInterestCharged' => 'double',
'totalFeeChargesCharged' => 'int',
'totalPenaltyChargesCharged' => 'int',
'totalWaived' => 'int',
'totalWrittenOff' => 'int',
'totalRepaymentExpected' => 'double',
'totalRepayment' => 'int',
'totalOutstanding' => 'int',
'periods' => '\Frengky\Fineract\Model\PostLoansRepaymentSchedulePeriods[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency' => null,
'loanTermInDays' => 'int32',
'totalPrincipalDisbursed' => 'int64',
'totalPrincipalExpected' => 'int64',
'totalPrincipalPaid' => 'int64',
'totalInterestCharged' => 'double',
'totalFeeChargesCharged' => 'int64',
'totalPenaltyChargesCharged' => 'int64',
'totalWaived' => 'int64',
'totalWrittenOff' => 'int64',
'totalRepaymentExpected' => 'double',
'totalRepayment' => 'int64',
'totalOutstanding' => 'int64',
'periods' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
'loanTermInDays' => 'loanTermInDays',
'totalPrincipalDisbursed' => 'totalPrincipalDisbursed',
'totalPrincipalExpected' => 'totalPrincipalExpected',
'totalPrincipalPaid' => 'totalPrincipalPaid',
'totalInterestCharged' => 'totalInterestCharged',
'totalFeeChargesCharged' => 'totalFeeChargesCharged',
'totalPenaltyChargesCharged' => 'totalPenaltyChargesCharged',
'totalWaived' => 'totalWaived',
'totalWrittenOff' => 'totalWrittenOff',
'totalRepaymentExpected' => 'totalRepaymentExpected',
'totalRepayment' => 'totalRepayment',
'totalOutstanding' => 'totalOutstanding',
'periods' => 'periods'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
'loanTermInDays' => 'setLoanTermInDays',
'totalPrincipalDisbursed' => 'setTotalPrincipalDisbursed',
'totalPrincipalExpected' => 'setTotalPrincipalExpected',
'totalPrincipalPaid' => 'setTotalPrincipalPaid',
'totalInterestCharged' => 'setTotalInterestCharged',
'totalFeeChargesCharged' => 'setTotalFeeChargesCharged',
'totalPenaltyChargesCharged' => 'setTotalPenaltyChargesCharged',
'totalWaived' => 'setTotalWaived',
'totalWrittenOff' => 'setTotalWrittenOff',
'totalRepaymentExpected' => 'setTotalRepaymentExpected',
'totalRepayment' => 'setTotalRepayment',
'totalOutstanding' => 'setTotalOutstanding',
'periods' => 'setPeriods'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
'loanTermInDays' => 'getLoanTermInDays',
'totalPrincipalDisbursed' => 'getTotalPrincipalDisbursed',
'totalPrincipalExpected' => 'getTotalPrincipalExpected',
'totalPrincipalPaid' => 'getTotalPrincipalPaid',
'totalInterestCharged' => 'getTotalInterestCharged',
'totalFeeChargesCharged' => 'getTotalFeeChargesCharged',
'totalPenaltyChargesCharged' => 'getTotalPenaltyChargesCharged',
'totalWaived' => 'getTotalWaived',
'totalWrittenOff' => 'getTotalWrittenOff',
'totalRepaymentExpected' => 'getTotalRepaymentExpected',
'totalRepayment' => 'getTotalRepayment',
'totalOutstanding' => 'getTotalOutstanding',
'periods' => 'getPeriods'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['loanTermInDays'] = isset($data['loanTermInDays']) ? $data['loanTermInDays'] : null;
        $this->container['totalPrincipalDisbursed'] = isset($data['totalPrincipalDisbursed']) ? $data['totalPrincipalDisbursed'] : null;
        $this->container['totalPrincipalExpected'] = isset($data['totalPrincipalExpected']) ? $data['totalPrincipalExpected'] : null;
        $this->container['totalPrincipalPaid'] = isset($data['totalPrincipalPaid']) ? $data['totalPrincipalPaid'] : null;
        $this->container['totalInterestCharged'] = isset($data['totalInterestCharged']) ? $data['totalInterestCharged'] : null;
        $this->container['totalFeeChargesCharged'] = isset($data['totalFeeChargesCharged']) ? $data['totalFeeChargesCharged'] : null;
        $this->container['totalPenaltyChargesCharged'] = isset($data['totalPenaltyChargesCharged']) ? $data['totalPenaltyChargesCharged'] : null;
        $this->container['totalWaived'] = isset($data['totalWaived']) ? $data['totalWaived'] : null;
        $this->container['totalWrittenOff'] = isset($data['totalWrittenOff']) ? $data['totalWrittenOff'] : null;
        $this->container['totalRepaymentExpected'] = isset($data['totalRepaymentExpected']) ? $data['totalRepaymentExpected'] : null;
        $this->container['totalRepayment'] = isset($data['totalRepayment']) ? $data['totalRepayment'] : null;
        $this->container['totalOutstanding'] = isset($data['totalOutstanding']) ? $data['totalOutstanding'] : null;
        $this->container['periods'] = isset($data['periods']) ? $data['periods'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return \Frengky\Fineract\Model\GetLoansLoanIdCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Frengky\Fineract\Model\GetLoansLoanIdCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets loanTermInDays
     *
     * @return int
     */
    public function getLoanTermInDays()
    {
        return $this->container['loanTermInDays'];
    }

    /**
     * Sets loanTermInDays
     *
     * @param int $loanTermInDays loanTermInDays
     *
     * @return $this
     */
    public function setLoanTermInDays($loanTermInDays)
    {
        $this->container['loanTermInDays'] = $loanTermInDays;

        return $this;
    }

    /**
     * Gets totalPrincipalDisbursed
     *
     * @return int
     */
    public function getTotalPrincipalDisbursed()
    {
        return $this->container['totalPrincipalDisbursed'];
    }

    /**
     * Sets totalPrincipalDisbursed
     *
     * @param int $totalPrincipalDisbursed totalPrincipalDisbursed
     *
     * @return $this
     */
    public function setTotalPrincipalDisbursed($totalPrincipalDisbursed)
    {
        $this->container['totalPrincipalDisbursed'] = $totalPrincipalDisbursed;

        return $this;
    }

    /**
     * Gets totalPrincipalExpected
     *
     * @return int
     */
    public function getTotalPrincipalExpected()
    {
        return $this->container['totalPrincipalExpected'];
    }

    /**
     * Sets totalPrincipalExpected
     *
     * @param int $totalPrincipalExpected totalPrincipalExpected
     *
     * @return $this
     */
    public function setTotalPrincipalExpected($totalPrincipalExpected)
    {
        $this->container['totalPrincipalExpected'] = $totalPrincipalExpected;

        return $this;
    }

    /**
     * Gets totalPrincipalPaid
     *
     * @return int
     */
    public function getTotalPrincipalPaid()
    {
        return $this->container['totalPrincipalPaid'];
    }

    /**
     * Sets totalPrincipalPaid
     *
     * @param int $totalPrincipalPaid totalPrincipalPaid
     *
     * @return $this
     */
    public function setTotalPrincipalPaid($totalPrincipalPaid)
    {
        $this->container['totalPrincipalPaid'] = $totalPrincipalPaid;

        return $this;
    }

    /**
     * Gets totalInterestCharged
     *
     * @return double
     */
    public function getTotalInterestCharged()
    {
        return $this->container['totalInterestCharged'];
    }

    /**
     * Sets totalInterestCharged
     *
     * @param double $totalInterestCharged totalInterestCharged
     *
     * @return $this
     */
    public function setTotalInterestCharged($totalInterestCharged)
    {
        $this->container['totalInterestCharged'] = $totalInterestCharged;

        return $this;
    }

    /**
     * Gets totalFeeChargesCharged
     *
     * @return int
     */
    public function getTotalFeeChargesCharged()
    {
        return $this->container['totalFeeChargesCharged'];
    }

    /**
     * Sets totalFeeChargesCharged
     *
     * @param int $totalFeeChargesCharged totalFeeChargesCharged
     *
     * @return $this
     */
    public function setTotalFeeChargesCharged($totalFeeChargesCharged)
    {
        $this->container['totalFeeChargesCharged'] = $totalFeeChargesCharged;

        return $this;
    }

    /**
     * Gets totalPenaltyChargesCharged
     *
     * @return int
     */
    public function getTotalPenaltyChargesCharged()
    {
        return $this->container['totalPenaltyChargesCharged'];
    }

    /**
     * Sets totalPenaltyChargesCharged
     *
     * @param int $totalPenaltyChargesCharged totalPenaltyChargesCharged
     *
     * @return $this
     */
    public function setTotalPenaltyChargesCharged($totalPenaltyChargesCharged)
    {
        $this->container['totalPenaltyChargesCharged'] = $totalPenaltyChargesCharged;

        return $this;
    }

    /**
     * Gets totalWaived
     *
     * @return int
     */
    public function getTotalWaived()
    {
        return $this->container['totalWaived'];
    }

    /**
     * Sets totalWaived
     *
     * @param int $totalWaived totalWaived
     *
     * @return $this
     */
    public function setTotalWaived($totalWaived)
    {
        $this->container['totalWaived'] = $totalWaived;

        return $this;
    }

    /**
     * Gets totalWrittenOff
     *
     * @return int
     */
    public function getTotalWrittenOff()
    {
        return $this->container['totalWrittenOff'];
    }

    /**
     * Sets totalWrittenOff
     *
     * @param int $totalWrittenOff totalWrittenOff
     *
     * @return $this
     */
    public function setTotalWrittenOff($totalWrittenOff)
    {
        $this->container['totalWrittenOff'] = $totalWrittenOff;

        return $this;
    }

    /**
     * Gets totalRepaymentExpected
     *
     * @return double
     */
    public function getTotalRepaymentExpected()
    {
        return $this->container['totalRepaymentExpected'];
    }

    /**
     * Sets totalRepaymentExpected
     *
     * @param double $totalRepaymentExpected totalRepaymentExpected
     *
     * @return $this
     */
    public function setTotalRepaymentExpected($totalRepaymentExpected)
    {
        $this->container['totalRepaymentExpected'] = $totalRepaymentExpected;

        return $this;
    }

    /**
     * Gets totalRepayment
     *
     * @return int
     */
    public function getTotalRepayment()
    {
        return $this->container['totalRepayment'];
    }

    /**
     * Sets totalRepayment
     *
     * @param int $totalRepayment totalRepayment
     *
     * @return $this
     */
    public function setTotalRepayment($totalRepayment)
    {
        $this->container['totalRepayment'] = $totalRepayment;

        return $this;
    }

    /**
     * Gets totalOutstanding
     *
     * @return int
     */
    public function getTotalOutstanding()
    {
        return $this->container['totalOutstanding'];
    }

    /**
     * Sets totalOutstanding
     *
     * @param int $totalOutstanding totalOutstanding
     *
     * @return $this
     */
    public function setTotalOutstanding($totalOutstanding)
    {
        $this->container['totalOutstanding'] = $totalOutstanding;

        return $this;
    }

    /**
     * Gets periods
     *
     * @return \Frengky\Fineract\Model\PostLoansRepaymentSchedulePeriods[]
     */
    public function getPeriods()
    {
        return $this->container['periods'];
    }

    /**
     * Sets periods
     *
     * @param \Frengky\Fineract\Model\PostLoansRepaymentSchedulePeriods[] $periods periods
     *
     * @return $this
     */
    public function setPeriods($periods)
    {
        $this->container['periods'] = $periods;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
