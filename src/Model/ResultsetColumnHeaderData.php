<?php
/**
 * ResultsetColumnHeaderData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * ResultsetColumnHeaderData Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResultsetColumnHeaderData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResultsetColumnHeaderData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'columnName' => 'string',
'columnType' => 'string',
'columnLength' => 'int',
'columnDisplayType' => 'string',
'columnCode' => 'string',
'string' => 'bool',
'dateDisplayType' => 'bool',
'dateTimeDisplayType' => 'bool',
'integerDisplayType' => 'bool',
'decimalDisplayType' => 'bool',
'booleanDisplayType' => 'bool',
'codeValueDisplayType' => 'bool',
'codeLookupDisplayType' => 'bool',
'optional' => 'bool',
'mandatory' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'columnName' => null,
'columnType' => null,
'columnLength' => 'int64',
'columnDisplayType' => null,
'columnCode' => null,
'string' => null,
'dateDisplayType' => null,
'dateTimeDisplayType' => null,
'integerDisplayType' => null,
'decimalDisplayType' => null,
'booleanDisplayType' => null,
'codeValueDisplayType' => null,
'codeLookupDisplayType' => null,
'optional' => null,
'mandatory' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'columnName' => 'columnName',
'columnType' => 'columnType',
'columnLength' => 'columnLength',
'columnDisplayType' => 'columnDisplayType',
'columnCode' => 'columnCode',
'string' => 'string',
'dateDisplayType' => 'dateDisplayType',
'dateTimeDisplayType' => 'dateTimeDisplayType',
'integerDisplayType' => 'integerDisplayType',
'decimalDisplayType' => 'decimalDisplayType',
'booleanDisplayType' => 'booleanDisplayType',
'codeValueDisplayType' => 'codeValueDisplayType',
'codeLookupDisplayType' => 'codeLookupDisplayType',
'optional' => 'optional',
'mandatory' => 'mandatory'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'columnName' => 'setColumnName',
'columnType' => 'setColumnType',
'columnLength' => 'setColumnLength',
'columnDisplayType' => 'setColumnDisplayType',
'columnCode' => 'setColumnCode',
'string' => 'setString',
'dateDisplayType' => 'setDateDisplayType',
'dateTimeDisplayType' => 'setDateTimeDisplayType',
'integerDisplayType' => 'setIntegerDisplayType',
'decimalDisplayType' => 'setDecimalDisplayType',
'booleanDisplayType' => 'setBooleanDisplayType',
'codeValueDisplayType' => 'setCodeValueDisplayType',
'codeLookupDisplayType' => 'setCodeLookupDisplayType',
'optional' => 'setOptional',
'mandatory' => 'setMandatory'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'columnName' => 'getColumnName',
'columnType' => 'getColumnType',
'columnLength' => 'getColumnLength',
'columnDisplayType' => 'getColumnDisplayType',
'columnCode' => 'getColumnCode',
'string' => 'getString',
'dateDisplayType' => 'getDateDisplayType',
'dateTimeDisplayType' => 'getDateTimeDisplayType',
'integerDisplayType' => 'getIntegerDisplayType',
'decimalDisplayType' => 'getDecimalDisplayType',
'booleanDisplayType' => 'getBooleanDisplayType',
'codeValueDisplayType' => 'getCodeValueDisplayType',
'codeLookupDisplayType' => 'getCodeLookupDisplayType',
'optional' => 'getOptional',
'mandatory' => 'getMandatory'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['columnName'] = isset($data['columnName']) ? $data['columnName'] : null;
        $this->container['columnType'] = isset($data['columnType']) ? $data['columnType'] : null;
        $this->container['columnLength'] = isset($data['columnLength']) ? $data['columnLength'] : null;
        $this->container['columnDisplayType'] = isset($data['columnDisplayType']) ? $data['columnDisplayType'] : null;
        $this->container['columnCode'] = isset($data['columnCode']) ? $data['columnCode'] : null;
        $this->container['string'] = isset($data['string']) ? $data['string'] : null;
        $this->container['dateDisplayType'] = isset($data['dateDisplayType']) ? $data['dateDisplayType'] : null;
        $this->container['dateTimeDisplayType'] = isset($data['dateTimeDisplayType']) ? $data['dateTimeDisplayType'] : null;
        $this->container['integerDisplayType'] = isset($data['integerDisplayType']) ? $data['integerDisplayType'] : null;
        $this->container['decimalDisplayType'] = isset($data['decimalDisplayType']) ? $data['decimalDisplayType'] : null;
        $this->container['booleanDisplayType'] = isset($data['booleanDisplayType']) ? $data['booleanDisplayType'] : null;
        $this->container['codeValueDisplayType'] = isset($data['codeValueDisplayType']) ? $data['codeValueDisplayType'] : null;
        $this->container['codeLookupDisplayType'] = isset($data['codeLookupDisplayType']) ? $data['codeLookupDisplayType'] : null;
        $this->container['optional'] = isset($data['optional']) ? $data['optional'] : null;
        $this->container['mandatory'] = isset($data['mandatory']) ? $data['mandatory'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets columnName
     *
     * @return string
     */
    public function getColumnName()
    {
        return $this->container['columnName'];
    }

    /**
     * Sets columnName
     *
     * @param string $columnName columnName
     *
     * @return $this
     */
    public function setColumnName($columnName)
    {
        $this->container['columnName'] = $columnName;

        return $this;
    }

    /**
     * Gets columnType
     *
     * @return string
     */
    public function getColumnType()
    {
        return $this->container['columnType'];
    }

    /**
     * Sets columnType
     *
     * @param string $columnType columnType
     *
     * @return $this
     */
    public function setColumnType($columnType)
    {
        $this->container['columnType'] = $columnType;

        return $this;
    }

    /**
     * Gets columnLength
     *
     * @return int
     */
    public function getColumnLength()
    {
        return $this->container['columnLength'];
    }

    /**
     * Sets columnLength
     *
     * @param int $columnLength columnLength
     *
     * @return $this
     */
    public function setColumnLength($columnLength)
    {
        $this->container['columnLength'] = $columnLength;

        return $this;
    }

    /**
     * Gets columnDisplayType
     *
     * @return string
     */
    public function getColumnDisplayType()
    {
        return $this->container['columnDisplayType'];
    }

    /**
     * Sets columnDisplayType
     *
     * @param string $columnDisplayType columnDisplayType
     *
     * @return $this
     */
    public function setColumnDisplayType($columnDisplayType)
    {
        $this->container['columnDisplayType'] = $columnDisplayType;

        return $this;
    }

    /**
     * Gets columnCode
     *
     * @return string
     */
    public function getColumnCode()
    {
        return $this->container['columnCode'];
    }

    /**
     * Sets columnCode
     *
     * @param string $columnCode columnCode
     *
     * @return $this
     */
    public function setColumnCode($columnCode)
    {
        $this->container['columnCode'] = $columnCode;

        return $this;
    }

    /**
     * Gets string
     *
     * @return bool
     */
    public function getString()
    {
        return $this->container['string'];
    }

    /**
     * Sets string
     *
     * @param bool $string string
     *
     * @return $this
     */
    public function setString($string)
    {
        $this->container['string'] = $string;

        return $this;
    }

    /**
     * Gets dateDisplayType
     *
     * @return bool
     */
    public function getDateDisplayType()
    {
        return $this->container['dateDisplayType'];
    }

    /**
     * Sets dateDisplayType
     *
     * @param bool $dateDisplayType dateDisplayType
     *
     * @return $this
     */
    public function setDateDisplayType($dateDisplayType)
    {
        $this->container['dateDisplayType'] = $dateDisplayType;

        return $this;
    }

    /**
     * Gets dateTimeDisplayType
     *
     * @return bool
     */
    public function getDateTimeDisplayType()
    {
        return $this->container['dateTimeDisplayType'];
    }

    /**
     * Sets dateTimeDisplayType
     *
     * @param bool $dateTimeDisplayType dateTimeDisplayType
     *
     * @return $this
     */
    public function setDateTimeDisplayType($dateTimeDisplayType)
    {
        $this->container['dateTimeDisplayType'] = $dateTimeDisplayType;

        return $this;
    }

    /**
     * Gets integerDisplayType
     *
     * @return bool
     */
    public function getIntegerDisplayType()
    {
        return $this->container['integerDisplayType'];
    }

    /**
     * Sets integerDisplayType
     *
     * @param bool $integerDisplayType integerDisplayType
     *
     * @return $this
     */
    public function setIntegerDisplayType($integerDisplayType)
    {
        $this->container['integerDisplayType'] = $integerDisplayType;

        return $this;
    }

    /**
     * Gets decimalDisplayType
     *
     * @return bool
     */
    public function getDecimalDisplayType()
    {
        return $this->container['decimalDisplayType'];
    }

    /**
     * Sets decimalDisplayType
     *
     * @param bool $decimalDisplayType decimalDisplayType
     *
     * @return $this
     */
    public function setDecimalDisplayType($decimalDisplayType)
    {
        $this->container['decimalDisplayType'] = $decimalDisplayType;

        return $this;
    }

    /**
     * Gets booleanDisplayType
     *
     * @return bool
     */
    public function getBooleanDisplayType()
    {
        return $this->container['booleanDisplayType'];
    }

    /**
     * Sets booleanDisplayType
     *
     * @param bool $booleanDisplayType booleanDisplayType
     *
     * @return $this
     */
    public function setBooleanDisplayType($booleanDisplayType)
    {
        $this->container['booleanDisplayType'] = $booleanDisplayType;

        return $this;
    }

    /**
     * Gets codeValueDisplayType
     *
     * @return bool
     */
    public function getCodeValueDisplayType()
    {
        return $this->container['codeValueDisplayType'];
    }

    /**
     * Sets codeValueDisplayType
     *
     * @param bool $codeValueDisplayType codeValueDisplayType
     *
     * @return $this
     */
    public function setCodeValueDisplayType($codeValueDisplayType)
    {
        $this->container['codeValueDisplayType'] = $codeValueDisplayType;

        return $this;
    }

    /**
     * Gets codeLookupDisplayType
     *
     * @return bool
     */
    public function getCodeLookupDisplayType()
    {
        return $this->container['codeLookupDisplayType'];
    }

    /**
     * Sets codeLookupDisplayType
     *
     * @param bool $codeLookupDisplayType codeLookupDisplayType
     *
     * @return $this
     */
    public function setCodeLookupDisplayType($codeLookupDisplayType)
    {
        $this->container['codeLookupDisplayType'] = $codeLookupDisplayType;

        return $this;
    }

    /**
     * Gets optional
     *
     * @return bool
     */
    public function getOptional()
    {
        return $this->container['optional'];
    }

    /**
     * Sets optional
     *
     * @param bool $optional optional
     *
     * @return $this
     */
    public function setOptional($optional)
    {
        $this->container['optional'] = $optional;

        return $this;
    }

    /**
     * Gets mandatory
     *
     * @return bool
     */
    public function getMandatory()
    {
        return $this->container['mandatory'];
    }

    /**
     * Sets mandatory
     *
     * @param bool $mandatory mandatory
     *
     * @return $this
     */
    public function setMandatory($mandatory)
    {
        $this->container['mandatory'] = $mandatory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
