<?php
/**
 * MonthDay
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * MonthDay Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MonthDay implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MonthDay';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dayOfMonth' => 'int',
'monthOfYear' => 'int',
'fieldTypes' => '\Frengky\Fineract\Model\DateTimeFieldType[]',
'chronology' => '\Frengky\Fineract\Model\Chronology',
'values' => 'int[]',
'fields' => '\Frengky\Fineract\Model\DateTimeField[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dayOfMonth' => 'int32',
'monthOfYear' => 'int32',
'fieldTypes' => null,
'chronology' => null,
'values' => 'int32',
'fields' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dayOfMonth' => 'dayOfMonth',
'monthOfYear' => 'monthOfYear',
'fieldTypes' => 'fieldTypes',
'chronology' => 'chronology',
'values' => 'values',
'fields' => 'fields'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dayOfMonth' => 'setDayOfMonth',
'monthOfYear' => 'setMonthOfYear',
'fieldTypes' => 'setFieldTypes',
'chronology' => 'setChronology',
'values' => 'setValues',
'fields' => 'setFields'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dayOfMonth' => 'getDayOfMonth',
'monthOfYear' => 'getMonthOfYear',
'fieldTypes' => 'getFieldTypes',
'chronology' => 'getChronology',
'values' => 'getValues',
'fields' => 'getFields'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dayOfMonth'] = isset($data['dayOfMonth']) ? $data['dayOfMonth'] : null;
        $this->container['monthOfYear'] = isset($data['monthOfYear']) ? $data['monthOfYear'] : null;
        $this->container['fieldTypes'] = isset($data['fieldTypes']) ? $data['fieldTypes'] : null;
        $this->container['chronology'] = isset($data['chronology']) ? $data['chronology'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dayOfMonth
     *
     * @return int
     */
    public function getDayOfMonth()
    {
        return $this->container['dayOfMonth'];
    }

    /**
     * Sets dayOfMonth
     *
     * @param int $dayOfMonth dayOfMonth
     *
     * @return $this
     */
    public function setDayOfMonth($dayOfMonth)
    {
        $this->container['dayOfMonth'] = $dayOfMonth;

        return $this;
    }

    /**
     * Gets monthOfYear
     *
     * @return int
     */
    public function getMonthOfYear()
    {
        return $this->container['monthOfYear'];
    }

    /**
     * Sets monthOfYear
     *
     * @param int $monthOfYear monthOfYear
     *
     * @return $this
     */
    public function setMonthOfYear($monthOfYear)
    {
        $this->container['monthOfYear'] = $monthOfYear;

        return $this;
    }

    /**
     * Gets fieldTypes
     *
     * @return \Frengky\Fineract\Model\DateTimeFieldType[]
     */
    public function getFieldTypes()
    {
        return $this->container['fieldTypes'];
    }

    /**
     * Sets fieldTypes
     *
     * @param \Frengky\Fineract\Model\DateTimeFieldType[] $fieldTypes fieldTypes
     *
     * @return $this
     */
    public function setFieldTypes($fieldTypes)
    {
        $this->container['fieldTypes'] = $fieldTypes;

        return $this;
    }

    /**
     * Gets chronology
     *
     * @return \Frengky\Fineract\Model\Chronology
     */
    public function getChronology()
    {
        return $this->container['chronology'];
    }

    /**
     * Sets chronology
     *
     * @param \Frengky\Fineract\Model\Chronology $chronology chronology
     *
     * @return $this
     */
    public function setChronology($chronology)
    {
        $this->container['chronology'] = $chronology;

        return $this;
    }

    /**
     * Gets values
     *
     * @return int[]
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param int[] $values values
     *
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \Frengky\Fineract\Model\DateTimeField[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \Frengky\Fineract\Model\DateTimeField[] $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
