<?php
/**
 * GetGLAccountsTemplateResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetGLAccountsTemplateResponse Class Doc Comment
 *
 * @category Class
 * @description GetGLAccountsTemplateResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetGLAccountsTemplateResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetGLAccountsTemplateResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'disabled' => 'bool',
'manualEntriesAllowed' => 'bool',
'type' => '\Frengky\Fineract\Model\EnumOptionData',
'usage' => '\Frengky\Fineract\Model\EnumOptionData',
'accountTypeOptions' => '\Frengky\Fineract\Model\EnumOptionData[]',
'usageOptions' => '\Frengky\Fineract\Model\EnumOptionData[]',
'assetHeaderAccountOptions' => '\Frengky\Fineract\Model\GLAccountData[]',
'liabilityHeaderAccountOptions' => '\Frengky\Fineract\Model\GLAccountData[]',
'equityHeaderAccountOptions' => '\Frengky\Fineract\Model\GLAccountData[]',
'expenseHeaderAccountOptions' => '\Frengky\Fineract\Model\GLAccountData[]',
'allowedAssetsTagOptions' => '\Frengky\Fineract\Model\CodeValueData[]',
'allowedLiabilitiesTagOptions' => '\Frengky\Fineract\Model\CodeValueData[]',
'allowedEquityTagOptions' => '\Frengky\Fineract\Model\CodeValueData[]',
'allowedIncomeTagOptions' => '\Frengky\Fineract\Model\CodeValueData[]',
'allowedExpensesTagOptions' => '\Frengky\Fineract\Model\CodeValueData[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'disabled' => null,
'manualEntriesAllowed' => null,
'type' => null,
'usage' => null,
'accountTypeOptions' => null,
'usageOptions' => null,
'assetHeaderAccountOptions' => null,
'liabilityHeaderAccountOptions' => null,
'equityHeaderAccountOptions' => null,
'expenseHeaderAccountOptions' => null,
'allowedAssetsTagOptions' => null,
'allowedLiabilitiesTagOptions' => null,
'allowedEquityTagOptions' => null,
'allowedIncomeTagOptions' => null,
'allowedExpensesTagOptions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'disabled' => 'disabled',
'manualEntriesAllowed' => 'manualEntriesAllowed',
'type' => 'type',
'usage' => 'usage',
'accountTypeOptions' => 'accountTypeOptions',
'usageOptions' => 'usageOptions',
'assetHeaderAccountOptions' => 'assetHeaderAccountOptions',
'liabilityHeaderAccountOptions' => 'liabilityHeaderAccountOptions',
'equityHeaderAccountOptions' => 'equityHeaderAccountOptions',
'expenseHeaderAccountOptions' => 'expenseHeaderAccountOptions',
'allowedAssetsTagOptions' => 'allowedAssetsTagOptions',
'allowedLiabilitiesTagOptions' => 'allowedLiabilitiesTagOptions',
'allowedEquityTagOptions' => 'allowedEquityTagOptions',
'allowedIncomeTagOptions' => 'allowedIncomeTagOptions',
'allowedExpensesTagOptions' => 'allowedExpensesTagOptions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'disabled' => 'setDisabled',
'manualEntriesAllowed' => 'setManualEntriesAllowed',
'type' => 'setType',
'usage' => 'setUsage',
'accountTypeOptions' => 'setAccountTypeOptions',
'usageOptions' => 'setUsageOptions',
'assetHeaderAccountOptions' => 'setAssetHeaderAccountOptions',
'liabilityHeaderAccountOptions' => 'setLiabilityHeaderAccountOptions',
'equityHeaderAccountOptions' => 'setEquityHeaderAccountOptions',
'expenseHeaderAccountOptions' => 'setExpenseHeaderAccountOptions',
'allowedAssetsTagOptions' => 'setAllowedAssetsTagOptions',
'allowedLiabilitiesTagOptions' => 'setAllowedLiabilitiesTagOptions',
'allowedEquityTagOptions' => 'setAllowedEquityTagOptions',
'allowedIncomeTagOptions' => 'setAllowedIncomeTagOptions',
'allowedExpensesTagOptions' => 'setAllowedExpensesTagOptions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'disabled' => 'getDisabled',
'manualEntriesAllowed' => 'getManualEntriesAllowed',
'type' => 'getType',
'usage' => 'getUsage',
'accountTypeOptions' => 'getAccountTypeOptions',
'usageOptions' => 'getUsageOptions',
'assetHeaderAccountOptions' => 'getAssetHeaderAccountOptions',
'liabilityHeaderAccountOptions' => 'getLiabilityHeaderAccountOptions',
'equityHeaderAccountOptions' => 'getEquityHeaderAccountOptions',
'expenseHeaderAccountOptions' => 'getExpenseHeaderAccountOptions',
'allowedAssetsTagOptions' => 'getAllowedAssetsTagOptions',
'allowedLiabilitiesTagOptions' => 'getAllowedLiabilitiesTagOptions',
'allowedEquityTagOptions' => 'getAllowedEquityTagOptions',
'allowedIncomeTagOptions' => 'getAllowedIncomeTagOptions',
'allowedExpensesTagOptions' => 'getAllowedExpensesTagOptions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
        $this->container['manualEntriesAllowed'] = isset($data['manualEntriesAllowed']) ? $data['manualEntriesAllowed'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['usage'] = isset($data['usage']) ? $data['usage'] : null;
        $this->container['accountTypeOptions'] = isset($data['accountTypeOptions']) ? $data['accountTypeOptions'] : null;
        $this->container['usageOptions'] = isset($data['usageOptions']) ? $data['usageOptions'] : null;
        $this->container['assetHeaderAccountOptions'] = isset($data['assetHeaderAccountOptions']) ? $data['assetHeaderAccountOptions'] : null;
        $this->container['liabilityHeaderAccountOptions'] = isset($data['liabilityHeaderAccountOptions']) ? $data['liabilityHeaderAccountOptions'] : null;
        $this->container['equityHeaderAccountOptions'] = isset($data['equityHeaderAccountOptions']) ? $data['equityHeaderAccountOptions'] : null;
        $this->container['expenseHeaderAccountOptions'] = isset($data['expenseHeaderAccountOptions']) ? $data['expenseHeaderAccountOptions'] : null;
        $this->container['allowedAssetsTagOptions'] = isset($data['allowedAssetsTagOptions']) ? $data['allowedAssetsTagOptions'] : null;
        $this->container['allowedLiabilitiesTagOptions'] = isset($data['allowedLiabilitiesTagOptions']) ? $data['allowedLiabilitiesTagOptions'] : null;
        $this->container['allowedEquityTagOptions'] = isset($data['allowedEquityTagOptions']) ? $data['allowedEquityTagOptions'] : null;
        $this->container['allowedIncomeTagOptions'] = isset($data['allowedIncomeTagOptions']) ? $data['allowedIncomeTagOptions'] : null;
        $this->container['allowedExpensesTagOptions'] = isset($data['allowedExpensesTagOptions']) ? $data['allowedExpensesTagOptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets manualEntriesAllowed
     *
     * @return bool
     */
    public function getManualEntriesAllowed()
    {
        return $this->container['manualEntriesAllowed'];
    }

    /**
     * Sets manualEntriesAllowed
     *
     * @param bool $manualEntriesAllowed manualEntriesAllowed
     *
     * @return $this
     */
    public function setManualEntriesAllowed($manualEntriesAllowed)
    {
        $this->container['manualEntriesAllowed'] = $manualEntriesAllowed;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $usage usage
     *
     * @return $this
     */
    public function setUsage($usage)
    {
        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets accountTypeOptions
     *
     * @return \Frengky\Fineract\Model\EnumOptionData[]
     */
    public function getAccountTypeOptions()
    {
        return $this->container['accountTypeOptions'];
    }

    /**
     * Sets accountTypeOptions
     *
     * @param \Frengky\Fineract\Model\EnumOptionData[] $accountTypeOptions accountTypeOptions
     *
     * @return $this
     */
    public function setAccountTypeOptions($accountTypeOptions)
    {
        $this->container['accountTypeOptions'] = $accountTypeOptions;

        return $this;
    }

    /**
     * Gets usageOptions
     *
     * @return \Frengky\Fineract\Model\EnumOptionData[]
     */
    public function getUsageOptions()
    {
        return $this->container['usageOptions'];
    }

    /**
     * Sets usageOptions
     *
     * @param \Frengky\Fineract\Model\EnumOptionData[] $usageOptions usageOptions
     *
     * @return $this
     */
    public function setUsageOptions($usageOptions)
    {
        $this->container['usageOptions'] = $usageOptions;

        return $this;
    }

    /**
     * Gets assetHeaderAccountOptions
     *
     * @return \Frengky\Fineract\Model\GLAccountData[]
     */
    public function getAssetHeaderAccountOptions()
    {
        return $this->container['assetHeaderAccountOptions'];
    }

    /**
     * Sets assetHeaderAccountOptions
     *
     * @param \Frengky\Fineract\Model\GLAccountData[] $assetHeaderAccountOptions assetHeaderAccountOptions
     *
     * @return $this
     */
    public function setAssetHeaderAccountOptions($assetHeaderAccountOptions)
    {
        $this->container['assetHeaderAccountOptions'] = $assetHeaderAccountOptions;

        return $this;
    }

    /**
     * Gets liabilityHeaderAccountOptions
     *
     * @return \Frengky\Fineract\Model\GLAccountData[]
     */
    public function getLiabilityHeaderAccountOptions()
    {
        return $this->container['liabilityHeaderAccountOptions'];
    }

    /**
     * Sets liabilityHeaderAccountOptions
     *
     * @param \Frengky\Fineract\Model\GLAccountData[] $liabilityHeaderAccountOptions liabilityHeaderAccountOptions
     *
     * @return $this
     */
    public function setLiabilityHeaderAccountOptions($liabilityHeaderAccountOptions)
    {
        $this->container['liabilityHeaderAccountOptions'] = $liabilityHeaderAccountOptions;

        return $this;
    }

    /**
     * Gets equityHeaderAccountOptions
     *
     * @return \Frengky\Fineract\Model\GLAccountData[]
     */
    public function getEquityHeaderAccountOptions()
    {
        return $this->container['equityHeaderAccountOptions'];
    }

    /**
     * Sets equityHeaderAccountOptions
     *
     * @param \Frengky\Fineract\Model\GLAccountData[] $equityHeaderAccountOptions equityHeaderAccountOptions
     *
     * @return $this
     */
    public function setEquityHeaderAccountOptions($equityHeaderAccountOptions)
    {
        $this->container['equityHeaderAccountOptions'] = $equityHeaderAccountOptions;

        return $this;
    }

    /**
     * Gets expenseHeaderAccountOptions
     *
     * @return \Frengky\Fineract\Model\GLAccountData[]
     */
    public function getExpenseHeaderAccountOptions()
    {
        return $this->container['expenseHeaderAccountOptions'];
    }

    /**
     * Sets expenseHeaderAccountOptions
     *
     * @param \Frengky\Fineract\Model\GLAccountData[] $expenseHeaderAccountOptions expenseHeaderAccountOptions
     *
     * @return $this
     */
    public function setExpenseHeaderAccountOptions($expenseHeaderAccountOptions)
    {
        $this->container['expenseHeaderAccountOptions'] = $expenseHeaderAccountOptions;

        return $this;
    }

    /**
     * Gets allowedAssetsTagOptions
     *
     * @return \Frengky\Fineract\Model\CodeValueData[]
     */
    public function getAllowedAssetsTagOptions()
    {
        return $this->container['allowedAssetsTagOptions'];
    }

    /**
     * Sets allowedAssetsTagOptions
     *
     * @param \Frengky\Fineract\Model\CodeValueData[] $allowedAssetsTagOptions allowedAssetsTagOptions
     *
     * @return $this
     */
    public function setAllowedAssetsTagOptions($allowedAssetsTagOptions)
    {
        $this->container['allowedAssetsTagOptions'] = $allowedAssetsTagOptions;

        return $this;
    }

    /**
     * Gets allowedLiabilitiesTagOptions
     *
     * @return \Frengky\Fineract\Model\CodeValueData[]
     */
    public function getAllowedLiabilitiesTagOptions()
    {
        return $this->container['allowedLiabilitiesTagOptions'];
    }

    /**
     * Sets allowedLiabilitiesTagOptions
     *
     * @param \Frengky\Fineract\Model\CodeValueData[] $allowedLiabilitiesTagOptions allowedLiabilitiesTagOptions
     *
     * @return $this
     */
    public function setAllowedLiabilitiesTagOptions($allowedLiabilitiesTagOptions)
    {
        $this->container['allowedLiabilitiesTagOptions'] = $allowedLiabilitiesTagOptions;

        return $this;
    }

    /**
     * Gets allowedEquityTagOptions
     *
     * @return \Frengky\Fineract\Model\CodeValueData[]
     */
    public function getAllowedEquityTagOptions()
    {
        return $this->container['allowedEquityTagOptions'];
    }

    /**
     * Sets allowedEquityTagOptions
     *
     * @param \Frengky\Fineract\Model\CodeValueData[] $allowedEquityTagOptions allowedEquityTagOptions
     *
     * @return $this
     */
    public function setAllowedEquityTagOptions($allowedEquityTagOptions)
    {
        $this->container['allowedEquityTagOptions'] = $allowedEquityTagOptions;

        return $this;
    }

    /**
     * Gets allowedIncomeTagOptions
     *
     * @return \Frengky\Fineract\Model\CodeValueData[]
     */
    public function getAllowedIncomeTagOptions()
    {
        return $this->container['allowedIncomeTagOptions'];
    }

    /**
     * Sets allowedIncomeTagOptions
     *
     * @param \Frengky\Fineract\Model\CodeValueData[] $allowedIncomeTagOptions allowedIncomeTagOptions
     *
     * @return $this
     */
    public function setAllowedIncomeTagOptions($allowedIncomeTagOptions)
    {
        $this->container['allowedIncomeTagOptions'] = $allowedIncomeTagOptions;

        return $this;
    }

    /**
     * Gets allowedExpensesTagOptions
     *
     * @return \Frengky\Fineract\Model\CodeValueData[]
     */
    public function getAllowedExpensesTagOptions()
    {
        return $this->container['allowedExpensesTagOptions'];
    }

    /**
     * Sets allowedExpensesTagOptions
     *
     * @param \Frengky\Fineract\Model\CodeValueData[] $allowedExpensesTagOptions allowedExpensesTagOptions
     *
     * @return $this
     */
    public function setAllowedExpensesTagOptions($allowedExpensesTagOptions)
    {
        $this->container['allowedExpensesTagOptions'] = $allowedExpensesTagOptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
