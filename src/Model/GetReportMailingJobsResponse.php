<?php
/**
 * GetReportMailingJobsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetReportMailingJobsResponse Class Doc Comment
 *
 * @category Class
 * @description GetReportMailingJobsResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetReportMailingJobsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetReportMailingJobsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'description' => 'string',
'startDateTime' => '\DateTime',
'recurrence' => 'string',
'timeline' => '\Frengky\Fineract\Model\ReportMailingJobTimelineData',
'emailRecipients' => 'string',
'emailSubject' => 'string',
'emailMessage' => 'string',
'emailAttachmentFileFormat' => '\Frengky\Fineract\Model\EnumOptionData',
'stretchyReport' => '\Frengky\Fineract\Model\ReportData',
'stretchyReportParamMap' => 'string',
'nextRunDateTime' => '\DateTime',
'numberOfRuns' => 'int',
'isActive' => 'bool',
'runAsUserId' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'name' => null,
'description' => null,
'startDateTime' => 'date-time',
'recurrence' => null,
'timeline' => null,
'emailRecipients' => null,
'emailSubject' => null,
'emailMessage' => null,
'emailAttachmentFileFormat' => null,
'stretchyReport' => null,
'stretchyReportParamMap' => null,
'nextRunDateTime' => 'date-time',
'numberOfRuns' => 'int32',
'isActive' => null,
'runAsUserId' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'description' => 'description',
'startDateTime' => 'startDateTime',
'recurrence' => 'recurrence',
'timeline' => 'timeline',
'emailRecipients' => 'emailRecipients',
'emailSubject' => 'emailSubject',
'emailMessage' => 'emailMessage',
'emailAttachmentFileFormat' => 'emailAttachmentFileFormat',
'stretchyReport' => 'stretchyReport',
'stretchyReportParamMap' => 'stretchyReportParamMap',
'nextRunDateTime' => 'nextRunDateTime',
'numberOfRuns' => 'numberOfRuns',
'isActive' => 'isActive',
'runAsUserId' => 'runAsUserId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'description' => 'setDescription',
'startDateTime' => 'setStartDateTime',
'recurrence' => 'setRecurrence',
'timeline' => 'setTimeline',
'emailRecipients' => 'setEmailRecipients',
'emailSubject' => 'setEmailSubject',
'emailMessage' => 'setEmailMessage',
'emailAttachmentFileFormat' => 'setEmailAttachmentFileFormat',
'stretchyReport' => 'setStretchyReport',
'stretchyReportParamMap' => 'setStretchyReportParamMap',
'nextRunDateTime' => 'setNextRunDateTime',
'numberOfRuns' => 'setNumberOfRuns',
'isActive' => 'setIsActive',
'runAsUserId' => 'setRunAsUserId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'description' => 'getDescription',
'startDateTime' => 'getStartDateTime',
'recurrence' => 'getRecurrence',
'timeline' => 'getTimeline',
'emailRecipients' => 'getEmailRecipients',
'emailSubject' => 'getEmailSubject',
'emailMessage' => 'getEmailMessage',
'emailAttachmentFileFormat' => 'getEmailAttachmentFileFormat',
'stretchyReport' => 'getStretchyReport',
'stretchyReportParamMap' => 'getStretchyReportParamMap',
'nextRunDateTime' => 'getNextRunDateTime',
'numberOfRuns' => 'getNumberOfRuns',
'isActive' => 'getIsActive',
'runAsUserId' => 'getRunAsUserId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['startDateTime'] = isset($data['startDateTime']) ? $data['startDateTime'] : null;
        $this->container['recurrence'] = isset($data['recurrence']) ? $data['recurrence'] : null;
        $this->container['timeline'] = isset($data['timeline']) ? $data['timeline'] : null;
        $this->container['emailRecipients'] = isset($data['emailRecipients']) ? $data['emailRecipients'] : null;
        $this->container['emailSubject'] = isset($data['emailSubject']) ? $data['emailSubject'] : null;
        $this->container['emailMessage'] = isset($data['emailMessage']) ? $data['emailMessage'] : null;
        $this->container['emailAttachmentFileFormat'] = isset($data['emailAttachmentFileFormat']) ? $data['emailAttachmentFileFormat'] : null;
        $this->container['stretchyReport'] = isset($data['stretchyReport']) ? $data['stretchyReport'] : null;
        $this->container['stretchyReportParamMap'] = isset($data['stretchyReportParamMap']) ? $data['stretchyReportParamMap'] : null;
        $this->container['nextRunDateTime'] = isset($data['nextRunDateTime']) ? $data['nextRunDateTime'] : null;
        $this->container['numberOfRuns'] = isset($data['numberOfRuns']) ? $data['numberOfRuns'] : null;
        $this->container['isActive'] = isset($data['isActive']) ? $data['isActive'] : null;
        $this->container['runAsUserId'] = isset($data['runAsUserId']) ? $data['runAsUserId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets startDateTime
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['startDateTime'];
    }

    /**
     * Sets startDateTime
     *
     * @param \DateTime $startDateTime startDateTime
     *
     * @return $this
     */
    public function setStartDateTime($startDateTime)
    {
        $this->container['startDateTime'] = $startDateTime;

        return $this;
    }

    /**
     * Gets recurrence
     *
     * @return string
     */
    public function getRecurrence()
    {
        return $this->container['recurrence'];
    }

    /**
     * Sets recurrence
     *
     * @param string $recurrence recurrence
     *
     * @return $this
     */
    public function setRecurrence($recurrence)
    {
        $this->container['recurrence'] = $recurrence;

        return $this;
    }

    /**
     * Gets timeline
     *
     * @return \Frengky\Fineract\Model\ReportMailingJobTimelineData
     */
    public function getTimeline()
    {
        return $this->container['timeline'];
    }

    /**
     * Sets timeline
     *
     * @param \Frengky\Fineract\Model\ReportMailingJobTimelineData $timeline timeline
     *
     * @return $this
     */
    public function setTimeline($timeline)
    {
        $this->container['timeline'] = $timeline;

        return $this;
    }

    /**
     * Gets emailRecipients
     *
     * @return string
     */
    public function getEmailRecipients()
    {
        return $this->container['emailRecipients'];
    }

    /**
     * Sets emailRecipients
     *
     * @param string $emailRecipients emailRecipients
     *
     * @return $this
     */
    public function setEmailRecipients($emailRecipients)
    {
        $this->container['emailRecipients'] = $emailRecipients;

        return $this;
    }

    /**
     * Gets emailSubject
     *
     * @return string
     */
    public function getEmailSubject()
    {
        return $this->container['emailSubject'];
    }

    /**
     * Sets emailSubject
     *
     * @param string $emailSubject emailSubject
     *
     * @return $this
     */
    public function setEmailSubject($emailSubject)
    {
        $this->container['emailSubject'] = $emailSubject;

        return $this;
    }

    /**
     * Gets emailMessage
     *
     * @return string
     */
    public function getEmailMessage()
    {
        return $this->container['emailMessage'];
    }

    /**
     * Sets emailMessage
     *
     * @param string $emailMessage emailMessage
     *
     * @return $this
     */
    public function setEmailMessage($emailMessage)
    {
        $this->container['emailMessage'] = $emailMessage;

        return $this;
    }

    /**
     * Gets emailAttachmentFileFormat
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getEmailAttachmentFileFormat()
    {
        return $this->container['emailAttachmentFileFormat'];
    }

    /**
     * Sets emailAttachmentFileFormat
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $emailAttachmentFileFormat emailAttachmentFileFormat
     *
     * @return $this
     */
    public function setEmailAttachmentFileFormat($emailAttachmentFileFormat)
    {
        $this->container['emailAttachmentFileFormat'] = $emailAttachmentFileFormat;

        return $this;
    }

    /**
     * Gets stretchyReport
     *
     * @return \Frengky\Fineract\Model\ReportData
     */
    public function getStretchyReport()
    {
        return $this->container['stretchyReport'];
    }

    /**
     * Sets stretchyReport
     *
     * @param \Frengky\Fineract\Model\ReportData $stretchyReport stretchyReport
     *
     * @return $this
     */
    public function setStretchyReport($stretchyReport)
    {
        $this->container['stretchyReport'] = $stretchyReport;

        return $this;
    }

    /**
     * Gets stretchyReportParamMap
     *
     * @return string
     */
    public function getStretchyReportParamMap()
    {
        return $this->container['stretchyReportParamMap'];
    }

    /**
     * Sets stretchyReportParamMap
     *
     * @param string $stretchyReportParamMap stretchyReportParamMap
     *
     * @return $this
     */
    public function setStretchyReportParamMap($stretchyReportParamMap)
    {
        $this->container['stretchyReportParamMap'] = $stretchyReportParamMap;

        return $this;
    }

    /**
     * Gets nextRunDateTime
     *
     * @return \DateTime
     */
    public function getNextRunDateTime()
    {
        return $this->container['nextRunDateTime'];
    }

    /**
     * Sets nextRunDateTime
     *
     * @param \DateTime $nextRunDateTime nextRunDateTime
     *
     * @return $this
     */
    public function setNextRunDateTime($nextRunDateTime)
    {
        $this->container['nextRunDateTime'] = $nextRunDateTime;

        return $this;
    }

    /**
     * Gets numberOfRuns
     *
     * @return int
     */
    public function getNumberOfRuns()
    {
        return $this->container['numberOfRuns'];
    }

    /**
     * Sets numberOfRuns
     *
     * @param int $numberOfRuns numberOfRuns
     *
     * @return $this
     */
    public function setNumberOfRuns($numberOfRuns)
    {
        $this->container['numberOfRuns'] = $numberOfRuns;

        return $this;
    }

    /**
     * Gets isActive
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['isActive'];
    }

    /**
     * Sets isActive
     *
     * @param bool $isActive isActive
     *
     * @return $this
     */
    public function setIsActive($isActive)
    {
        $this->container['isActive'] = $isActive;

        return $this;
    }

    /**
     * Gets runAsUserId
     *
     * @return int
     */
    public function getRunAsUserId()
    {
        return $this->container['runAsUserId'];
    }

    /**
     * Sets runAsUserId
     *
     * @param int $runAsUserId runAsUserId
     *
     * @return $this
     */
    public function setRunAsUserId($runAsUserId)
    {
        $this->container['runAsUserId'] = $runAsUserId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
