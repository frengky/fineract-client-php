<?php
/**
 * GetGlClosureResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetGlClosureResponse Class Doc Comment
 *
 * @category Class
 * @description GetGLClosureResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetGlClosureResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetGlClosureResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'officeId' => 'int',
'officeName' => 'string',
'closingDate' => '\DateTime',
'deleted' => 'bool',
'createdDate' => '\DateTime',
'lastUpdatedDate' => '\DateTime',
'createdByUserId' => 'int',
'createdByUsername' => 'string',
'lastUpdatedByUserId' => 'int',
'lastUpdatedByUsername' => 'string',
'comments' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'officeId' => 'int64',
'officeName' => null,
'closingDate' => 'date',
'deleted' => null,
'createdDate' => 'date',
'lastUpdatedDate' => 'date',
'createdByUserId' => 'int64',
'createdByUsername' => null,
'lastUpdatedByUserId' => 'int64',
'lastUpdatedByUsername' => null,
'comments' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'officeId' => 'officeId',
'officeName' => 'officeName',
'closingDate' => 'closingDate',
'deleted' => 'deleted',
'createdDate' => 'createdDate',
'lastUpdatedDate' => 'lastUpdatedDate',
'createdByUserId' => 'createdByUserId',
'createdByUsername' => 'createdByUsername',
'lastUpdatedByUserId' => 'lastUpdatedByUserId',
'lastUpdatedByUsername' => 'lastUpdatedByUsername',
'comments' => 'comments'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'officeId' => 'setOfficeId',
'officeName' => 'setOfficeName',
'closingDate' => 'setClosingDate',
'deleted' => 'setDeleted',
'createdDate' => 'setCreatedDate',
'lastUpdatedDate' => 'setLastUpdatedDate',
'createdByUserId' => 'setCreatedByUserId',
'createdByUsername' => 'setCreatedByUsername',
'lastUpdatedByUserId' => 'setLastUpdatedByUserId',
'lastUpdatedByUsername' => 'setLastUpdatedByUsername',
'comments' => 'setComments'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'officeId' => 'getOfficeId',
'officeName' => 'getOfficeName',
'closingDate' => 'getClosingDate',
'deleted' => 'getDeleted',
'createdDate' => 'getCreatedDate',
'lastUpdatedDate' => 'getLastUpdatedDate',
'createdByUserId' => 'getCreatedByUserId',
'createdByUsername' => 'getCreatedByUsername',
'lastUpdatedByUserId' => 'getLastUpdatedByUserId',
'lastUpdatedByUsername' => 'getLastUpdatedByUsername',
'comments' => 'getComments'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['officeId'] = isset($data['officeId']) ? $data['officeId'] : null;
        $this->container['officeName'] = isset($data['officeName']) ? $data['officeName'] : null;
        $this->container['closingDate'] = isset($data['closingDate']) ? $data['closingDate'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['createdDate'] = isset($data['createdDate']) ? $data['createdDate'] : null;
        $this->container['lastUpdatedDate'] = isset($data['lastUpdatedDate']) ? $data['lastUpdatedDate'] : null;
        $this->container['createdByUserId'] = isset($data['createdByUserId']) ? $data['createdByUserId'] : null;
        $this->container['createdByUsername'] = isset($data['createdByUsername']) ? $data['createdByUsername'] : null;
        $this->container['lastUpdatedByUserId'] = isset($data['lastUpdatedByUserId']) ? $data['lastUpdatedByUserId'] : null;
        $this->container['lastUpdatedByUsername'] = isset($data['lastUpdatedByUsername']) ? $data['lastUpdatedByUsername'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets officeId
     *
     * @return int
     */
    public function getOfficeId()
    {
        return $this->container['officeId'];
    }

    /**
     * Sets officeId
     *
     * @param int $officeId officeId
     *
     * @return $this
     */
    public function setOfficeId($officeId)
    {
        $this->container['officeId'] = $officeId;

        return $this;
    }

    /**
     * Gets officeName
     *
     * @return string
     */
    public function getOfficeName()
    {
        return $this->container['officeName'];
    }

    /**
     * Sets officeName
     *
     * @param string $officeName officeName
     *
     * @return $this
     */
    public function setOfficeName($officeName)
    {
        $this->container['officeName'] = $officeName;

        return $this;
    }

    /**
     * Gets closingDate
     *
     * @return \DateTime
     */
    public function getClosingDate()
    {
        return $this->container['closingDate'];
    }

    /**
     * Sets closingDate
     *
     * @param \DateTime $closingDate closingDate
     *
     * @return $this
     */
    public function setClosingDate($closingDate)
    {
        $this->container['closingDate'] = $closingDate;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets createdDate
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['createdDate'];
    }

    /**
     * Sets createdDate
     *
     * @param \DateTime $createdDate createdDate
     *
     * @return $this
     */
    public function setCreatedDate($createdDate)
    {
        $this->container['createdDate'] = $createdDate;

        return $this;
    }

    /**
     * Gets lastUpdatedDate
     *
     * @return \DateTime
     */
    public function getLastUpdatedDate()
    {
        return $this->container['lastUpdatedDate'];
    }

    /**
     * Sets lastUpdatedDate
     *
     * @param \DateTime $lastUpdatedDate lastUpdatedDate
     *
     * @return $this
     */
    public function setLastUpdatedDate($lastUpdatedDate)
    {
        $this->container['lastUpdatedDate'] = $lastUpdatedDate;

        return $this;
    }

    /**
     * Gets createdByUserId
     *
     * @return int
     */
    public function getCreatedByUserId()
    {
        return $this->container['createdByUserId'];
    }

    /**
     * Sets createdByUserId
     *
     * @param int $createdByUserId createdByUserId
     *
     * @return $this
     */
    public function setCreatedByUserId($createdByUserId)
    {
        $this->container['createdByUserId'] = $createdByUserId;

        return $this;
    }

    /**
     * Gets createdByUsername
     *
     * @return string
     */
    public function getCreatedByUsername()
    {
        return $this->container['createdByUsername'];
    }

    /**
     * Sets createdByUsername
     *
     * @param string $createdByUsername createdByUsername
     *
     * @return $this
     */
    public function setCreatedByUsername($createdByUsername)
    {
        $this->container['createdByUsername'] = $createdByUsername;

        return $this;
    }

    /**
     * Gets lastUpdatedByUserId
     *
     * @return int
     */
    public function getLastUpdatedByUserId()
    {
        return $this->container['lastUpdatedByUserId'];
    }

    /**
     * Sets lastUpdatedByUserId
     *
     * @param int $lastUpdatedByUserId lastUpdatedByUserId
     *
     * @return $this
     */
    public function setLastUpdatedByUserId($lastUpdatedByUserId)
    {
        $this->container['lastUpdatedByUserId'] = $lastUpdatedByUserId;

        return $this;
    }

    /**
     * Gets lastUpdatedByUsername
     *
     * @return string
     */
    public function getLastUpdatedByUsername()
    {
        return $this->container['lastUpdatedByUsername'];
    }

    /**
     * Sets lastUpdatedByUsername
     *
     * @param string $lastUpdatedByUsername lastUpdatedByUsername
     *
     * @return $this
     */
    public function setLastUpdatedByUsername($lastUpdatedByUsername)
    {
        $this->container['lastUpdatedByUsername'] = $lastUpdatedByUsername;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
