<?php
/**
 * GetMakerCheckerResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetMakerCheckerResponse Class Doc Comment
 *
 * @category Class
 * @description GetMakerCheckerResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetMakerCheckerResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetMakerCheckerResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'actionName' => 'string',
'entityName' => 'string',
'resourceId' => 'int',
'subresourceId' => 'int',
'maker' => 'string',
'madeOnDate' => '\DateTime',
'checker' => 'string',
'checkedOnDate' => '\DateTime',
'processingResult' => 'string',
'commandAsJson' => 'string',
'officeName' => 'string',
'groupLevelName' => 'string',
'groupName' => 'string',
'clientName' => 'string',
'loanAccountNo' => 'string',
'savingsAccountNo' => 'string',
'clientId' => 'int',
'loanId' => 'int',
'url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'actionName' => null,
'entityName' => null,
'resourceId' => 'int64',
'subresourceId' => 'int64',
'maker' => null,
'madeOnDate' => 'date-time',
'checker' => null,
'checkedOnDate' => 'date-time',
'processingResult' => null,
'commandAsJson' => null,
'officeName' => null,
'groupLevelName' => null,
'groupName' => null,
'clientName' => null,
'loanAccountNo' => null,
'savingsAccountNo' => null,
'clientId' => 'int64',
'loanId' => 'int64',
'url' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'actionName' => 'actionName',
'entityName' => 'entityName',
'resourceId' => 'resourceId',
'subresourceId' => 'subresourceId',
'maker' => 'maker',
'madeOnDate' => 'madeOnDate',
'checker' => 'checker',
'checkedOnDate' => 'checkedOnDate',
'processingResult' => 'processingResult',
'commandAsJson' => 'commandAsJson',
'officeName' => 'officeName',
'groupLevelName' => 'groupLevelName',
'groupName' => 'groupName',
'clientName' => 'clientName',
'loanAccountNo' => 'loanAccountNo',
'savingsAccountNo' => 'savingsAccountNo',
'clientId' => 'clientId',
'loanId' => 'loanId',
'url' => 'url'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'actionName' => 'setActionName',
'entityName' => 'setEntityName',
'resourceId' => 'setResourceId',
'subresourceId' => 'setSubresourceId',
'maker' => 'setMaker',
'madeOnDate' => 'setMadeOnDate',
'checker' => 'setChecker',
'checkedOnDate' => 'setCheckedOnDate',
'processingResult' => 'setProcessingResult',
'commandAsJson' => 'setCommandAsJson',
'officeName' => 'setOfficeName',
'groupLevelName' => 'setGroupLevelName',
'groupName' => 'setGroupName',
'clientName' => 'setClientName',
'loanAccountNo' => 'setLoanAccountNo',
'savingsAccountNo' => 'setSavingsAccountNo',
'clientId' => 'setClientId',
'loanId' => 'setLoanId',
'url' => 'setUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'actionName' => 'getActionName',
'entityName' => 'getEntityName',
'resourceId' => 'getResourceId',
'subresourceId' => 'getSubresourceId',
'maker' => 'getMaker',
'madeOnDate' => 'getMadeOnDate',
'checker' => 'getChecker',
'checkedOnDate' => 'getCheckedOnDate',
'processingResult' => 'getProcessingResult',
'commandAsJson' => 'getCommandAsJson',
'officeName' => 'getOfficeName',
'groupLevelName' => 'getGroupLevelName',
'groupName' => 'getGroupName',
'clientName' => 'getClientName',
'loanAccountNo' => 'getLoanAccountNo',
'savingsAccountNo' => 'getSavingsAccountNo',
'clientId' => 'getClientId',
'loanId' => 'getLoanId',
'url' => 'getUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['actionName'] = isset($data['actionName']) ? $data['actionName'] : null;
        $this->container['entityName'] = isset($data['entityName']) ? $data['entityName'] : null;
        $this->container['resourceId'] = isset($data['resourceId']) ? $data['resourceId'] : null;
        $this->container['subresourceId'] = isset($data['subresourceId']) ? $data['subresourceId'] : null;
        $this->container['maker'] = isset($data['maker']) ? $data['maker'] : null;
        $this->container['madeOnDate'] = isset($data['madeOnDate']) ? $data['madeOnDate'] : null;
        $this->container['checker'] = isset($data['checker']) ? $data['checker'] : null;
        $this->container['checkedOnDate'] = isset($data['checkedOnDate']) ? $data['checkedOnDate'] : null;
        $this->container['processingResult'] = isset($data['processingResult']) ? $data['processingResult'] : null;
        $this->container['commandAsJson'] = isset($data['commandAsJson']) ? $data['commandAsJson'] : null;
        $this->container['officeName'] = isset($data['officeName']) ? $data['officeName'] : null;
        $this->container['groupLevelName'] = isset($data['groupLevelName']) ? $data['groupLevelName'] : null;
        $this->container['groupName'] = isset($data['groupName']) ? $data['groupName'] : null;
        $this->container['clientName'] = isset($data['clientName']) ? $data['clientName'] : null;
        $this->container['loanAccountNo'] = isset($data['loanAccountNo']) ? $data['loanAccountNo'] : null;
        $this->container['savingsAccountNo'] = isset($data['savingsAccountNo']) ? $data['savingsAccountNo'] : null;
        $this->container['clientId'] = isset($data['clientId']) ? $data['clientId'] : null;
        $this->container['loanId'] = isset($data['loanId']) ? $data['loanId'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets actionName
     *
     * @return string
     */
    public function getActionName()
    {
        return $this->container['actionName'];
    }

    /**
     * Sets actionName
     *
     * @param string $actionName actionName
     *
     * @return $this
     */
    public function setActionName($actionName)
    {
        $this->container['actionName'] = $actionName;

        return $this;
    }

    /**
     * Gets entityName
     *
     * @return string
     */
    public function getEntityName()
    {
        return $this->container['entityName'];
    }

    /**
     * Sets entityName
     *
     * @param string $entityName entityName
     *
     * @return $this
     */
    public function setEntityName($entityName)
    {
        $this->container['entityName'] = $entityName;

        return $this;
    }

    /**
     * Gets resourceId
     *
     * @return int
     */
    public function getResourceId()
    {
        return $this->container['resourceId'];
    }

    /**
     * Sets resourceId
     *
     * @param int $resourceId resourceId
     *
     * @return $this
     */
    public function setResourceId($resourceId)
    {
        $this->container['resourceId'] = $resourceId;

        return $this;
    }

    /**
     * Gets subresourceId
     *
     * @return int
     */
    public function getSubresourceId()
    {
        return $this->container['subresourceId'];
    }

    /**
     * Sets subresourceId
     *
     * @param int $subresourceId subresourceId
     *
     * @return $this
     */
    public function setSubresourceId($subresourceId)
    {
        $this->container['subresourceId'] = $subresourceId;

        return $this;
    }

    /**
     * Gets maker
     *
     * @return string
     */
    public function getMaker()
    {
        return $this->container['maker'];
    }

    /**
     * Sets maker
     *
     * @param string $maker maker
     *
     * @return $this
     */
    public function setMaker($maker)
    {
        $this->container['maker'] = $maker;

        return $this;
    }

    /**
     * Gets madeOnDate
     *
     * @return \DateTime
     */
    public function getMadeOnDate()
    {
        return $this->container['madeOnDate'];
    }

    /**
     * Sets madeOnDate
     *
     * @param \DateTime $madeOnDate madeOnDate
     *
     * @return $this
     */
    public function setMadeOnDate($madeOnDate)
    {
        $this->container['madeOnDate'] = $madeOnDate;

        return $this;
    }

    /**
     * Gets checker
     *
     * @return string
     */
    public function getChecker()
    {
        return $this->container['checker'];
    }

    /**
     * Sets checker
     *
     * @param string $checker checker
     *
     * @return $this
     */
    public function setChecker($checker)
    {
        $this->container['checker'] = $checker;

        return $this;
    }

    /**
     * Gets checkedOnDate
     *
     * @return \DateTime
     */
    public function getCheckedOnDate()
    {
        return $this->container['checkedOnDate'];
    }

    /**
     * Sets checkedOnDate
     *
     * @param \DateTime $checkedOnDate checkedOnDate
     *
     * @return $this
     */
    public function setCheckedOnDate($checkedOnDate)
    {
        $this->container['checkedOnDate'] = $checkedOnDate;

        return $this;
    }

    /**
     * Gets processingResult
     *
     * @return string
     */
    public function getProcessingResult()
    {
        return $this->container['processingResult'];
    }

    /**
     * Sets processingResult
     *
     * @param string $processingResult processingResult
     *
     * @return $this
     */
    public function setProcessingResult($processingResult)
    {
        $this->container['processingResult'] = $processingResult;

        return $this;
    }

    /**
     * Gets commandAsJson
     *
     * @return string
     */
    public function getCommandAsJson()
    {
        return $this->container['commandAsJson'];
    }

    /**
     * Sets commandAsJson
     *
     * @param string $commandAsJson commandAsJson
     *
     * @return $this
     */
    public function setCommandAsJson($commandAsJson)
    {
        $this->container['commandAsJson'] = $commandAsJson;

        return $this;
    }

    /**
     * Gets officeName
     *
     * @return string
     */
    public function getOfficeName()
    {
        return $this->container['officeName'];
    }

    /**
     * Sets officeName
     *
     * @param string $officeName officeName
     *
     * @return $this
     */
    public function setOfficeName($officeName)
    {
        $this->container['officeName'] = $officeName;

        return $this;
    }

    /**
     * Gets groupLevelName
     *
     * @return string
     */
    public function getGroupLevelName()
    {
        return $this->container['groupLevelName'];
    }

    /**
     * Sets groupLevelName
     *
     * @param string $groupLevelName groupLevelName
     *
     * @return $this
     */
    public function setGroupLevelName($groupLevelName)
    {
        $this->container['groupLevelName'] = $groupLevelName;

        return $this;
    }

    /**
     * Gets groupName
     *
     * @return string
     */
    public function getGroupName()
    {
        return $this->container['groupName'];
    }

    /**
     * Sets groupName
     *
     * @param string $groupName groupName
     *
     * @return $this
     */
    public function setGroupName($groupName)
    {
        $this->container['groupName'] = $groupName;

        return $this;
    }

    /**
     * Gets clientName
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['clientName'];
    }

    /**
     * Sets clientName
     *
     * @param string $clientName clientName
     *
     * @return $this
     */
    public function setClientName($clientName)
    {
        $this->container['clientName'] = $clientName;

        return $this;
    }

    /**
     * Gets loanAccountNo
     *
     * @return string
     */
    public function getLoanAccountNo()
    {
        return $this->container['loanAccountNo'];
    }

    /**
     * Sets loanAccountNo
     *
     * @param string $loanAccountNo loanAccountNo
     *
     * @return $this
     */
    public function setLoanAccountNo($loanAccountNo)
    {
        $this->container['loanAccountNo'] = $loanAccountNo;

        return $this;
    }

    /**
     * Gets savingsAccountNo
     *
     * @return string
     */
    public function getSavingsAccountNo()
    {
        return $this->container['savingsAccountNo'];
    }

    /**
     * Sets savingsAccountNo
     *
     * @param string $savingsAccountNo savingsAccountNo
     *
     * @return $this
     */
    public function setSavingsAccountNo($savingsAccountNo)
    {
        $this->container['savingsAccountNo'] = $savingsAccountNo;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param int $clientId clientId
     *
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets loanId
     *
     * @return int
     */
    public function getLoanId()
    {
        return $this->container['loanId'];
    }

    /**
     * Sets loanId
     *
     * @param int $loanId loanId
     *
     * @return $this
     */
    public function setLoanId($loanId)
    {
        $this->container['loanId'] = $loanId;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
