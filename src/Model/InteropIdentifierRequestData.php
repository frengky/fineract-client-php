<?php
/**
 * InteropIdentifierRequestData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * InteropIdentifierRequestData Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InteropIdentifierRequestData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InteropIdentifierRequestData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'idType' => 'string',
'idValue' => 'string',
'subIdOrType' => 'string',
'accountId' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'idType' => null,
'idValue' => null,
'subIdOrType' => null,
'accountId' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'idType' => 'idType',
'idValue' => 'idValue',
'subIdOrType' => 'subIdOrType',
'accountId' => 'accountId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'idType' => 'setIdType',
'idValue' => 'setIdValue',
'subIdOrType' => 'setSubIdOrType',
'accountId' => 'setAccountId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'idType' => 'getIdType',
'idValue' => 'getIdValue',
'subIdOrType' => 'getSubIdOrType',
'accountId' => 'getAccountId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ID_TYPE_MSISDN = 'MSISDN';
const ID_TYPE_EMAIL = 'EMAIL';
const ID_TYPE_PERSONAL_ID = 'PERSONAL_ID';
const ID_TYPE_BUSINESS = 'BUSINESS';
const ID_TYPE_DEVICE = 'DEVICE';
const ID_TYPE_ACCOUNT_ID = 'ACCOUNT_ID';
const ID_TYPE_IBAN = 'IBAN';
const ID_TYPE_ALIAS = 'ALIAS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIdTypeAllowableValues()
    {
        return [
            self::ID_TYPE_MSISDN,
self::ID_TYPE_EMAIL,
self::ID_TYPE_PERSONAL_ID,
self::ID_TYPE_BUSINESS,
self::ID_TYPE_DEVICE,
self::ID_TYPE_ACCOUNT_ID,
self::ID_TYPE_IBAN,
self::ID_TYPE_ALIAS,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['idType'] = isset($data['idType']) ? $data['idType'] : null;
        $this->container['idValue'] = isset($data['idValue']) ? $data['idValue'] : null;
        $this->container['subIdOrType'] = isset($data['subIdOrType']) ? $data['subIdOrType'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['idType'] === null) {
            $invalidProperties[] = "'idType' can't be null";
        }
        $allowedValues = $this->getIdTypeAllowableValues();
        if (!is_null($this->container['idType']) && !in_array($this->container['idType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'idType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['idValue'] === null) {
            $invalidProperties[] = "'idValue' can't be null";
        }
        if ($this->container['accountId'] === null) {
            $invalidProperties[] = "'accountId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets idType
     *
     * @return string
     */
    public function getIdType()
    {
        return $this->container['idType'];
    }

    /**
     * Sets idType
     *
     * @param string $idType idType
     *
     * @return $this
     */
    public function setIdType($idType)
    {
        $allowedValues = $this->getIdTypeAllowableValues();
        if (!in_array($idType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'idType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['idType'] = $idType;

        return $this;
    }

    /**
     * Gets idValue
     *
     * @return string
     */
    public function getIdValue()
    {
        return $this->container['idValue'];
    }

    /**
     * Sets idValue
     *
     * @param string $idValue idValue
     *
     * @return $this
     */
    public function setIdValue($idValue)
    {
        $this->container['idValue'] = $idValue;

        return $this;
    }

    /**
     * Gets subIdOrType
     *
     * @return string
     */
    public function getSubIdOrType()
    {
        return $this->container['subIdOrType'];
    }

    /**
     * Sets subIdOrType
     *
     * @param string $subIdOrType subIdOrType
     *
     * @return $this
     */
    public function setSubIdOrType($subIdOrType)
    {
        $this->container['subIdOrType'] = $subIdOrType;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
