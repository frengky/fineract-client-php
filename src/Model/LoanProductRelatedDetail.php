<?php
/**
 * LoanProductRelatedDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * LoanProductRelatedDetail Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoanProductRelatedDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoanProductRelatedDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency' => '\Frengky\Fineract\Model\MonetaryCurrency',
'principal' => '\Frengky\Fineract\Model\Money',
'nominalInterestRatePerPeriod' => 'float',
'interestPeriodFrequencyType' => 'string',
'annualNominalInterestRate' => 'float',
'interestMethod' => 'string',
'interestCalculationPeriodMethod' => 'string',
'allowPartialPeriodInterestCalcualtion' => 'bool',
'repayEvery' => 'int',
'repaymentPeriodFrequencyType' => 'string',
'numberOfRepayments' => 'int',
'graceOnPrincipalPayment' => 'int',
'graceOnInterestPayment' => 'int',
'amortizationMethod' => 'string',
'inArrearsTolerance' => '\Frengky\Fineract\Model\Money',
'graceOnArrearsAgeing' => 'int',
'interestRecalculationEnabled' => 'bool',
'equalAmortization' => 'bool',
'graceOnDueDate' => 'int',
'arrearsTolerance' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency' => null,
'principal' => null,
'nominalInterestRatePerPeriod' => null,
'interestPeriodFrequencyType' => null,
'annualNominalInterestRate' => null,
'interestMethod' => null,
'interestCalculationPeriodMethod' => null,
'allowPartialPeriodInterestCalcualtion' => null,
'repayEvery' => 'int32',
'repaymentPeriodFrequencyType' => null,
'numberOfRepayments' => 'int32',
'graceOnPrincipalPayment' => 'int32',
'graceOnInterestPayment' => 'int32',
'amortizationMethod' => null,
'inArrearsTolerance' => null,
'graceOnArrearsAgeing' => 'int32',
'interestRecalculationEnabled' => null,
'equalAmortization' => null,
'graceOnDueDate' => 'int32',
'arrearsTolerance' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
'principal' => 'principal',
'nominalInterestRatePerPeriod' => 'nominalInterestRatePerPeriod',
'interestPeriodFrequencyType' => 'interestPeriodFrequencyType',
'annualNominalInterestRate' => 'annualNominalInterestRate',
'interestMethod' => 'interestMethod',
'interestCalculationPeriodMethod' => 'interestCalculationPeriodMethod',
'allowPartialPeriodInterestCalcualtion' => 'allowPartialPeriodInterestCalcualtion',
'repayEvery' => 'repayEvery',
'repaymentPeriodFrequencyType' => 'repaymentPeriodFrequencyType',
'numberOfRepayments' => 'numberOfRepayments',
'graceOnPrincipalPayment' => 'graceOnPrincipalPayment',
'graceOnInterestPayment' => 'graceOnInterestPayment',
'amortizationMethod' => 'amortizationMethod',
'inArrearsTolerance' => 'inArrearsTolerance',
'graceOnArrearsAgeing' => 'graceOnArrearsAgeing',
'interestRecalculationEnabled' => 'interestRecalculationEnabled',
'equalAmortization' => 'equalAmortization',
'graceOnDueDate' => 'graceOnDueDate',
'arrearsTolerance' => 'arrearsTolerance'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
'principal' => 'setPrincipal',
'nominalInterestRatePerPeriod' => 'setNominalInterestRatePerPeriod',
'interestPeriodFrequencyType' => 'setInterestPeriodFrequencyType',
'annualNominalInterestRate' => 'setAnnualNominalInterestRate',
'interestMethod' => 'setInterestMethod',
'interestCalculationPeriodMethod' => 'setInterestCalculationPeriodMethod',
'allowPartialPeriodInterestCalcualtion' => 'setAllowPartialPeriodInterestCalcualtion',
'repayEvery' => 'setRepayEvery',
'repaymentPeriodFrequencyType' => 'setRepaymentPeriodFrequencyType',
'numberOfRepayments' => 'setNumberOfRepayments',
'graceOnPrincipalPayment' => 'setGraceOnPrincipalPayment',
'graceOnInterestPayment' => 'setGraceOnInterestPayment',
'amortizationMethod' => 'setAmortizationMethod',
'inArrearsTolerance' => 'setInArrearsTolerance',
'graceOnArrearsAgeing' => 'setGraceOnArrearsAgeing',
'interestRecalculationEnabled' => 'setInterestRecalculationEnabled',
'equalAmortization' => 'setEqualAmortization',
'graceOnDueDate' => 'setGraceOnDueDate',
'arrearsTolerance' => 'setArrearsTolerance'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
'principal' => 'getPrincipal',
'nominalInterestRatePerPeriod' => 'getNominalInterestRatePerPeriod',
'interestPeriodFrequencyType' => 'getInterestPeriodFrequencyType',
'annualNominalInterestRate' => 'getAnnualNominalInterestRate',
'interestMethod' => 'getInterestMethod',
'interestCalculationPeriodMethod' => 'getInterestCalculationPeriodMethod',
'allowPartialPeriodInterestCalcualtion' => 'getAllowPartialPeriodInterestCalcualtion',
'repayEvery' => 'getRepayEvery',
'repaymentPeriodFrequencyType' => 'getRepaymentPeriodFrequencyType',
'numberOfRepayments' => 'getNumberOfRepayments',
'graceOnPrincipalPayment' => 'getGraceOnPrincipalPayment',
'graceOnInterestPayment' => 'getGraceOnInterestPayment',
'amortizationMethod' => 'getAmortizationMethod',
'inArrearsTolerance' => 'getInArrearsTolerance',
'graceOnArrearsAgeing' => 'getGraceOnArrearsAgeing',
'interestRecalculationEnabled' => 'getInterestRecalculationEnabled',
'equalAmortization' => 'getEqualAmortization',
'graceOnDueDate' => 'getGraceOnDueDate',
'arrearsTolerance' => 'getArrearsTolerance'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INTEREST_PERIOD_FREQUENCY_TYPE_DAYS = 'DAYS';
const INTEREST_PERIOD_FREQUENCY_TYPE_WEEKS = 'WEEKS';
const INTEREST_PERIOD_FREQUENCY_TYPE_MONTHS = 'MONTHS';
const INTEREST_PERIOD_FREQUENCY_TYPE_YEARS = 'YEARS';
const INTEREST_PERIOD_FREQUENCY_TYPE_WHOLE_TERM = 'WHOLE_TERM';
const INTEREST_PERIOD_FREQUENCY_TYPE_INVALID = 'INVALID';
const INTEREST_METHOD_DECLINING_BALANCE = 'DECLINING_BALANCE';
const INTEREST_METHOD_FLAT = 'FLAT';
const INTEREST_METHOD_INVALID = 'INVALID';
const INTEREST_CALCULATION_PERIOD_METHOD_DAILY = 'DAILY';
const INTEREST_CALCULATION_PERIOD_METHOD_SAME_AS_REPAYMENT_PERIOD = 'SAME_AS_REPAYMENT_PERIOD';
const INTEREST_CALCULATION_PERIOD_METHOD_INVALID = 'INVALID';
const REPAYMENT_PERIOD_FREQUENCY_TYPE_DAYS = 'DAYS';
const REPAYMENT_PERIOD_FREQUENCY_TYPE_WEEKS = 'WEEKS';
const REPAYMENT_PERIOD_FREQUENCY_TYPE_MONTHS = 'MONTHS';
const REPAYMENT_PERIOD_FREQUENCY_TYPE_YEARS = 'YEARS';
const REPAYMENT_PERIOD_FREQUENCY_TYPE_WHOLE_TERM = 'WHOLE_TERM';
const REPAYMENT_PERIOD_FREQUENCY_TYPE_INVALID = 'INVALID';
const AMORTIZATION_METHOD_EQUAL_PRINCIPAL = 'EQUAL_PRINCIPAL';
const AMORTIZATION_METHOD_EQUAL_INSTALLMENTS = 'EQUAL_INSTALLMENTS';
const AMORTIZATION_METHOD_INVALID = 'INVALID';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterestPeriodFrequencyTypeAllowableValues()
    {
        return [
            self::INTEREST_PERIOD_FREQUENCY_TYPE_DAYS,
self::INTEREST_PERIOD_FREQUENCY_TYPE_WEEKS,
self::INTEREST_PERIOD_FREQUENCY_TYPE_MONTHS,
self::INTEREST_PERIOD_FREQUENCY_TYPE_YEARS,
self::INTEREST_PERIOD_FREQUENCY_TYPE_WHOLE_TERM,
self::INTEREST_PERIOD_FREQUENCY_TYPE_INVALID,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterestMethodAllowableValues()
    {
        return [
            self::INTEREST_METHOD_DECLINING_BALANCE,
self::INTEREST_METHOD_FLAT,
self::INTEREST_METHOD_INVALID,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterestCalculationPeriodMethodAllowableValues()
    {
        return [
            self::INTEREST_CALCULATION_PERIOD_METHOD_DAILY,
self::INTEREST_CALCULATION_PERIOD_METHOD_SAME_AS_REPAYMENT_PERIOD,
self::INTEREST_CALCULATION_PERIOD_METHOD_INVALID,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRepaymentPeriodFrequencyTypeAllowableValues()
    {
        return [
            self::REPAYMENT_PERIOD_FREQUENCY_TYPE_DAYS,
self::REPAYMENT_PERIOD_FREQUENCY_TYPE_WEEKS,
self::REPAYMENT_PERIOD_FREQUENCY_TYPE_MONTHS,
self::REPAYMENT_PERIOD_FREQUENCY_TYPE_YEARS,
self::REPAYMENT_PERIOD_FREQUENCY_TYPE_WHOLE_TERM,
self::REPAYMENT_PERIOD_FREQUENCY_TYPE_INVALID,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAmortizationMethodAllowableValues()
    {
        return [
            self::AMORTIZATION_METHOD_EQUAL_PRINCIPAL,
self::AMORTIZATION_METHOD_EQUAL_INSTALLMENTS,
self::AMORTIZATION_METHOD_INVALID,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['principal'] = isset($data['principal']) ? $data['principal'] : null;
        $this->container['nominalInterestRatePerPeriod'] = isset($data['nominalInterestRatePerPeriod']) ? $data['nominalInterestRatePerPeriod'] : null;
        $this->container['interestPeriodFrequencyType'] = isset($data['interestPeriodFrequencyType']) ? $data['interestPeriodFrequencyType'] : null;
        $this->container['annualNominalInterestRate'] = isset($data['annualNominalInterestRate']) ? $data['annualNominalInterestRate'] : null;
        $this->container['interestMethod'] = isset($data['interestMethod']) ? $data['interestMethod'] : null;
        $this->container['interestCalculationPeriodMethod'] = isset($data['interestCalculationPeriodMethod']) ? $data['interestCalculationPeriodMethod'] : null;
        $this->container['allowPartialPeriodInterestCalcualtion'] = isset($data['allowPartialPeriodInterestCalcualtion']) ? $data['allowPartialPeriodInterestCalcualtion'] : null;
        $this->container['repayEvery'] = isset($data['repayEvery']) ? $data['repayEvery'] : null;
        $this->container['repaymentPeriodFrequencyType'] = isset($data['repaymentPeriodFrequencyType']) ? $data['repaymentPeriodFrequencyType'] : null;
        $this->container['numberOfRepayments'] = isset($data['numberOfRepayments']) ? $data['numberOfRepayments'] : null;
        $this->container['graceOnPrincipalPayment'] = isset($data['graceOnPrincipalPayment']) ? $data['graceOnPrincipalPayment'] : null;
        $this->container['graceOnInterestPayment'] = isset($data['graceOnInterestPayment']) ? $data['graceOnInterestPayment'] : null;
        $this->container['amortizationMethod'] = isset($data['amortizationMethod']) ? $data['amortizationMethod'] : null;
        $this->container['inArrearsTolerance'] = isset($data['inArrearsTolerance']) ? $data['inArrearsTolerance'] : null;
        $this->container['graceOnArrearsAgeing'] = isset($data['graceOnArrearsAgeing']) ? $data['graceOnArrearsAgeing'] : null;
        $this->container['interestRecalculationEnabled'] = isset($data['interestRecalculationEnabled']) ? $data['interestRecalculationEnabled'] : null;
        $this->container['equalAmortization'] = isset($data['equalAmortization']) ? $data['equalAmortization'] : null;
        $this->container['graceOnDueDate'] = isset($data['graceOnDueDate']) ? $data['graceOnDueDate'] : null;
        $this->container['arrearsTolerance'] = isset($data['arrearsTolerance']) ? $data['arrearsTolerance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInterestPeriodFrequencyTypeAllowableValues();
        if (!is_null($this->container['interestPeriodFrequencyType']) && !in_array($this->container['interestPeriodFrequencyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'interestPeriodFrequencyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInterestMethodAllowableValues();
        if (!is_null($this->container['interestMethod']) && !in_array($this->container['interestMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'interestMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getInterestCalculationPeriodMethodAllowableValues();
        if (!is_null($this->container['interestCalculationPeriodMethod']) && !in_array($this->container['interestCalculationPeriodMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'interestCalculationPeriodMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRepaymentPeriodFrequencyTypeAllowableValues();
        if (!is_null($this->container['repaymentPeriodFrequencyType']) && !in_array($this->container['repaymentPeriodFrequencyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'repaymentPeriodFrequencyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAmortizationMethodAllowableValues();
        if (!is_null($this->container['amortizationMethod']) && !in_array($this->container['amortizationMethod'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'amortizationMethod', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return \Frengky\Fineract\Model\MonetaryCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Frengky\Fineract\Model\MonetaryCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return \Frengky\Fineract\Model\Money
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param \Frengky\Fineract\Model\Money $principal principal
     *
     * @return $this
     */
    public function setPrincipal($principal)
    {
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets nominalInterestRatePerPeriod
     *
     * @return float
     */
    public function getNominalInterestRatePerPeriod()
    {
        return $this->container['nominalInterestRatePerPeriod'];
    }

    /**
     * Sets nominalInterestRatePerPeriod
     *
     * @param float $nominalInterestRatePerPeriod nominalInterestRatePerPeriod
     *
     * @return $this
     */
    public function setNominalInterestRatePerPeriod($nominalInterestRatePerPeriod)
    {
        $this->container['nominalInterestRatePerPeriod'] = $nominalInterestRatePerPeriod;

        return $this;
    }

    /**
     * Gets interestPeriodFrequencyType
     *
     * @return string
     */
    public function getInterestPeriodFrequencyType()
    {
        return $this->container['interestPeriodFrequencyType'];
    }

    /**
     * Sets interestPeriodFrequencyType
     *
     * @param string $interestPeriodFrequencyType interestPeriodFrequencyType
     *
     * @return $this
     */
    public function setInterestPeriodFrequencyType($interestPeriodFrequencyType)
    {
        $allowedValues = $this->getInterestPeriodFrequencyTypeAllowableValues();
        if (!is_null($interestPeriodFrequencyType) && !in_array($interestPeriodFrequencyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'interestPeriodFrequencyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interestPeriodFrequencyType'] = $interestPeriodFrequencyType;

        return $this;
    }

    /**
     * Gets annualNominalInterestRate
     *
     * @return float
     */
    public function getAnnualNominalInterestRate()
    {
        return $this->container['annualNominalInterestRate'];
    }

    /**
     * Sets annualNominalInterestRate
     *
     * @param float $annualNominalInterestRate annualNominalInterestRate
     *
     * @return $this
     */
    public function setAnnualNominalInterestRate($annualNominalInterestRate)
    {
        $this->container['annualNominalInterestRate'] = $annualNominalInterestRate;

        return $this;
    }

    /**
     * Gets interestMethod
     *
     * @return string
     */
    public function getInterestMethod()
    {
        return $this->container['interestMethod'];
    }

    /**
     * Sets interestMethod
     *
     * @param string $interestMethod interestMethod
     *
     * @return $this
     */
    public function setInterestMethod($interestMethod)
    {
        $allowedValues = $this->getInterestMethodAllowableValues();
        if (!is_null($interestMethod) && !in_array($interestMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'interestMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interestMethod'] = $interestMethod;

        return $this;
    }

    /**
     * Gets interestCalculationPeriodMethod
     *
     * @return string
     */
    public function getInterestCalculationPeriodMethod()
    {
        return $this->container['interestCalculationPeriodMethod'];
    }

    /**
     * Sets interestCalculationPeriodMethod
     *
     * @param string $interestCalculationPeriodMethod interestCalculationPeriodMethod
     *
     * @return $this
     */
    public function setInterestCalculationPeriodMethod($interestCalculationPeriodMethod)
    {
        $allowedValues = $this->getInterestCalculationPeriodMethodAllowableValues();
        if (!is_null($interestCalculationPeriodMethod) && !in_array($interestCalculationPeriodMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'interestCalculationPeriodMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interestCalculationPeriodMethod'] = $interestCalculationPeriodMethod;

        return $this;
    }

    /**
     * Gets allowPartialPeriodInterestCalcualtion
     *
     * @return bool
     */
    public function getAllowPartialPeriodInterestCalcualtion()
    {
        return $this->container['allowPartialPeriodInterestCalcualtion'];
    }

    /**
     * Sets allowPartialPeriodInterestCalcualtion
     *
     * @param bool $allowPartialPeriodInterestCalcualtion allowPartialPeriodInterestCalcualtion
     *
     * @return $this
     */
    public function setAllowPartialPeriodInterestCalcualtion($allowPartialPeriodInterestCalcualtion)
    {
        $this->container['allowPartialPeriodInterestCalcualtion'] = $allowPartialPeriodInterestCalcualtion;

        return $this;
    }

    /**
     * Gets repayEvery
     *
     * @return int
     */
    public function getRepayEvery()
    {
        return $this->container['repayEvery'];
    }

    /**
     * Sets repayEvery
     *
     * @param int $repayEvery repayEvery
     *
     * @return $this
     */
    public function setRepayEvery($repayEvery)
    {
        $this->container['repayEvery'] = $repayEvery;

        return $this;
    }

    /**
     * Gets repaymentPeriodFrequencyType
     *
     * @return string
     */
    public function getRepaymentPeriodFrequencyType()
    {
        return $this->container['repaymentPeriodFrequencyType'];
    }

    /**
     * Sets repaymentPeriodFrequencyType
     *
     * @param string $repaymentPeriodFrequencyType repaymentPeriodFrequencyType
     *
     * @return $this
     */
    public function setRepaymentPeriodFrequencyType($repaymentPeriodFrequencyType)
    {
        $allowedValues = $this->getRepaymentPeriodFrequencyTypeAllowableValues();
        if (!is_null($repaymentPeriodFrequencyType) && !in_array($repaymentPeriodFrequencyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'repaymentPeriodFrequencyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['repaymentPeriodFrequencyType'] = $repaymentPeriodFrequencyType;

        return $this;
    }

    /**
     * Gets numberOfRepayments
     *
     * @return int
     */
    public function getNumberOfRepayments()
    {
        return $this->container['numberOfRepayments'];
    }

    /**
     * Sets numberOfRepayments
     *
     * @param int $numberOfRepayments numberOfRepayments
     *
     * @return $this
     */
    public function setNumberOfRepayments($numberOfRepayments)
    {
        $this->container['numberOfRepayments'] = $numberOfRepayments;

        return $this;
    }

    /**
     * Gets graceOnPrincipalPayment
     *
     * @return int
     */
    public function getGraceOnPrincipalPayment()
    {
        return $this->container['graceOnPrincipalPayment'];
    }

    /**
     * Sets graceOnPrincipalPayment
     *
     * @param int $graceOnPrincipalPayment graceOnPrincipalPayment
     *
     * @return $this
     */
    public function setGraceOnPrincipalPayment($graceOnPrincipalPayment)
    {
        $this->container['graceOnPrincipalPayment'] = $graceOnPrincipalPayment;

        return $this;
    }

    /**
     * Gets graceOnInterestPayment
     *
     * @return int
     */
    public function getGraceOnInterestPayment()
    {
        return $this->container['graceOnInterestPayment'];
    }

    /**
     * Sets graceOnInterestPayment
     *
     * @param int $graceOnInterestPayment graceOnInterestPayment
     *
     * @return $this
     */
    public function setGraceOnInterestPayment($graceOnInterestPayment)
    {
        $this->container['graceOnInterestPayment'] = $graceOnInterestPayment;

        return $this;
    }

    /**
     * Gets amortizationMethod
     *
     * @return string
     */
    public function getAmortizationMethod()
    {
        return $this->container['amortizationMethod'];
    }

    /**
     * Sets amortizationMethod
     *
     * @param string $amortizationMethod amortizationMethod
     *
     * @return $this
     */
    public function setAmortizationMethod($amortizationMethod)
    {
        $allowedValues = $this->getAmortizationMethodAllowableValues();
        if (!is_null($amortizationMethod) && !in_array($amortizationMethod, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'amortizationMethod', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['amortizationMethod'] = $amortizationMethod;

        return $this;
    }

    /**
     * Gets inArrearsTolerance
     *
     * @return \Frengky\Fineract\Model\Money
     */
    public function getInArrearsTolerance()
    {
        return $this->container['inArrearsTolerance'];
    }

    /**
     * Sets inArrearsTolerance
     *
     * @param \Frengky\Fineract\Model\Money $inArrearsTolerance inArrearsTolerance
     *
     * @return $this
     */
    public function setInArrearsTolerance($inArrearsTolerance)
    {
        $this->container['inArrearsTolerance'] = $inArrearsTolerance;

        return $this;
    }

    /**
     * Gets graceOnArrearsAgeing
     *
     * @return int
     */
    public function getGraceOnArrearsAgeing()
    {
        return $this->container['graceOnArrearsAgeing'];
    }

    /**
     * Sets graceOnArrearsAgeing
     *
     * @param int $graceOnArrearsAgeing graceOnArrearsAgeing
     *
     * @return $this
     */
    public function setGraceOnArrearsAgeing($graceOnArrearsAgeing)
    {
        $this->container['graceOnArrearsAgeing'] = $graceOnArrearsAgeing;

        return $this;
    }

    /**
     * Gets interestRecalculationEnabled
     *
     * @return bool
     */
    public function getInterestRecalculationEnabled()
    {
        return $this->container['interestRecalculationEnabled'];
    }

    /**
     * Sets interestRecalculationEnabled
     *
     * @param bool $interestRecalculationEnabled interestRecalculationEnabled
     *
     * @return $this
     */
    public function setInterestRecalculationEnabled($interestRecalculationEnabled)
    {
        $this->container['interestRecalculationEnabled'] = $interestRecalculationEnabled;

        return $this;
    }

    /**
     * Gets equalAmortization
     *
     * @return bool
     */
    public function getEqualAmortization()
    {
        return $this->container['equalAmortization'];
    }

    /**
     * Sets equalAmortization
     *
     * @param bool $equalAmortization equalAmortization
     *
     * @return $this
     */
    public function setEqualAmortization($equalAmortization)
    {
        $this->container['equalAmortization'] = $equalAmortization;

        return $this;
    }

    /**
     * Gets graceOnDueDate
     *
     * @return int
     */
    public function getGraceOnDueDate()
    {
        return $this->container['graceOnDueDate'];
    }

    /**
     * Sets graceOnDueDate
     *
     * @param int $graceOnDueDate graceOnDueDate
     *
     * @return $this
     */
    public function setGraceOnDueDate($graceOnDueDate)
    {
        $this->container['graceOnDueDate'] = $graceOnDueDate;

        return $this;
    }

    /**
     * Gets arrearsTolerance
     *
     * @return float
     */
    public function getArrearsTolerance()
    {
        return $this->container['arrearsTolerance'];
    }

    /**
     * Sets arrearsTolerance
     *
     * @param float $arrearsTolerance arrearsTolerance
     *
     * @return $this
     */
    public function setArrearsTolerance($arrearsTolerance)
    {
        $this->container['arrearsTolerance'] = $arrearsTolerance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
