<?php
/**
 * PostLoansRepaymentSchedulePeriods
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * PostLoansRepaymentSchedulePeriods Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostLoansRepaymentSchedulePeriods implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostLoansRepaymentSchedulePeriods';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'period' => 'int',
'dueDate' => '\DateTime',
'principalDisbursed' => 'int',
'principalLoanBalanceOutstanding' => 'int',
'feeChargesDue' => 'int',
'feeChargesOutstanding' => 'int',
'totalOriginalDueForPeriod' => 'int',
'totalDueForPeriod' => 'int',
'totalOutstandingForPeriod' => 'int',
'totalOverdue' => 'int',
'totalActualCostOfLoanForPeriod' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'period' => 'int32',
'dueDate' => 'date',
'principalDisbursed' => 'int64',
'principalLoanBalanceOutstanding' => 'int64',
'feeChargesDue' => 'int64',
'feeChargesOutstanding' => 'int64',
'totalOriginalDueForPeriod' => 'int64',
'totalDueForPeriod' => 'int64',
'totalOutstandingForPeriod' => 'int64',
'totalOverdue' => 'int64',
'totalActualCostOfLoanForPeriod' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'period' => 'period',
'dueDate' => 'dueDate',
'principalDisbursed' => 'principalDisbursed',
'principalLoanBalanceOutstanding' => 'principalLoanBalanceOutstanding',
'feeChargesDue' => 'feeChargesDue',
'feeChargesOutstanding' => 'feeChargesOutstanding',
'totalOriginalDueForPeriod' => 'totalOriginalDueForPeriod',
'totalDueForPeriod' => 'totalDueForPeriod',
'totalOutstandingForPeriod' => 'totalOutstandingForPeriod',
'totalOverdue' => 'totalOverdue',
'totalActualCostOfLoanForPeriod' => 'totalActualCostOfLoanForPeriod'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'period' => 'setPeriod',
'dueDate' => 'setDueDate',
'principalDisbursed' => 'setPrincipalDisbursed',
'principalLoanBalanceOutstanding' => 'setPrincipalLoanBalanceOutstanding',
'feeChargesDue' => 'setFeeChargesDue',
'feeChargesOutstanding' => 'setFeeChargesOutstanding',
'totalOriginalDueForPeriod' => 'setTotalOriginalDueForPeriod',
'totalDueForPeriod' => 'setTotalDueForPeriod',
'totalOutstandingForPeriod' => 'setTotalOutstandingForPeriod',
'totalOverdue' => 'setTotalOverdue',
'totalActualCostOfLoanForPeriod' => 'setTotalActualCostOfLoanForPeriod'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'period' => 'getPeriod',
'dueDate' => 'getDueDate',
'principalDisbursed' => 'getPrincipalDisbursed',
'principalLoanBalanceOutstanding' => 'getPrincipalLoanBalanceOutstanding',
'feeChargesDue' => 'getFeeChargesDue',
'feeChargesOutstanding' => 'getFeeChargesOutstanding',
'totalOriginalDueForPeriod' => 'getTotalOriginalDueForPeriod',
'totalDueForPeriod' => 'getTotalDueForPeriod',
'totalOutstandingForPeriod' => 'getTotalOutstandingForPeriod',
'totalOverdue' => 'getTotalOverdue',
'totalActualCostOfLoanForPeriod' => 'getTotalActualCostOfLoanForPeriod'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['period'] = isset($data['period']) ? $data['period'] : null;
        $this->container['dueDate'] = isset($data['dueDate']) ? $data['dueDate'] : null;
        $this->container['principalDisbursed'] = isset($data['principalDisbursed']) ? $data['principalDisbursed'] : null;
        $this->container['principalLoanBalanceOutstanding'] = isset($data['principalLoanBalanceOutstanding']) ? $data['principalLoanBalanceOutstanding'] : null;
        $this->container['feeChargesDue'] = isset($data['feeChargesDue']) ? $data['feeChargesDue'] : null;
        $this->container['feeChargesOutstanding'] = isset($data['feeChargesOutstanding']) ? $data['feeChargesOutstanding'] : null;
        $this->container['totalOriginalDueForPeriod'] = isset($data['totalOriginalDueForPeriod']) ? $data['totalOriginalDueForPeriod'] : null;
        $this->container['totalDueForPeriod'] = isset($data['totalDueForPeriod']) ? $data['totalDueForPeriod'] : null;
        $this->container['totalOutstandingForPeriod'] = isset($data['totalOutstandingForPeriod']) ? $data['totalOutstandingForPeriod'] : null;
        $this->container['totalOverdue'] = isset($data['totalOverdue']) ? $data['totalOverdue'] : null;
        $this->container['totalActualCostOfLoanForPeriod'] = isset($data['totalActualCostOfLoanForPeriod']) ? $data['totalActualCostOfLoanForPeriod'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets period
     *
     * @return int
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param int $period period
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets dueDate
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['dueDate'];
    }

    /**
     * Sets dueDate
     *
     * @param \DateTime $dueDate dueDate
     *
     * @return $this
     */
    public function setDueDate($dueDate)
    {
        $this->container['dueDate'] = $dueDate;

        return $this;
    }

    /**
     * Gets principalDisbursed
     *
     * @return int
     */
    public function getPrincipalDisbursed()
    {
        return $this->container['principalDisbursed'];
    }

    /**
     * Sets principalDisbursed
     *
     * @param int $principalDisbursed principalDisbursed
     *
     * @return $this
     */
    public function setPrincipalDisbursed($principalDisbursed)
    {
        $this->container['principalDisbursed'] = $principalDisbursed;

        return $this;
    }

    /**
     * Gets principalLoanBalanceOutstanding
     *
     * @return int
     */
    public function getPrincipalLoanBalanceOutstanding()
    {
        return $this->container['principalLoanBalanceOutstanding'];
    }

    /**
     * Sets principalLoanBalanceOutstanding
     *
     * @param int $principalLoanBalanceOutstanding principalLoanBalanceOutstanding
     *
     * @return $this
     */
    public function setPrincipalLoanBalanceOutstanding($principalLoanBalanceOutstanding)
    {
        $this->container['principalLoanBalanceOutstanding'] = $principalLoanBalanceOutstanding;

        return $this;
    }

    /**
     * Gets feeChargesDue
     *
     * @return int
     */
    public function getFeeChargesDue()
    {
        return $this->container['feeChargesDue'];
    }

    /**
     * Sets feeChargesDue
     *
     * @param int $feeChargesDue feeChargesDue
     *
     * @return $this
     */
    public function setFeeChargesDue($feeChargesDue)
    {
        $this->container['feeChargesDue'] = $feeChargesDue;

        return $this;
    }

    /**
     * Gets feeChargesOutstanding
     *
     * @return int
     */
    public function getFeeChargesOutstanding()
    {
        return $this->container['feeChargesOutstanding'];
    }

    /**
     * Sets feeChargesOutstanding
     *
     * @param int $feeChargesOutstanding feeChargesOutstanding
     *
     * @return $this
     */
    public function setFeeChargesOutstanding($feeChargesOutstanding)
    {
        $this->container['feeChargesOutstanding'] = $feeChargesOutstanding;

        return $this;
    }

    /**
     * Gets totalOriginalDueForPeriod
     *
     * @return int
     */
    public function getTotalOriginalDueForPeriod()
    {
        return $this->container['totalOriginalDueForPeriod'];
    }

    /**
     * Sets totalOriginalDueForPeriod
     *
     * @param int $totalOriginalDueForPeriod totalOriginalDueForPeriod
     *
     * @return $this
     */
    public function setTotalOriginalDueForPeriod($totalOriginalDueForPeriod)
    {
        $this->container['totalOriginalDueForPeriod'] = $totalOriginalDueForPeriod;

        return $this;
    }

    /**
     * Gets totalDueForPeriod
     *
     * @return int
     */
    public function getTotalDueForPeriod()
    {
        return $this->container['totalDueForPeriod'];
    }

    /**
     * Sets totalDueForPeriod
     *
     * @param int $totalDueForPeriod totalDueForPeriod
     *
     * @return $this
     */
    public function setTotalDueForPeriod($totalDueForPeriod)
    {
        $this->container['totalDueForPeriod'] = $totalDueForPeriod;

        return $this;
    }

    /**
     * Gets totalOutstandingForPeriod
     *
     * @return int
     */
    public function getTotalOutstandingForPeriod()
    {
        return $this->container['totalOutstandingForPeriod'];
    }

    /**
     * Sets totalOutstandingForPeriod
     *
     * @param int $totalOutstandingForPeriod totalOutstandingForPeriod
     *
     * @return $this
     */
    public function setTotalOutstandingForPeriod($totalOutstandingForPeriod)
    {
        $this->container['totalOutstandingForPeriod'] = $totalOutstandingForPeriod;

        return $this;
    }

    /**
     * Gets totalOverdue
     *
     * @return int
     */
    public function getTotalOverdue()
    {
        return $this->container['totalOverdue'];
    }

    /**
     * Sets totalOverdue
     *
     * @param int $totalOverdue totalOverdue
     *
     * @return $this
     */
    public function setTotalOverdue($totalOverdue)
    {
        $this->container['totalOverdue'] = $totalOverdue;

        return $this;
    }

    /**
     * Gets totalActualCostOfLoanForPeriod
     *
     * @return int
     */
    public function getTotalActualCostOfLoanForPeriod()
    {
        return $this->container['totalActualCostOfLoanForPeriod'];
    }

    /**
     * Sets totalActualCostOfLoanForPeriod
     *
     * @param int $totalActualCostOfLoanForPeriod totalActualCostOfLoanForPeriod
     *
     * @return $this
     */
    public function setTotalActualCostOfLoanForPeriod($totalActualCostOfLoanForPeriod)
    {
        $this->container['totalActualCostOfLoanForPeriod'] = $totalActualCostOfLoanForPeriod;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
