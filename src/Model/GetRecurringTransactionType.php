<?php
/**
 * GetRecurringTransactionType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetRecurringTransactionType Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetRecurringTransactionType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetRecurringTransactionType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'code' => 'string',
'description' => 'string',
'deposit' => 'bool',
'withdrawal' => 'bool',
'interestPosting' => 'bool',
'feeDeduction' => 'bool',
'initiateTransfer' => 'bool',
'approveTransfer' => 'bool',
'withdrawTransfer' => 'bool',
'rejectTransfer' => 'bool',
'overdraftInterest' => 'bool',
'writtenoff' => 'bool',
'overdraftFee' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'code' => null,
'description' => null,
'deposit' => null,
'withdrawal' => null,
'interestPosting' => null,
'feeDeduction' => null,
'initiateTransfer' => null,
'approveTransfer' => null,
'withdrawTransfer' => null,
'rejectTransfer' => null,
'overdraftInterest' => null,
'writtenoff' => null,
'overdraftFee' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'code' => 'code',
'description' => 'description',
'deposit' => 'deposit',
'withdrawal' => 'withdrawal',
'interestPosting' => 'interestPosting',
'feeDeduction' => 'feeDeduction',
'initiateTransfer' => 'initiateTransfer',
'approveTransfer' => 'approveTransfer',
'withdrawTransfer' => 'withdrawTransfer',
'rejectTransfer' => 'rejectTransfer',
'overdraftInterest' => 'overdraftInterest',
'writtenoff' => 'writtenoff',
'overdraftFee' => 'overdraftFee'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'code' => 'setCode',
'description' => 'setDescription',
'deposit' => 'setDeposit',
'withdrawal' => 'setWithdrawal',
'interestPosting' => 'setInterestPosting',
'feeDeduction' => 'setFeeDeduction',
'initiateTransfer' => 'setInitiateTransfer',
'approveTransfer' => 'setApproveTransfer',
'withdrawTransfer' => 'setWithdrawTransfer',
'rejectTransfer' => 'setRejectTransfer',
'overdraftInterest' => 'setOverdraftInterest',
'writtenoff' => 'setWrittenoff',
'overdraftFee' => 'setOverdraftFee'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'code' => 'getCode',
'description' => 'getDescription',
'deposit' => 'getDeposit',
'withdrawal' => 'getWithdrawal',
'interestPosting' => 'getInterestPosting',
'feeDeduction' => 'getFeeDeduction',
'initiateTransfer' => 'getInitiateTransfer',
'approveTransfer' => 'getApproveTransfer',
'withdrawTransfer' => 'getWithdrawTransfer',
'rejectTransfer' => 'getRejectTransfer',
'overdraftInterest' => 'getOverdraftInterest',
'writtenoff' => 'getWrittenoff',
'overdraftFee' => 'getOverdraftFee'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['deposit'] = isset($data['deposit']) ? $data['deposit'] : null;
        $this->container['withdrawal'] = isset($data['withdrawal']) ? $data['withdrawal'] : null;
        $this->container['interestPosting'] = isset($data['interestPosting']) ? $data['interestPosting'] : null;
        $this->container['feeDeduction'] = isset($data['feeDeduction']) ? $data['feeDeduction'] : null;
        $this->container['initiateTransfer'] = isset($data['initiateTransfer']) ? $data['initiateTransfer'] : null;
        $this->container['approveTransfer'] = isset($data['approveTransfer']) ? $data['approveTransfer'] : null;
        $this->container['withdrawTransfer'] = isset($data['withdrawTransfer']) ? $data['withdrawTransfer'] : null;
        $this->container['rejectTransfer'] = isset($data['rejectTransfer']) ? $data['rejectTransfer'] : null;
        $this->container['overdraftInterest'] = isset($data['overdraftInterest']) ? $data['overdraftInterest'] : null;
        $this->container['writtenoff'] = isset($data['writtenoff']) ? $data['writtenoff'] : null;
        $this->container['overdraftFee'] = isset($data['overdraftFee']) ? $data['overdraftFee'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets deposit
     *
     * @return bool
     */
    public function getDeposit()
    {
        return $this->container['deposit'];
    }

    /**
     * Sets deposit
     *
     * @param bool $deposit deposit
     *
     * @return $this
     */
    public function setDeposit($deposit)
    {
        $this->container['deposit'] = $deposit;

        return $this;
    }

    /**
     * Gets withdrawal
     *
     * @return bool
     */
    public function getWithdrawal()
    {
        return $this->container['withdrawal'];
    }

    /**
     * Sets withdrawal
     *
     * @param bool $withdrawal withdrawal
     *
     * @return $this
     */
    public function setWithdrawal($withdrawal)
    {
        $this->container['withdrawal'] = $withdrawal;

        return $this;
    }

    /**
     * Gets interestPosting
     *
     * @return bool
     */
    public function getInterestPosting()
    {
        return $this->container['interestPosting'];
    }

    /**
     * Sets interestPosting
     *
     * @param bool $interestPosting interestPosting
     *
     * @return $this
     */
    public function setInterestPosting($interestPosting)
    {
        $this->container['interestPosting'] = $interestPosting;

        return $this;
    }

    /**
     * Gets feeDeduction
     *
     * @return bool
     */
    public function getFeeDeduction()
    {
        return $this->container['feeDeduction'];
    }

    /**
     * Sets feeDeduction
     *
     * @param bool $feeDeduction feeDeduction
     *
     * @return $this
     */
    public function setFeeDeduction($feeDeduction)
    {
        $this->container['feeDeduction'] = $feeDeduction;

        return $this;
    }

    /**
     * Gets initiateTransfer
     *
     * @return bool
     */
    public function getInitiateTransfer()
    {
        return $this->container['initiateTransfer'];
    }

    /**
     * Sets initiateTransfer
     *
     * @param bool $initiateTransfer initiateTransfer
     *
     * @return $this
     */
    public function setInitiateTransfer($initiateTransfer)
    {
        $this->container['initiateTransfer'] = $initiateTransfer;

        return $this;
    }

    /**
     * Gets approveTransfer
     *
     * @return bool
     */
    public function getApproveTransfer()
    {
        return $this->container['approveTransfer'];
    }

    /**
     * Sets approveTransfer
     *
     * @param bool $approveTransfer approveTransfer
     *
     * @return $this
     */
    public function setApproveTransfer($approveTransfer)
    {
        $this->container['approveTransfer'] = $approveTransfer;

        return $this;
    }

    /**
     * Gets withdrawTransfer
     *
     * @return bool
     */
    public function getWithdrawTransfer()
    {
        return $this->container['withdrawTransfer'];
    }

    /**
     * Sets withdrawTransfer
     *
     * @param bool $withdrawTransfer withdrawTransfer
     *
     * @return $this
     */
    public function setWithdrawTransfer($withdrawTransfer)
    {
        $this->container['withdrawTransfer'] = $withdrawTransfer;

        return $this;
    }

    /**
     * Gets rejectTransfer
     *
     * @return bool
     */
    public function getRejectTransfer()
    {
        return $this->container['rejectTransfer'];
    }

    /**
     * Sets rejectTransfer
     *
     * @param bool $rejectTransfer rejectTransfer
     *
     * @return $this
     */
    public function setRejectTransfer($rejectTransfer)
    {
        $this->container['rejectTransfer'] = $rejectTransfer;

        return $this;
    }

    /**
     * Gets overdraftInterest
     *
     * @return bool
     */
    public function getOverdraftInterest()
    {
        return $this->container['overdraftInterest'];
    }

    /**
     * Sets overdraftInterest
     *
     * @param bool $overdraftInterest overdraftInterest
     *
     * @return $this
     */
    public function setOverdraftInterest($overdraftInterest)
    {
        $this->container['overdraftInterest'] = $overdraftInterest;

        return $this;
    }

    /**
     * Gets writtenoff
     *
     * @return bool
     */
    public function getWrittenoff()
    {
        return $this->container['writtenoff'];
    }

    /**
     * Sets writtenoff
     *
     * @param bool $writtenoff writtenoff
     *
     * @return $this
     */
    public function setWrittenoff($writtenoff)
    {
        $this->container['writtenoff'] = $writtenoff;

        return $this;
    }

    /**
     * Gets overdraftFee
     *
     * @return bool
     */
    public function getOverdraftFee()
    {
        return $this->container['overdraftFee'];
    }

    /**
     * Sets overdraftFee
     *
     * @param bool $overdraftFee overdraftFee
     *
     * @return $this
     */
    public function setOverdraftFee($overdraftFee)
    {
        $this->container['overdraftFee'] = $overdraftFee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
