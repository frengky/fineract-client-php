<?php
/**
 * LoanProductProvisioningEntryData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * LoanProductProvisioningEntryData Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoanProductProvisioningEntryData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoanProductProvisioningEntryData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'historyId' => 'int',
'officeId' => 'int',
'currencyCode' => 'string',
'productId' => 'int',
'categoryId' => 'int',
'overdueInDays' => 'int',
'percentage' => 'float',
'liablityAccount' => 'int',
'expenseAccount' => 'int',
'criteriaId' => 'int',
'outstandingBalance' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'historyId' => 'int64',
'officeId' => 'int64',
'currencyCode' => null,
'productId' => 'int64',
'categoryId' => 'int64',
'overdueInDays' => 'int64',
'percentage' => null,
'liablityAccount' => 'int64',
'expenseAccount' => 'int64',
'criteriaId' => 'int64',
'outstandingBalance' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'historyId' => 'historyId',
'officeId' => 'officeId',
'currencyCode' => 'currencyCode',
'productId' => 'productId',
'categoryId' => 'categoryId',
'overdueInDays' => 'overdueInDays',
'percentage' => 'percentage',
'liablityAccount' => 'liablityAccount',
'expenseAccount' => 'expenseAccount',
'criteriaId' => 'criteriaId',
'outstandingBalance' => 'outstandingBalance'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'historyId' => 'setHistoryId',
'officeId' => 'setOfficeId',
'currencyCode' => 'setCurrencyCode',
'productId' => 'setProductId',
'categoryId' => 'setCategoryId',
'overdueInDays' => 'setOverdueInDays',
'percentage' => 'setPercentage',
'liablityAccount' => 'setLiablityAccount',
'expenseAccount' => 'setExpenseAccount',
'criteriaId' => 'setCriteriaId',
'outstandingBalance' => 'setOutstandingBalance'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'historyId' => 'getHistoryId',
'officeId' => 'getOfficeId',
'currencyCode' => 'getCurrencyCode',
'productId' => 'getProductId',
'categoryId' => 'getCategoryId',
'overdueInDays' => 'getOverdueInDays',
'percentage' => 'getPercentage',
'liablityAccount' => 'getLiablityAccount',
'expenseAccount' => 'getExpenseAccount',
'criteriaId' => 'getCriteriaId',
'outstandingBalance' => 'getOutstandingBalance'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['historyId'] = isset($data['historyId']) ? $data['historyId'] : null;
        $this->container['officeId'] = isset($data['officeId']) ? $data['officeId'] : null;
        $this->container['currencyCode'] = isset($data['currencyCode']) ? $data['currencyCode'] : null;
        $this->container['productId'] = isset($data['productId']) ? $data['productId'] : null;
        $this->container['categoryId'] = isset($data['categoryId']) ? $data['categoryId'] : null;
        $this->container['overdueInDays'] = isset($data['overdueInDays']) ? $data['overdueInDays'] : null;
        $this->container['percentage'] = isset($data['percentage']) ? $data['percentage'] : null;
        $this->container['liablityAccount'] = isset($data['liablityAccount']) ? $data['liablityAccount'] : null;
        $this->container['expenseAccount'] = isset($data['expenseAccount']) ? $data['expenseAccount'] : null;
        $this->container['criteriaId'] = isset($data['criteriaId']) ? $data['criteriaId'] : null;
        $this->container['outstandingBalance'] = isset($data['outstandingBalance']) ? $data['outstandingBalance'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets historyId
     *
     * @return int
     */
    public function getHistoryId()
    {
        return $this->container['historyId'];
    }

    /**
     * Sets historyId
     *
     * @param int $historyId historyId
     *
     * @return $this
     */
    public function setHistoryId($historyId)
    {
        $this->container['historyId'] = $historyId;

        return $this;
    }

    /**
     * Gets officeId
     *
     * @return int
     */
    public function getOfficeId()
    {
        return $this->container['officeId'];
    }

    /**
     * Sets officeId
     *
     * @param int $officeId officeId
     *
     * @return $this
     */
    public function setOfficeId($officeId)
    {
        $this->container['officeId'] = $officeId;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string $currencyCode currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param int $productId productId
     *
     * @return $this
     */
    public function setProductId($productId)
    {
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets categoryId
     *
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['categoryId'];
    }

    /**
     * Sets categoryId
     *
     * @param int $categoryId categoryId
     *
     * @return $this
     */
    public function setCategoryId($categoryId)
    {
        $this->container['categoryId'] = $categoryId;

        return $this;
    }

    /**
     * Gets overdueInDays
     *
     * @return int
     */
    public function getOverdueInDays()
    {
        return $this->container['overdueInDays'];
    }

    /**
     * Sets overdueInDays
     *
     * @param int $overdueInDays overdueInDays
     *
     * @return $this
     */
    public function setOverdueInDays($overdueInDays)
    {
        $this->container['overdueInDays'] = $overdueInDays;

        return $this;
    }

    /**
     * Gets percentage
     *
     * @return float
     */
    public function getPercentage()
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     *
     * @param float $percentage percentage
     *
     * @return $this
     */
    public function setPercentage($percentage)
    {
        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets liablityAccount
     *
     * @return int
     */
    public function getLiablityAccount()
    {
        return $this->container['liablityAccount'];
    }

    /**
     * Sets liablityAccount
     *
     * @param int $liablityAccount liablityAccount
     *
     * @return $this
     */
    public function setLiablityAccount($liablityAccount)
    {
        $this->container['liablityAccount'] = $liablityAccount;

        return $this;
    }

    /**
     * Gets expenseAccount
     *
     * @return int
     */
    public function getExpenseAccount()
    {
        return $this->container['expenseAccount'];
    }

    /**
     * Sets expenseAccount
     *
     * @param int $expenseAccount expenseAccount
     *
     * @return $this
     */
    public function setExpenseAccount($expenseAccount)
    {
        $this->container['expenseAccount'] = $expenseAccount;

        return $this;
    }

    /**
     * Gets criteriaId
     *
     * @return int
     */
    public function getCriteriaId()
    {
        return $this->container['criteriaId'];
    }

    /**
     * Sets criteriaId
     *
     * @param int $criteriaId criteriaId
     *
     * @return $this
     */
    public function setCriteriaId($criteriaId)
    {
        $this->container['criteriaId'] = $criteriaId;

        return $this;
    }

    /**
     * Gets outstandingBalance
     *
     * @return float
     */
    public function getOutstandingBalance()
    {
        return $this->container['outstandingBalance'];
    }

    /**
     * Sets outstandingBalance
     *
     * @param float $outstandingBalance outstandingBalance
     *
     * @return $this
     */
    public function setOutstandingBalance($outstandingBalance)
    {
        $this->container['outstandingBalance'] = $outstandingBalance;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
