<?php
/**
 * GetFieldConfigurationEntityResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetFieldConfigurationEntityResponse Class Doc Comment
 *
 * @category Class
 * @description GetFieldConfigurationEntityResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetFieldConfigurationEntityResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetFieldConfigurationEntityResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fieldConfigurationId' => 'int',
'entity' => 'string',
'subentity' => 'string',
'field' => 'string',
'isEnabled' => 'string',
'isMandatory' => 'string',
'validationRegex' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fieldConfigurationId' => 'int32',
'entity' => null,
'subentity' => null,
'field' => null,
'isEnabled' => null,
'isMandatory' => null,
'validationRegex' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fieldConfigurationId' => 'fieldConfigurationId',
'entity' => 'entity',
'subentity' => 'subentity',
'field' => 'field',
'isEnabled' => 'is_enabled',
'isMandatory' => 'is_mandatory',
'validationRegex' => 'validation_regex'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fieldConfigurationId' => 'setFieldConfigurationId',
'entity' => 'setEntity',
'subentity' => 'setSubentity',
'field' => 'setField',
'isEnabled' => 'setIsEnabled',
'isMandatory' => 'setIsMandatory',
'validationRegex' => 'setValidationRegex'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fieldConfigurationId' => 'getFieldConfigurationId',
'entity' => 'getEntity',
'subentity' => 'getSubentity',
'field' => 'getField',
'isEnabled' => 'getIsEnabled',
'isMandatory' => 'getIsMandatory',
'validationRegex' => 'getValidationRegex'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fieldConfigurationId'] = isset($data['fieldConfigurationId']) ? $data['fieldConfigurationId'] : null;
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
        $this->container['subentity'] = isset($data['subentity']) ? $data['subentity'] : null;
        $this->container['field'] = isset($data['field']) ? $data['field'] : null;
        $this->container['isEnabled'] = isset($data['isEnabled']) ? $data['isEnabled'] : null;
        $this->container['isMandatory'] = isset($data['isMandatory']) ? $data['isMandatory'] : null;
        $this->container['validationRegex'] = isset($data['validationRegex']) ? $data['validationRegex'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fieldConfigurationId
     *
     * @return int
     */
    public function getFieldConfigurationId()
    {
        return $this->container['fieldConfigurationId'];
    }

    /**
     * Sets fieldConfigurationId
     *
     * @param int $fieldConfigurationId fieldConfigurationId
     *
     * @return $this
     */
    public function setFieldConfigurationId($fieldConfigurationId)
    {
        $this->container['fieldConfigurationId'] = $fieldConfigurationId;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return string
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param string $entity entity
     *
     * @return $this
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets subentity
     *
     * @return string
     */
    public function getSubentity()
    {
        return $this->container['subentity'];
    }

    /**
     * Sets subentity
     *
     * @param string $subentity subentity
     *
     * @return $this
     */
    public function setSubentity($subentity)
    {
        $this->container['subentity'] = $subentity;

        return $this;
    }

    /**
     * Gets field
     *
     * @return string
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param string $field field
     *
     * @return $this
     */
    public function setField($field)
    {
        $this->container['field'] = $field;

        return $this;
    }

    /**
     * Gets isEnabled
     *
     * @return string
     */
    public function getIsEnabled()
    {
        return $this->container['isEnabled'];
    }

    /**
     * Sets isEnabled
     *
     * @param string $isEnabled isEnabled
     *
     * @return $this
     */
    public function setIsEnabled($isEnabled)
    {
        $this->container['isEnabled'] = $isEnabled;

        return $this;
    }

    /**
     * Gets isMandatory
     *
     * @return string
     */
    public function getIsMandatory()
    {
        return $this->container['isMandatory'];
    }

    /**
     * Sets isMandatory
     *
     * @param string $isMandatory isMandatory
     *
     * @return $this
     */
    public function setIsMandatory($isMandatory)
    {
        $this->container['isMandatory'] = $isMandatory;

        return $this;
    }

    /**
     * Gets validationRegex
     *
     * @return string
     */
    public function getValidationRegex()
    {
        return $this->container['validationRegex'];
    }

    /**
     * Sets validationRegex
     *
     * @param string $validationRegex validationRegex
     *
     * @return $this
     */
    public function setValidationRegex($validationRegex)
    {
        $this->container['validationRegex'] = $validationRegex;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
