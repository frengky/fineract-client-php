<?php
/**
 * GetAccountTransfersTemplateRefundByTransferResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetAccountTransfersTemplateRefundByTransferResponse Class Doc Comment
 *
 * @category Class
 * @description GetAccountTransfersTemplateRefundByTransferResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetAccountTransfersTemplateRefundByTransferResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetAccountTransfersTemplateRefundByTransferResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'currency' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferCurrency',
'transferAmount' => 'float',
'transferDate' => '\DateTime',
'fromOffice' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOffice',
'fromClient' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromClient',
'fromAccountType' => '\Frengky\Fineract\Model\GetAccountTransfersPageItemsToAccountType',
'fromAccount' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromAccount',
'toOffice' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOffice',
'toClient' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferToClient',
'toAccountType' => '\Frengky\Fineract\Model\GetAccountTransfersFromAccountType',
'toAccount' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferToAccount',
'fromOfficeOptions' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOfficeOptions[]',
'fromClientOptions' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromClientOptions[]',
'fromAccountTypeOptions' => '\Frengky\Fineract\Model\GetAccountTransfersFromAccountType[]',
'fromAccountOptions' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromAccountOptions[]',
'toOfficeOptions' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOfficeOptions[]',
'toClientOptions' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromClientOptions[]',
'toAccountTypeOptions' => '\Frengky\Fineract\Model\GetAccountTransfersFromAccountType[]',
'toAccountOptions' => '\Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferToAccount[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'currency' => null,
'transferAmount' => 'float',
'transferDate' => 'date',
'fromOffice' => null,
'fromClient' => null,
'fromAccountType' => null,
'fromAccount' => null,
'toOffice' => null,
'toClient' => null,
'toAccountType' => null,
'toAccount' => null,
'fromOfficeOptions' => null,
'fromClientOptions' => null,
'fromAccountTypeOptions' => null,
'fromAccountOptions' => null,
'toOfficeOptions' => null,
'toClientOptions' => null,
'toAccountTypeOptions' => null,
'toAccountOptions' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'currency' => 'currency',
'transferAmount' => 'transferAmount',
'transferDate' => 'transferDate',
'fromOffice' => 'fromOffice',
'fromClient' => 'fromClient',
'fromAccountType' => 'fromAccountType',
'fromAccount' => 'fromAccount',
'toOffice' => 'toOffice',
'toClient' => 'toClient',
'toAccountType' => 'toAccountType',
'toAccount' => 'toAccount',
'fromOfficeOptions' => 'fromOfficeOptions',
'fromClientOptions' => 'fromClientOptions',
'fromAccountTypeOptions' => 'fromAccountTypeOptions',
'fromAccountOptions' => 'fromAccountOptions',
'toOfficeOptions' => 'toOfficeOptions',
'toClientOptions' => 'toClientOptions',
'toAccountTypeOptions' => 'toAccountTypeOptions',
'toAccountOptions' => 'toAccountOptions'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'currency' => 'setCurrency',
'transferAmount' => 'setTransferAmount',
'transferDate' => 'setTransferDate',
'fromOffice' => 'setFromOffice',
'fromClient' => 'setFromClient',
'fromAccountType' => 'setFromAccountType',
'fromAccount' => 'setFromAccount',
'toOffice' => 'setToOffice',
'toClient' => 'setToClient',
'toAccountType' => 'setToAccountType',
'toAccount' => 'setToAccount',
'fromOfficeOptions' => 'setFromOfficeOptions',
'fromClientOptions' => 'setFromClientOptions',
'fromAccountTypeOptions' => 'setFromAccountTypeOptions',
'fromAccountOptions' => 'setFromAccountOptions',
'toOfficeOptions' => 'setToOfficeOptions',
'toClientOptions' => 'setToClientOptions',
'toAccountTypeOptions' => 'setToAccountTypeOptions',
'toAccountOptions' => 'setToAccountOptions'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'currency' => 'getCurrency',
'transferAmount' => 'getTransferAmount',
'transferDate' => 'getTransferDate',
'fromOffice' => 'getFromOffice',
'fromClient' => 'getFromClient',
'fromAccountType' => 'getFromAccountType',
'fromAccount' => 'getFromAccount',
'toOffice' => 'getToOffice',
'toClient' => 'getToClient',
'toAccountType' => 'getToAccountType',
'toAccount' => 'getToAccount',
'fromOfficeOptions' => 'getFromOfficeOptions',
'fromClientOptions' => 'getFromClientOptions',
'fromAccountTypeOptions' => 'getFromAccountTypeOptions',
'fromAccountOptions' => 'getFromAccountOptions',
'toOfficeOptions' => 'getToOfficeOptions',
'toClientOptions' => 'getToClientOptions',
'toAccountTypeOptions' => 'getToAccountTypeOptions',
'toAccountOptions' => 'getToAccountOptions'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['transferAmount'] = isset($data['transferAmount']) ? $data['transferAmount'] : null;
        $this->container['transferDate'] = isset($data['transferDate']) ? $data['transferDate'] : null;
        $this->container['fromOffice'] = isset($data['fromOffice']) ? $data['fromOffice'] : null;
        $this->container['fromClient'] = isset($data['fromClient']) ? $data['fromClient'] : null;
        $this->container['fromAccountType'] = isset($data['fromAccountType']) ? $data['fromAccountType'] : null;
        $this->container['fromAccount'] = isset($data['fromAccount']) ? $data['fromAccount'] : null;
        $this->container['toOffice'] = isset($data['toOffice']) ? $data['toOffice'] : null;
        $this->container['toClient'] = isset($data['toClient']) ? $data['toClient'] : null;
        $this->container['toAccountType'] = isset($data['toAccountType']) ? $data['toAccountType'] : null;
        $this->container['toAccount'] = isset($data['toAccount']) ? $data['toAccount'] : null;
        $this->container['fromOfficeOptions'] = isset($data['fromOfficeOptions']) ? $data['fromOfficeOptions'] : null;
        $this->container['fromClientOptions'] = isset($data['fromClientOptions']) ? $data['fromClientOptions'] : null;
        $this->container['fromAccountTypeOptions'] = isset($data['fromAccountTypeOptions']) ? $data['fromAccountTypeOptions'] : null;
        $this->container['fromAccountOptions'] = isset($data['fromAccountOptions']) ? $data['fromAccountOptions'] : null;
        $this->container['toOfficeOptions'] = isset($data['toOfficeOptions']) ? $data['toOfficeOptions'] : null;
        $this->container['toClientOptions'] = isset($data['toClientOptions']) ? $data['toClientOptions'] : null;
        $this->container['toAccountTypeOptions'] = isset($data['toAccountTypeOptions']) ? $data['toAccountTypeOptions'] : null;
        $this->container['toAccountOptions'] = isset($data['toAccountOptions']) ? $data['toAccountOptions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets currency
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets transferAmount
     *
     * @return float
     */
    public function getTransferAmount()
    {
        return $this->container['transferAmount'];
    }

    /**
     * Sets transferAmount
     *
     * @param float $transferAmount transferAmount
     *
     * @return $this
     */
    public function setTransferAmount($transferAmount)
    {
        $this->container['transferAmount'] = $transferAmount;

        return $this;
    }

    /**
     * Gets transferDate
     *
     * @return \DateTime
     */
    public function getTransferDate()
    {
        return $this->container['transferDate'];
    }

    /**
     * Sets transferDate
     *
     * @param \DateTime $transferDate transferDate
     *
     * @return $this
     */
    public function setTransferDate($transferDate)
    {
        $this->container['transferDate'] = $transferDate;

        return $this;
    }

    /**
     * Gets fromOffice
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOffice
     */
    public function getFromOffice()
    {
        return $this->container['fromOffice'];
    }

    /**
     * Sets fromOffice
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOffice $fromOffice fromOffice
     *
     * @return $this
     */
    public function setFromOffice($fromOffice)
    {
        $this->container['fromOffice'] = $fromOffice;

        return $this;
    }

    /**
     * Gets fromClient
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromClient
     */
    public function getFromClient()
    {
        return $this->container['fromClient'];
    }

    /**
     * Sets fromClient
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromClient $fromClient fromClient
     *
     * @return $this
     */
    public function setFromClient($fromClient)
    {
        $this->container['fromClient'] = $fromClient;

        return $this;
    }

    /**
     * Gets fromAccountType
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersPageItemsToAccountType
     */
    public function getFromAccountType()
    {
        return $this->container['fromAccountType'];
    }

    /**
     * Sets fromAccountType
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersPageItemsToAccountType $fromAccountType fromAccountType
     *
     * @return $this
     */
    public function setFromAccountType($fromAccountType)
    {
        $this->container['fromAccountType'] = $fromAccountType;

        return $this;
    }

    /**
     * Gets fromAccount
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromAccount
     */
    public function getFromAccount()
    {
        return $this->container['fromAccount'];
    }

    /**
     * Sets fromAccount
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromAccount $fromAccount fromAccount
     *
     * @return $this
     */
    public function setFromAccount($fromAccount)
    {
        $this->container['fromAccount'] = $fromAccount;

        return $this;
    }

    /**
     * Gets toOffice
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOffice
     */
    public function getToOffice()
    {
        return $this->container['toOffice'];
    }

    /**
     * Sets toOffice
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOffice $toOffice toOffice
     *
     * @return $this
     */
    public function setToOffice($toOffice)
    {
        $this->container['toOffice'] = $toOffice;

        return $this;
    }

    /**
     * Gets toClient
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferToClient
     */
    public function getToClient()
    {
        return $this->container['toClient'];
    }

    /**
     * Sets toClient
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferToClient $toClient toClient
     *
     * @return $this
     */
    public function setToClient($toClient)
    {
        $this->container['toClient'] = $toClient;

        return $this;
    }

    /**
     * Gets toAccountType
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersFromAccountType
     */
    public function getToAccountType()
    {
        return $this->container['toAccountType'];
    }

    /**
     * Sets toAccountType
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersFromAccountType $toAccountType toAccountType
     *
     * @return $this
     */
    public function setToAccountType($toAccountType)
    {
        $this->container['toAccountType'] = $toAccountType;

        return $this;
    }

    /**
     * Gets toAccount
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferToAccount
     */
    public function getToAccount()
    {
        return $this->container['toAccount'];
    }

    /**
     * Sets toAccount
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferToAccount $toAccount toAccount
     *
     * @return $this
     */
    public function setToAccount($toAccount)
    {
        $this->container['toAccount'] = $toAccount;

        return $this;
    }

    /**
     * Gets fromOfficeOptions
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOfficeOptions[]
     */
    public function getFromOfficeOptions()
    {
        return $this->container['fromOfficeOptions'];
    }

    /**
     * Sets fromOfficeOptions
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOfficeOptions[] $fromOfficeOptions fromOfficeOptions
     *
     * @return $this
     */
    public function setFromOfficeOptions($fromOfficeOptions)
    {
        $this->container['fromOfficeOptions'] = $fromOfficeOptions;

        return $this;
    }

    /**
     * Gets fromClientOptions
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromClientOptions[]
     */
    public function getFromClientOptions()
    {
        return $this->container['fromClientOptions'];
    }

    /**
     * Sets fromClientOptions
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromClientOptions[] $fromClientOptions fromClientOptions
     *
     * @return $this
     */
    public function setFromClientOptions($fromClientOptions)
    {
        $this->container['fromClientOptions'] = $fromClientOptions;

        return $this;
    }

    /**
     * Gets fromAccountTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersFromAccountType[]
     */
    public function getFromAccountTypeOptions()
    {
        return $this->container['fromAccountTypeOptions'];
    }

    /**
     * Sets fromAccountTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersFromAccountType[] $fromAccountTypeOptions fromAccountTypeOptions
     *
     * @return $this
     */
    public function setFromAccountTypeOptions($fromAccountTypeOptions)
    {
        $this->container['fromAccountTypeOptions'] = $fromAccountTypeOptions;

        return $this;
    }

    /**
     * Gets fromAccountOptions
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromAccountOptions[]
     */
    public function getFromAccountOptions()
    {
        return $this->container['fromAccountOptions'];
    }

    /**
     * Sets fromAccountOptions
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromAccountOptions[] $fromAccountOptions fromAccountOptions
     *
     * @return $this
     */
    public function setFromAccountOptions($fromAccountOptions)
    {
        $this->container['fromAccountOptions'] = $fromAccountOptions;

        return $this;
    }

    /**
     * Gets toOfficeOptions
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOfficeOptions[]
     */
    public function getToOfficeOptions()
    {
        return $this->container['toOfficeOptions'];
    }

    /**
     * Sets toOfficeOptions
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromOfficeOptions[] $toOfficeOptions toOfficeOptions
     *
     * @return $this
     */
    public function setToOfficeOptions($toOfficeOptions)
    {
        $this->container['toOfficeOptions'] = $toOfficeOptions;

        return $this;
    }

    /**
     * Gets toClientOptions
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromClientOptions[]
     */
    public function getToClientOptions()
    {
        return $this->container['toClientOptions'];
    }

    /**
     * Sets toClientOptions
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferFromClientOptions[] $toClientOptions toClientOptions
     *
     * @return $this
     */
    public function setToClientOptions($toClientOptions)
    {
        $this->container['toClientOptions'] = $toClientOptions;

        return $this;
    }

    /**
     * Gets toAccountTypeOptions
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersFromAccountType[]
     */
    public function getToAccountTypeOptions()
    {
        return $this->container['toAccountTypeOptions'];
    }

    /**
     * Sets toAccountTypeOptions
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersFromAccountType[] $toAccountTypeOptions toAccountTypeOptions
     *
     * @return $this
     */
    public function setToAccountTypeOptions($toAccountTypeOptions)
    {
        $this->container['toAccountTypeOptions'] = $toAccountTypeOptions;

        return $this;
    }

    /**
     * Gets toAccountOptions
     *
     * @return \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferToAccount[]
     */
    public function getToAccountOptions()
    {
        return $this->container['toAccountOptions'];
    }

    /**
     * Sets toAccountOptions
     *
     * @param \Frengky\Fineract\Model\GetAccountTransfersTemplateRefundByTransferToAccount[] $toAccountOptions toAccountOptions
     *
     * @return $this
     */
    public function setToAccountOptions($toAccountOptions)
    {
        $this->container['toAccountOptions'] = $toAccountOptions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
