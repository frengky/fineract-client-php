<?php
/**
 * LoanProductData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * LoanProductData Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoanProductData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoanProductData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'description' => 'string',
'fundId' => 'int',
'fundName' => 'string',
'startDate' => '\DateTime',
'closeDate' => '\DateTime',
'currency' => '\Frengky\Fineract\Model\CurrencyData',
'principal' => 'float',
'minPrincipal' => 'float',
'maxPrincipal' => 'float',
'numberOfRepayments' => 'int',
'minNumberOfRepayments' => 'int',
'maxNumberOfRepayments' => 'int',
'repaymentEvery' => 'int',
'repaymentFrequencyType' => '\Frengky\Fineract\Model\EnumOptionData',
'interestRatePerPeriod' => 'float',
'minInterestRatePerPeriod' => 'float',
'maxInterestRatePerPeriod' => 'float',
'interestRateFrequencyType' => '\Frengky\Fineract\Model\EnumOptionData',
'annualInterestRate' => 'float',
'interestRateDifferential' => 'float',
'minDifferentialLendingRate' => 'float',
'defaultDifferentialLendingRate' => 'float',
'maxDifferentialLendingRate' => 'float',
'amortizationType' => '\Frengky\Fineract\Model\EnumOptionData',
'interestType' => '\Frengky\Fineract\Model\EnumOptionData',
'interestCalculationPeriodType' => '\Frengky\Fineract\Model\EnumOptionData',
'allowPartialPeriodInterestCalcualtion' => 'bool',
'inArrearsTolerance' => 'float',
'transactionProcessingStrategyId' => 'int',
'transactionProcessingStrategyName' => 'string',
'graceOnPrincipalPayment' => 'int',
'recurringMoratoriumOnPrincipalPeriods' => 'int',
'graceOnInterestPayment' => 'int',
'graceOnInterestCharged' => 'int',
'graceOnArrearsAgeing' => 'int',
'daysInMonthType' => '\Frengky\Fineract\Model\EnumOptionData',
'daysInYearType' => '\Frengky\Fineract\Model\EnumOptionData',
'interestRecalculationData' => '\Frengky\Fineract\Model\LoanProductInterestRecalculationData',
'principalVariationsForBorrowerCycle' => '\Frengky\Fineract\Model\LoanProductBorrowerCycleVariationData[]',
'interestRateVariationsForBorrowerCycle' => '\Frengky\Fineract\Model\LoanProductBorrowerCycleVariationData[]',
'numberOfRepaymentVariationsForBorrowerCycle' => '\Frengky\Fineract\Model\LoanProductBorrowerCycleVariationData[]',
'fundOptions' => '\Frengky\Fineract\Model\FundData[]',
'repaymentFrequencyTypeOptions' => '\Frengky\Fineract\Model\EnumOptionData[]',
'interestRateFrequencyTypeOptions' => '\Frengky\Fineract\Model\EnumOptionData[]',
'amortizationTypeOptions' => '\Frengky\Fineract\Model\EnumOptionData[]',
'interestTypeOptions' => '\Frengky\Fineract\Model\EnumOptionData[]',
'interestCalculationPeriodTypeOptions' => '\Frengky\Fineract\Model\EnumOptionData[]',
'chargeOptions' => '\Frengky\Fineract\Model\ChargeData[]',
'multiDisburseLoan' => 'bool',
'outstandingLoanBalance' => 'float',
'interestRecalculationEnabled' => 'bool',
'compoundingToBePostedAsTransaction' => 'bool',
'equalAmortization' => 'bool',
'floatingInterestRateCalculationAllowed' => 'bool',
'linkedToFloatingInterestRates' => 'bool',
'variableInstallmentsAllowed' => 'bool',
'getloanProductConfigurableAttributes' => '\Frengky\Fineract\Model\LoanProductConfigurableAttributes',
'minimumGapBetweenInstallments' => 'int',
'maximumGapBetweenInstallments' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'name' => null,
'description' => null,
'fundId' => 'int64',
'fundName' => null,
'startDate' => 'date',
'closeDate' => 'date',
'currency' => null,
'principal' => null,
'minPrincipal' => null,
'maxPrincipal' => null,
'numberOfRepayments' => 'int32',
'minNumberOfRepayments' => 'int32',
'maxNumberOfRepayments' => 'int32',
'repaymentEvery' => 'int32',
'repaymentFrequencyType' => null,
'interestRatePerPeriod' => null,
'minInterestRatePerPeriod' => null,
'maxInterestRatePerPeriod' => null,
'interestRateFrequencyType' => null,
'annualInterestRate' => null,
'interestRateDifferential' => null,
'minDifferentialLendingRate' => null,
'defaultDifferentialLendingRate' => null,
'maxDifferentialLendingRate' => null,
'amortizationType' => null,
'interestType' => null,
'interestCalculationPeriodType' => null,
'allowPartialPeriodInterestCalcualtion' => null,
'inArrearsTolerance' => null,
'transactionProcessingStrategyId' => 'int64',
'transactionProcessingStrategyName' => null,
'graceOnPrincipalPayment' => 'int32',
'recurringMoratoriumOnPrincipalPeriods' => 'int32',
'graceOnInterestPayment' => 'int32',
'graceOnInterestCharged' => 'int32',
'graceOnArrearsAgeing' => 'int32',
'daysInMonthType' => null,
'daysInYearType' => null,
'interestRecalculationData' => null,
'principalVariationsForBorrowerCycle' => null,
'interestRateVariationsForBorrowerCycle' => null,
'numberOfRepaymentVariationsForBorrowerCycle' => null,
'fundOptions' => null,
'repaymentFrequencyTypeOptions' => null,
'interestRateFrequencyTypeOptions' => null,
'amortizationTypeOptions' => null,
'interestTypeOptions' => null,
'interestCalculationPeriodTypeOptions' => null,
'chargeOptions' => null,
'multiDisburseLoan' => null,
'outstandingLoanBalance' => null,
'interestRecalculationEnabled' => null,
'compoundingToBePostedAsTransaction' => null,
'equalAmortization' => null,
'floatingInterestRateCalculationAllowed' => null,
'linkedToFloatingInterestRates' => null,
'variableInstallmentsAllowed' => null,
'getloanProductConfigurableAttributes' => null,
'minimumGapBetweenInstallments' => 'int32',
'maximumGapBetweenInstallments' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'description' => 'description',
'fundId' => 'fundId',
'fundName' => 'fundName',
'startDate' => 'startDate',
'closeDate' => 'closeDate',
'currency' => 'currency',
'principal' => 'principal',
'minPrincipal' => 'minPrincipal',
'maxPrincipal' => 'maxPrincipal',
'numberOfRepayments' => 'numberOfRepayments',
'minNumberOfRepayments' => 'minNumberOfRepayments',
'maxNumberOfRepayments' => 'maxNumberOfRepayments',
'repaymentEvery' => 'repaymentEvery',
'repaymentFrequencyType' => 'repaymentFrequencyType',
'interestRatePerPeriod' => 'interestRatePerPeriod',
'minInterestRatePerPeriod' => 'minInterestRatePerPeriod',
'maxInterestRatePerPeriod' => 'maxInterestRatePerPeriod',
'interestRateFrequencyType' => 'interestRateFrequencyType',
'annualInterestRate' => 'annualInterestRate',
'interestRateDifferential' => 'interestRateDifferential',
'minDifferentialLendingRate' => 'minDifferentialLendingRate',
'defaultDifferentialLendingRate' => 'defaultDifferentialLendingRate',
'maxDifferentialLendingRate' => 'maxDifferentialLendingRate',
'amortizationType' => 'amortizationType',
'interestType' => 'interestType',
'interestCalculationPeriodType' => 'interestCalculationPeriodType',
'allowPartialPeriodInterestCalcualtion' => 'allowPartialPeriodInterestCalcualtion',
'inArrearsTolerance' => 'inArrearsTolerance',
'transactionProcessingStrategyId' => 'transactionProcessingStrategyId',
'transactionProcessingStrategyName' => 'transactionProcessingStrategyName',
'graceOnPrincipalPayment' => 'graceOnPrincipalPayment',
'recurringMoratoriumOnPrincipalPeriods' => 'recurringMoratoriumOnPrincipalPeriods',
'graceOnInterestPayment' => 'graceOnInterestPayment',
'graceOnInterestCharged' => 'graceOnInterestCharged',
'graceOnArrearsAgeing' => 'graceOnArrearsAgeing',
'daysInMonthType' => 'daysInMonthType',
'daysInYearType' => 'daysInYearType',
'interestRecalculationData' => 'interestRecalculationData',
'principalVariationsForBorrowerCycle' => 'principalVariationsForBorrowerCycle',
'interestRateVariationsForBorrowerCycle' => 'interestRateVariationsForBorrowerCycle',
'numberOfRepaymentVariationsForBorrowerCycle' => 'numberOfRepaymentVariationsForBorrowerCycle',
'fundOptions' => 'fundOptions',
'repaymentFrequencyTypeOptions' => 'repaymentFrequencyTypeOptions',
'interestRateFrequencyTypeOptions' => 'interestRateFrequencyTypeOptions',
'amortizationTypeOptions' => 'amortizationTypeOptions',
'interestTypeOptions' => 'interestTypeOptions',
'interestCalculationPeriodTypeOptions' => 'interestCalculationPeriodTypeOptions',
'chargeOptions' => 'chargeOptions',
'multiDisburseLoan' => 'multiDisburseLoan',
'outstandingLoanBalance' => 'outstandingLoanBalance',
'interestRecalculationEnabled' => 'interestRecalculationEnabled',
'compoundingToBePostedAsTransaction' => 'compoundingToBePostedAsTransaction',
'equalAmortization' => 'equalAmortization',
'floatingInterestRateCalculationAllowed' => 'floatingInterestRateCalculationAllowed',
'linkedToFloatingInterestRates' => 'linkedToFloatingInterestRates',
'variableInstallmentsAllowed' => 'variableInstallmentsAllowed',
'getloanProductConfigurableAttributes' => 'getloanProductConfigurableAttributes',
'minimumGapBetweenInstallments' => 'minimumGapBetweenInstallments',
'maximumGapBetweenInstallments' => 'maximumGapBetweenInstallments'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'description' => 'setDescription',
'fundId' => 'setFundId',
'fundName' => 'setFundName',
'startDate' => 'setStartDate',
'closeDate' => 'setCloseDate',
'currency' => 'setCurrency',
'principal' => 'setPrincipal',
'minPrincipal' => 'setMinPrincipal',
'maxPrincipal' => 'setMaxPrincipal',
'numberOfRepayments' => 'setNumberOfRepayments',
'minNumberOfRepayments' => 'setMinNumberOfRepayments',
'maxNumberOfRepayments' => 'setMaxNumberOfRepayments',
'repaymentEvery' => 'setRepaymentEvery',
'repaymentFrequencyType' => 'setRepaymentFrequencyType',
'interestRatePerPeriod' => 'setInterestRatePerPeriod',
'minInterestRatePerPeriod' => 'setMinInterestRatePerPeriod',
'maxInterestRatePerPeriod' => 'setMaxInterestRatePerPeriod',
'interestRateFrequencyType' => 'setInterestRateFrequencyType',
'annualInterestRate' => 'setAnnualInterestRate',
'interestRateDifferential' => 'setInterestRateDifferential',
'minDifferentialLendingRate' => 'setMinDifferentialLendingRate',
'defaultDifferentialLendingRate' => 'setDefaultDifferentialLendingRate',
'maxDifferentialLendingRate' => 'setMaxDifferentialLendingRate',
'amortizationType' => 'setAmortizationType',
'interestType' => 'setInterestType',
'interestCalculationPeriodType' => 'setInterestCalculationPeriodType',
'allowPartialPeriodInterestCalcualtion' => 'setAllowPartialPeriodInterestCalcualtion',
'inArrearsTolerance' => 'setInArrearsTolerance',
'transactionProcessingStrategyId' => 'setTransactionProcessingStrategyId',
'transactionProcessingStrategyName' => 'setTransactionProcessingStrategyName',
'graceOnPrincipalPayment' => 'setGraceOnPrincipalPayment',
'recurringMoratoriumOnPrincipalPeriods' => 'setRecurringMoratoriumOnPrincipalPeriods',
'graceOnInterestPayment' => 'setGraceOnInterestPayment',
'graceOnInterestCharged' => 'setGraceOnInterestCharged',
'graceOnArrearsAgeing' => 'setGraceOnArrearsAgeing',
'daysInMonthType' => 'setDaysInMonthType',
'daysInYearType' => 'setDaysInYearType',
'interestRecalculationData' => 'setInterestRecalculationData',
'principalVariationsForBorrowerCycle' => 'setPrincipalVariationsForBorrowerCycle',
'interestRateVariationsForBorrowerCycle' => 'setInterestRateVariationsForBorrowerCycle',
'numberOfRepaymentVariationsForBorrowerCycle' => 'setNumberOfRepaymentVariationsForBorrowerCycle',
'fundOptions' => 'setFundOptions',
'repaymentFrequencyTypeOptions' => 'setRepaymentFrequencyTypeOptions',
'interestRateFrequencyTypeOptions' => 'setInterestRateFrequencyTypeOptions',
'amortizationTypeOptions' => 'setAmortizationTypeOptions',
'interestTypeOptions' => 'setInterestTypeOptions',
'interestCalculationPeriodTypeOptions' => 'setInterestCalculationPeriodTypeOptions',
'chargeOptions' => 'setChargeOptions',
'multiDisburseLoan' => 'setMultiDisburseLoan',
'outstandingLoanBalance' => 'setOutstandingLoanBalance',
'interestRecalculationEnabled' => 'setInterestRecalculationEnabled',
'compoundingToBePostedAsTransaction' => 'setCompoundingToBePostedAsTransaction',
'equalAmortization' => 'setEqualAmortization',
'floatingInterestRateCalculationAllowed' => 'setFloatingInterestRateCalculationAllowed',
'linkedToFloatingInterestRates' => 'setLinkedToFloatingInterestRates',
'variableInstallmentsAllowed' => 'setVariableInstallmentsAllowed',
'getloanProductConfigurableAttributes' => 'setGetloanProductConfigurableAttributes',
'minimumGapBetweenInstallments' => 'setMinimumGapBetweenInstallments',
'maximumGapBetweenInstallments' => 'setMaximumGapBetweenInstallments'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'description' => 'getDescription',
'fundId' => 'getFundId',
'fundName' => 'getFundName',
'startDate' => 'getStartDate',
'closeDate' => 'getCloseDate',
'currency' => 'getCurrency',
'principal' => 'getPrincipal',
'minPrincipal' => 'getMinPrincipal',
'maxPrincipal' => 'getMaxPrincipal',
'numberOfRepayments' => 'getNumberOfRepayments',
'minNumberOfRepayments' => 'getMinNumberOfRepayments',
'maxNumberOfRepayments' => 'getMaxNumberOfRepayments',
'repaymentEvery' => 'getRepaymentEvery',
'repaymentFrequencyType' => 'getRepaymentFrequencyType',
'interestRatePerPeriod' => 'getInterestRatePerPeriod',
'minInterestRatePerPeriod' => 'getMinInterestRatePerPeriod',
'maxInterestRatePerPeriod' => 'getMaxInterestRatePerPeriod',
'interestRateFrequencyType' => 'getInterestRateFrequencyType',
'annualInterestRate' => 'getAnnualInterestRate',
'interestRateDifferential' => 'getInterestRateDifferential',
'minDifferentialLendingRate' => 'getMinDifferentialLendingRate',
'defaultDifferentialLendingRate' => 'getDefaultDifferentialLendingRate',
'maxDifferentialLendingRate' => 'getMaxDifferentialLendingRate',
'amortizationType' => 'getAmortizationType',
'interestType' => 'getInterestType',
'interestCalculationPeriodType' => 'getInterestCalculationPeriodType',
'allowPartialPeriodInterestCalcualtion' => 'getAllowPartialPeriodInterestCalcualtion',
'inArrearsTolerance' => 'getInArrearsTolerance',
'transactionProcessingStrategyId' => 'getTransactionProcessingStrategyId',
'transactionProcessingStrategyName' => 'getTransactionProcessingStrategyName',
'graceOnPrincipalPayment' => 'getGraceOnPrincipalPayment',
'recurringMoratoriumOnPrincipalPeriods' => 'getRecurringMoratoriumOnPrincipalPeriods',
'graceOnInterestPayment' => 'getGraceOnInterestPayment',
'graceOnInterestCharged' => 'getGraceOnInterestCharged',
'graceOnArrearsAgeing' => 'getGraceOnArrearsAgeing',
'daysInMonthType' => 'getDaysInMonthType',
'daysInYearType' => 'getDaysInYearType',
'interestRecalculationData' => 'getInterestRecalculationData',
'principalVariationsForBorrowerCycle' => 'getPrincipalVariationsForBorrowerCycle',
'interestRateVariationsForBorrowerCycle' => 'getInterestRateVariationsForBorrowerCycle',
'numberOfRepaymentVariationsForBorrowerCycle' => 'getNumberOfRepaymentVariationsForBorrowerCycle',
'fundOptions' => 'getFundOptions',
'repaymentFrequencyTypeOptions' => 'getRepaymentFrequencyTypeOptions',
'interestRateFrequencyTypeOptions' => 'getInterestRateFrequencyTypeOptions',
'amortizationTypeOptions' => 'getAmortizationTypeOptions',
'interestTypeOptions' => 'getInterestTypeOptions',
'interestCalculationPeriodTypeOptions' => 'getInterestCalculationPeriodTypeOptions',
'chargeOptions' => 'getChargeOptions',
'multiDisburseLoan' => 'getMultiDisburseLoan',
'outstandingLoanBalance' => 'getOutstandingLoanBalance',
'interestRecalculationEnabled' => 'getInterestRecalculationEnabled',
'compoundingToBePostedAsTransaction' => 'getCompoundingToBePostedAsTransaction',
'equalAmortization' => 'getEqualAmortization',
'floatingInterestRateCalculationAllowed' => 'getFloatingInterestRateCalculationAllowed',
'linkedToFloatingInterestRates' => 'getLinkedToFloatingInterestRates',
'variableInstallmentsAllowed' => 'getVariableInstallmentsAllowed',
'getloanProductConfigurableAttributes' => 'getGetloanProductConfigurableAttributes',
'minimumGapBetweenInstallments' => 'getMinimumGapBetweenInstallments',
'maximumGapBetweenInstallments' => 'getMaximumGapBetweenInstallments'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['fundId'] = isset($data['fundId']) ? $data['fundId'] : null;
        $this->container['fundName'] = isset($data['fundName']) ? $data['fundName'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['closeDate'] = isset($data['closeDate']) ? $data['closeDate'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['principal'] = isset($data['principal']) ? $data['principal'] : null;
        $this->container['minPrincipal'] = isset($data['minPrincipal']) ? $data['minPrincipal'] : null;
        $this->container['maxPrincipal'] = isset($data['maxPrincipal']) ? $data['maxPrincipal'] : null;
        $this->container['numberOfRepayments'] = isset($data['numberOfRepayments']) ? $data['numberOfRepayments'] : null;
        $this->container['minNumberOfRepayments'] = isset($data['minNumberOfRepayments']) ? $data['minNumberOfRepayments'] : null;
        $this->container['maxNumberOfRepayments'] = isset($data['maxNumberOfRepayments']) ? $data['maxNumberOfRepayments'] : null;
        $this->container['repaymentEvery'] = isset($data['repaymentEvery']) ? $data['repaymentEvery'] : null;
        $this->container['repaymentFrequencyType'] = isset($data['repaymentFrequencyType']) ? $data['repaymentFrequencyType'] : null;
        $this->container['interestRatePerPeriod'] = isset($data['interestRatePerPeriod']) ? $data['interestRatePerPeriod'] : null;
        $this->container['minInterestRatePerPeriod'] = isset($data['minInterestRatePerPeriod']) ? $data['minInterestRatePerPeriod'] : null;
        $this->container['maxInterestRatePerPeriod'] = isset($data['maxInterestRatePerPeriod']) ? $data['maxInterestRatePerPeriod'] : null;
        $this->container['interestRateFrequencyType'] = isset($data['interestRateFrequencyType']) ? $data['interestRateFrequencyType'] : null;
        $this->container['annualInterestRate'] = isset($data['annualInterestRate']) ? $data['annualInterestRate'] : null;
        $this->container['interestRateDifferential'] = isset($data['interestRateDifferential']) ? $data['interestRateDifferential'] : null;
        $this->container['minDifferentialLendingRate'] = isset($data['minDifferentialLendingRate']) ? $data['minDifferentialLendingRate'] : null;
        $this->container['defaultDifferentialLendingRate'] = isset($data['defaultDifferentialLendingRate']) ? $data['defaultDifferentialLendingRate'] : null;
        $this->container['maxDifferentialLendingRate'] = isset($data['maxDifferentialLendingRate']) ? $data['maxDifferentialLendingRate'] : null;
        $this->container['amortizationType'] = isset($data['amortizationType']) ? $data['amortizationType'] : null;
        $this->container['interestType'] = isset($data['interestType']) ? $data['interestType'] : null;
        $this->container['interestCalculationPeriodType'] = isset($data['interestCalculationPeriodType']) ? $data['interestCalculationPeriodType'] : null;
        $this->container['allowPartialPeriodInterestCalcualtion'] = isset($data['allowPartialPeriodInterestCalcualtion']) ? $data['allowPartialPeriodInterestCalcualtion'] : null;
        $this->container['inArrearsTolerance'] = isset($data['inArrearsTolerance']) ? $data['inArrearsTolerance'] : null;
        $this->container['transactionProcessingStrategyId'] = isset($data['transactionProcessingStrategyId']) ? $data['transactionProcessingStrategyId'] : null;
        $this->container['transactionProcessingStrategyName'] = isset($data['transactionProcessingStrategyName']) ? $data['transactionProcessingStrategyName'] : null;
        $this->container['graceOnPrincipalPayment'] = isset($data['graceOnPrincipalPayment']) ? $data['graceOnPrincipalPayment'] : null;
        $this->container['recurringMoratoriumOnPrincipalPeriods'] = isset($data['recurringMoratoriumOnPrincipalPeriods']) ? $data['recurringMoratoriumOnPrincipalPeriods'] : null;
        $this->container['graceOnInterestPayment'] = isset($data['graceOnInterestPayment']) ? $data['graceOnInterestPayment'] : null;
        $this->container['graceOnInterestCharged'] = isset($data['graceOnInterestCharged']) ? $data['graceOnInterestCharged'] : null;
        $this->container['graceOnArrearsAgeing'] = isset($data['graceOnArrearsAgeing']) ? $data['graceOnArrearsAgeing'] : null;
        $this->container['daysInMonthType'] = isset($data['daysInMonthType']) ? $data['daysInMonthType'] : null;
        $this->container['daysInYearType'] = isset($data['daysInYearType']) ? $data['daysInYearType'] : null;
        $this->container['interestRecalculationData'] = isset($data['interestRecalculationData']) ? $data['interestRecalculationData'] : null;
        $this->container['principalVariationsForBorrowerCycle'] = isset($data['principalVariationsForBorrowerCycle']) ? $data['principalVariationsForBorrowerCycle'] : null;
        $this->container['interestRateVariationsForBorrowerCycle'] = isset($data['interestRateVariationsForBorrowerCycle']) ? $data['interestRateVariationsForBorrowerCycle'] : null;
        $this->container['numberOfRepaymentVariationsForBorrowerCycle'] = isset($data['numberOfRepaymentVariationsForBorrowerCycle']) ? $data['numberOfRepaymentVariationsForBorrowerCycle'] : null;
        $this->container['fundOptions'] = isset($data['fundOptions']) ? $data['fundOptions'] : null;
        $this->container['repaymentFrequencyTypeOptions'] = isset($data['repaymentFrequencyTypeOptions']) ? $data['repaymentFrequencyTypeOptions'] : null;
        $this->container['interestRateFrequencyTypeOptions'] = isset($data['interestRateFrequencyTypeOptions']) ? $data['interestRateFrequencyTypeOptions'] : null;
        $this->container['amortizationTypeOptions'] = isset($data['amortizationTypeOptions']) ? $data['amortizationTypeOptions'] : null;
        $this->container['interestTypeOptions'] = isset($data['interestTypeOptions']) ? $data['interestTypeOptions'] : null;
        $this->container['interestCalculationPeriodTypeOptions'] = isset($data['interestCalculationPeriodTypeOptions']) ? $data['interestCalculationPeriodTypeOptions'] : null;
        $this->container['chargeOptions'] = isset($data['chargeOptions']) ? $data['chargeOptions'] : null;
        $this->container['multiDisburseLoan'] = isset($data['multiDisburseLoan']) ? $data['multiDisburseLoan'] : null;
        $this->container['outstandingLoanBalance'] = isset($data['outstandingLoanBalance']) ? $data['outstandingLoanBalance'] : null;
        $this->container['interestRecalculationEnabled'] = isset($data['interestRecalculationEnabled']) ? $data['interestRecalculationEnabled'] : null;
        $this->container['compoundingToBePostedAsTransaction'] = isset($data['compoundingToBePostedAsTransaction']) ? $data['compoundingToBePostedAsTransaction'] : null;
        $this->container['equalAmortization'] = isset($data['equalAmortization']) ? $data['equalAmortization'] : null;
        $this->container['floatingInterestRateCalculationAllowed'] = isset($data['floatingInterestRateCalculationAllowed']) ? $data['floatingInterestRateCalculationAllowed'] : null;
        $this->container['linkedToFloatingInterestRates'] = isset($data['linkedToFloatingInterestRates']) ? $data['linkedToFloatingInterestRates'] : null;
        $this->container['variableInstallmentsAllowed'] = isset($data['variableInstallmentsAllowed']) ? $data['variableInstallmentsAllowed'] : null;
        $this->container['getloanProductConfigurableAttributes'] = isset($data['getloanProductConfigurableAttributes']) ? $data['getloanProductConfigurableAttributes'] : null;
        $this->container['minimumGapBetweenInstallments'] = isset($data['minimumGapBetweenInstallments']) ? $data['minimumGapBetweenInstallments'] : null;
        $this->container['maximumGapBetweenInstallments'] = isset($data['maximumGapBetweenInstallments']) ? $data['maximumGapBetweenInstallments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets fundId
     *
     * @return int
     */
    public function getFundId()
    {
        return $this->container['fundId'];
    }

    /**
     * Sets fundId
     *
     * @param int $fundId fundId
     *
     * @return $this
     */
    public function setFundId($fundId)
    {
        $this->container['fundId'] = $fundId;

        return $this;
    }

    /**
     * Gets fundName
     *
     * @return string
     */
    public function getFundName()
    {
        return $this->container['fundName'];
    }

    /**
     * Sets fundName
     *
     * @param string $fundName fundName
     *
     * @return $this
     */
    public function setFundName($fundName)
    {
        $this->container['fundName'] = $fundName;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate startDate
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets closeDate
     *
     * @return \DateTime
     */
    public function getCloseDate()
    {
        return $this->container['closeDate'];
    }

    /**
     * Sets closeDate
     *
     * @param \DateTime $closeDate closeDate
     *
     * @return $this
     */
    public function setCloseDate($closeDate)
    {
        $this->container['closeDate'] = $closeDate;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Frengky\Fineract\Model\CurrencyData
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Frengky\Fineract\Model\CurrencyData $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return float
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param float $principal principal
     *
     * @return $this
     */
    public function setPrincipal($principal)
    {
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets minPrincipal
     *
     * @return float
     */
    public function getMinPrincipal()
    {
        return $this->container['minPrincipal'];
    }

    /**
     * Sets minPrincipal
     *
     * @param float $minPrincipal minPrincipal
     *
     * @return $this
     */
    public function setMinPrincipal($minPrincipal)
    {
        $this->container['minPrincipal'] = $minPrincipal;

        return $this;
    }

    /**
     * Gets maxPrincipal
     *
     * @return float
     */
    public function getMaxPrincipal()
    {
        return $this->container['maxPrincipal'];
    }

    /**
     * Sets maxPrincipal
     *
     * @param float $maxPrincipal maxPrincipal
     *
     * @return $this
     */
    public function setMaxPrincipal($maxPrincipal)
    {
        $this->container['maxPrincipal'] = $maxPrincipal;

        return $this;
    }

    /**
     * Gets numberOfRepayments
     *
     * @return int
     */
    public function getNumberOfRepayments()
    {
        return $this->container['numberOfRepayments'];
    }

    /**
     * Sets numberOfRepayments
     *
     * @param int $numberOfRepayments numberOfRepayments
     *
     * @return $this
     */
    public function setNumberOfRepayments($numberOfRepayments)
    {
        $this->container['numberOfRepayments'] = $numberOfRepayments;

        return $this;
    }

    /**
     * Gets minNumberOfRepayments
     *
     * @return int
     */
    public function getMinNumberOfRepayments()
    {
        return $this->container['minNumberOfRepayments'];
    }

    /**
     * Sets minNumberOfRepayments
     *
     * @param int $minNumberOfRepayments minNumberOfRepayments
     *
     * @return $this
     */
    public function setMinNumberOfRepayments($minNumberOfRepayments)
    {
        $this->container['minNumberOfRepayments'] = $minNumberOfRepayments;

        return $this;
    }

    /**
     * Gets maxNumberOfRepayments
     *
     * @return int
     */
    public function getMaxNumberOfRepayments()
    {
        return $this->container['maxNumberOfRepayments'];
    }

    /**
     * Sets maxNumberOfRepayments
     *
     * @param int $maxNumberOfRepayments maxNumberOfRepayments
     *
     * @return $this
     */
    public function setMaxNumberOfRepayments($maxNumberOfRepayments)
    {
        $this->container['maxNumberOfRepayments'] = $maxNumberOfRepayments;

        return $this;
    }

    /**
     * Gets repaymentEvery
     *
     * @return int
     */
    public function getRepaymentEvery()
    {
        return $this->container['repaymentEvery'];
    }

    /**
     * Sets repaymentEvery
     *
     * @param int $repaymentEvery repaymentEvery
     *
     * @return $this
     */
    public function setRepaymentEvery($repaymentEvery)
    {
        $this->container['repaymentEvery'] = $repaymentEvery;

        return $this;
    }

    /**
     * Gets repaymentFrequencyType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getRepaymentFrequencyType()
    {
        return $this->container['repaymentFrequencyType'];
    }

    /**
     * Sets repaymentFrequencyType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $repaymentFrequencyType repaymentFrequencyType
     *
     * @return $this
     */
    public function setRepaymentFrequencyType($repaymentFrequencyType)
    {
        $this->container['repaymentFrequencyType'] = $repaymentFrequencyType;

        return $this;
    }

    /**
     * Gets interestRatePerPeriod
     *
     * @return float
     */
    public function getInterestRatePerPeriod()
    {
        return $this->container['interestRatePerPeriod'];
    }

    /**
     * Sets interestRatePerPeriod
     *
     * @param float $interestRatePerPeriod interestRatePerPeriod
     *
     * @return $this
     */
    public function setInterestRatePerPeriod($interestRatePerPeriod)
    {
        $this->container['interestRatePerPeriod'] = $interestRatePerPeriod;

        return $this;
    }

    /**
     * Gets minInterestRatePerPeriod
     *
     * @return float
     */
    public function getMinInterestRatePerPeriod()
    {
        return $this->container['minInterestRatePerPeriod'];
    }

    /**
     * Sets minInterestRatePerPeriod
     *
     * @param float $minInterestRatePerPeriod minInterestRatePerPeriod
     *
     * @return $this
     */
    public function setMinInterestRatePerPeriod($minInterestRatePerPeriod)
    {
        $this->container['minInterestRatePerPeriod'] = $minInterestRatePerPeriod;

        return $this;
    }

    /**
     * Gets maxInterestRatePerPeriod
     *
     * @return float
     */
    public function getMaxInterestRatePerPeriod()
    {
        return $this->container['maxInterestRatePerPeriod'];
    }

    /**
     * Sets maxInterestRatePerPeriod
     *
     * @param float $maxInterestRatePerPeriod maxInterestRatePerPeriod
     *
     * @return $this
     */
    public function setMaxInterestRatePerPeriod($maxInterestRatePerPeriod)
    {
        $this->container['maxInterestRatePerPeriod'] = $maxInterestRatePerPeriod;

        return $this;
    }

    /**
     * Gets interestRateFrequencyType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getInterestRateFrequencyType()
    {
        return $this->container['interestRateFrequencyType'];
    }

    /**
     * Sets interestRateFrequencyType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $interestRateFrequencyType interestRateFrequencyType
     *
     * @return $this
     */
    public function setInterestRateFrequencyType($interestRateFrequencyType)
    {
        $this->container['interestRateFrequencyType'] = $interestRateFrequencyType;

        return $this;
    }

    /**
     * Gets annualInterestRate
     *
     * @return float
     */
    public function getAnnualInterestRate()
    {
        return $this->container['annualInterestRate'];
    }

    /**
     * Sets annualInterestRate
     *
     * @param float $annualInterestRate annualInterestRate
     *
     * @return $this
     */
    public function setAnnualInterestRate($annualInterestRate)
    {
        $this->container['annualInterestRate'] = $annualInterestRate;

        return $this;
    }

    /**
     * Gets interestRateDifferential
     *
     * @return float
     */
    public function getInterestRateDifferential()
    {
        return $this->container['interestRateDifferential'];
    }

    /**
     * Sets interestRateDifferential
     *
     * @param float $interestRateDifferential interestRateDifferential
     *
     * @return $this
     */
    public function setInterestRateDifferential($interestRateDifferential)
    {
        $this->container['interestRateDifferential'] = $interestRateDifferential;

        return $this;
    }

    /**
     * Gets minDifferentialLendingRate
     *
     * @return float
     */
    public function getMinDifferentialLendingRate()
    {
        return $this->container['minDifferentialLendingRate'];
    }

    /**
     * Sets minDifferentialLendingRate
     *
     * @param float $minDifferentialLendingRate minDifferentialLendingRate
     *
     * @return $this
     */
    public function setMinDifferentialLendingRate($minDifferentialLendingRate)
    {
        $this->container['minDifferentialLendingRate'] = $minDifferentialLendingRate;

        return $this;
    }

    /**
     * Gets defaultDifferentialLendingRate
     *
     * @return float
     */
    public function getDefaultDifferentialLendingRate()
    {
        return $this->container['defaultDifferentialLendingRate'];
    }

    /**
     * Sets defaultDifferentialLendingRate
     *
     * @param float $defaultDifferentialLendingRate defaultDifferentialLendingRate
     *
     * @return $this
     */
    public function setDefaultDifferentialLendingRate($defaultDifferentialLendingRate)
    {
        $this->container['defaultDifferentialLendingRate'] = $defaultDifferentialLendingRate;

        return $this;
    }

    /**
     * Gets maxDifferentialLendingRate
     *
     * @return float
     */
    public function getMaxDifferentialLendingRate()
    {
        return $this->container['maxDifferentialLendingRate'];
    }

    /**
     * Sets maxDifferentialLendingRate
     *
     * @param float $maxDifferentialLendingRate maxDifferentialLendingRate
     *
     * @return $this
     */
    public function setMaxDifferentialLendingRate($maxDifferentialLendingRate)
    {
        $this->container['maxDifferentialLendingRate'] = $maxDifferentialLendingRate;

        return $this;
    }

    /**
     * Gets amortizationType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getAmortizationType()
    {
        return $this->container['amortizationType'];
    }

    /**
     * Sets amortizationType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $amortizationType amortizationType
     *
     * @return $this
     */
    public function setAmortizationType($amortizationType)
    {
        $this->container['amortizationType'] = $amortizationType;

        return $this;
    }

    /**
     * Gets interestType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getInterestType()
    {
        return $this->container['interestType'];
    }

    /**
     * Sets interestType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $interestType interestType
     *
     * @return $this
     */
    public function setInterestType($interestType)
    {
        $this->container['interestType'] = $interestType;

        return $this;
    }

    /**
     * Gets interestCalculationPeriodType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getInterestCalculationPeriodType()
    {
        return $this->container['interestCalculationPeriodType'];
    }

    /**
     * Sets interestCalculationPeriodType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $interestCalculationPeriodType interestCalculationPeriodType
     *
     * @return $this
     */
    public function setInterestCalculationPeriodType($interestCalculationPeriodType)
    {
        $this->container['interestCalculationPeriodType'] = $interestCalculationPeriodType;

        return $this;
    }

    /**
     * Gets allowPartialPeriodInterestCalcualtion
     *
     * @return bool
     */
    public function getAllowPartialPeriodInterestCalcualtion()
    {
        return $this->container['allowPartialPeriodInterestCalcualtion'];
    }

    /**
     * Sets allowPartialPeriodInterestCalcualtion
     *
     * @param bool $allowPartialPeriodInterestCalcualtion allowPartialPeriodInterestCalcualtion
     *
     * @return $this
     */
    public function setAllowPartialPeriodInterestCalcualtion($allowPartialPeriodInterestCalcualtion)
    {
        $this->container['allowPartialPeriodInterestCalcualtion'] = $allowPartialPeriodInterestCalcualtion;

        return $this;
    }

    /**
     * Gets inArrearsTolerance
     *
     * @return float
     */
    public function getInArrearsTolerance()
    {
        return $this->container['inArrearsTolerance'];
    }

    /**
     * Sets inArrearsTolerance
     *
     * @param float $inArrearsTolerance inArrearsTolerance
     *
     * @return $this
     */
    public function setInArrearsTolerance($inArrearsTolerance)
    {
        $this->container['inArrearsTolerance'] = $inArrearsTolerance;

        return $this;
    }

    /**
     * Gets transactionProcessingStrategyId
     *
     * @return int
     */
    public function getTransactionProcessingStrategyId()
    {
        return $this->container['transactionProcessingStrategyId'];
    }

    /**
     * Sets transactionProcessingStrategyId
     *
     * @param int $transactionProcessingStrategyId transactionProcessingStrategyId
     *
     * @return $this
     */
    public function setTransactionProcessingStrategyId($transactionProcessingStrategyId)
    {
        $this->container['transactionProcessingStrategyId'] = $transactionProcessingStrategyId;

        return $this;
    }

    /**
     * Gets transactionProcessingStrategyName
     *
     * @return string
     */
    public function getTransactionProcessingStrategyName()
    {
        return $this->container['transactionProcessingStrategyName'];
    }

    /**
     * Sets transactionProcessingStrategyName
     *
     * @param string $transactionProcessingStrategyName transactionProcessingStrategyName
     *
     * @return $this
     */
    public function setTransactionProcessingStrategyName($transactionProcessingStrategyName)
    {
        $this->container['transactionProcessingStrategyName'] = $transactionProcessingStrategyName;

        return $this;
    }

    /**
     * Gets graceOnPrincipalPayment
     *
     * @return int
     */
    public function getGraceOnPrincipalPayment()
    {
        return $this->container['graceOnPrincipalPayment'];
    }

    /**
     * Sets graceOnPrincipalPayment
     *
     * @param int $graceOnPrincipalPayment graceOnPrincipalPayment
     *
     * @return $this
     */
    public function setGraceOnPrincipalPayment($graceOnPrincipalPayment)
    {
        $this->container['graceOnPrincipalPayment'] = $graceOnPrincipalPayment;

        return $this;
    }

    /**
     * Gets recurringMoratoriumOnPrincipalPeriods
     *
     * @return int
     */
    public function getRecurringMoratoriumOnPrincipalPeriods()
    {
        return $this->container['recurringMoratoriumOnPrincipalPeriods'];
    }

    /**
     * Sets recurringMoratoriumOnPrincipalPeriods
     *
     * @param int $recurringMoratoriumOnPrincipalPeriods recurringMoratoriumOnPrincipalPeriods
     *
     * @return $this
     */
    public function setRecurringMoratoriumOnPrincipalPeriods($recurringMoratoriumOnPrincipalPeriods)
    {
        $this->container['recurringMoratoriumOnPrincipalPeriods'] = $recurringMoratoriumOnPrincipalPeriods;

        return $this;
    }

    /**
     * Gets graceOnInterestPayment
     *
     * @return int
     */
    public function getGraceOnInterestPayment()
    {
        return $this->container['graceOnInterestPayment'];
    }

    /**
     * Sets graceOnInterestPayment
     *
     * @param int $graceOnInterestPayment graceOnInterestPayment
     *
     * @return $this
     */
    public function setGraceOnInterestPayment($graceOnInterestPayment)
    {
        $this->container['graceOnInterestPayment'] = $graceOnInterestPayment;

        return $this;
    }

    /**
     * Gets graceOnInterestCharged
     *
     * @return int
     */
    public function getGraceOnInterestCharged()
    {
        return $this->container['graceOnInterestCharged'];
    }

    /**
     * Sets graceOnInterestCharged
     *
     * @param int $graceOnInterestCharged graceOnInterestCharged
     *
     * @return $this
     */
    public function setGraceOnInterestCharged($graceOnInterestCharged)
    {
        $this->container['graceOnInterestCharged'] = $graceOnInterestCharged;

        return $this;
    }

    /**
     * Gets graceOnArrearsAgeing
     *
     * @return int
     */
    public function getGraceOnArrearsAgeing()
    {
        return $this->container['graceOnArrearsAgeing'];
    }

    /**
     * Sets graceOnArrearsAgeing
     *
     * @param int $graceOnArrearsAgeing graceOnArrearsAgeing
     *
     * @return $this
     */
    public function setGraceOnArrearsAgeing($graceOnArrearsAgeing)
    {
        $this->container['graceOnArrearsAgeing'] = $graceOnArrearsAgeing;

        return $this;
    }

    /**
     * Gets daysInMonthType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getDaysInMonthType()
    {
        return $this->container['daysInMonthType'];
    }

    /**
     * Sets daysInMonthType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $daysInMonthType daysInMonthType
     *
     * @return $this
     */
    public function setDaysInMonthType($daysInMonthType)
    {
        $this->container['daysInMonthType'] = $daysInMonthType;

        return $this;
    }

    /**
     * Gets daysInYearType
     *
     * @return \Frengky\Fineract\Model\EnumOptionData
     */
    public function getDaysInYearType()
    {
        return $this->container['daysInYearType'];
    }

    /**
     * Sets daysInYearType
     *
     * @param \Frengky\Fineract\Model\EnumOptionData $daysInYearType daysInYearType
     *
     * @return $this
     */
    public function setDaysInYearType($daysInYearType)
    {
        $this->container['daysInYearType'] = $daysInYearType;

        return $this;
    }

    /**
     * Gets interestRecalculationData
     *
     * @return \Frengky\Fineract\Model\LoanProductInterestRecalculationData
     */
    public function getInterestRecalculationData()
    {
        return $this->container['interestRecalculationData'];
    }

    /**
     * Sets interestRecalculationData
     *
     * @param \Frengky\Fineract\Model\LoanProductInterestRecalculationData $interestRecalculationData interestRecalculationData
     *
     * @return $this
     */
    public function setInterestRecalculationData($interestRecalculationData)
    {
        $this->container['interestRecalculationData'] = $interestRecalculationData;

        return $this;
    }

    /**
     * Gets principalVariationsForBorrowerCycle
     *
     * @return \Frengky\Fineract\Model\LoanProductBorrowerCycleVariationData[]
     */
    public function getPrincipalVariationsForBorrowerCycle()
    {
        return $this->container['principalVariationsForBorrowerCycle'];
    }

    /**
     * Sets principalVariationsForBorrowerCycle
     *
     * @param \Frengky\Fineract\Model\LoanProductBorrowerCycleVariationData[] $principalVariationsForBorrowerCycle principalVariationsForBorrowerCycle
     *
     * @return $this
     */
    public function setPrincipalVariationsForBorrowerCycle($principalVariationsForBorrowerCycle)
    {
        $this->container['principalVariationsForBorrowerCycle'] = $principalVariationsForBorrowerCycle;

        return $this;
    }

    /**
     * Gets interestRateVariationsForBorrowerCycle
     *
     * @return \Frengky\Fineract\Model\LoanProductBorrowerCycleVariationData[]
     */
    public function getInterestRateVariationsForBorrowerCycle()
    {
        return $this->container['interestRateVariationsForBorrowerCycle'];
    }

    /**
     * Sets interestRateVariationsForBorrowerCycle
     *
     * @param \Frengky\Fineract\Model\LoanProductBorrowerCycleVariationData[] $interestRateVariationsForBorrowerCycle interestRateVariationsForBorrowerCycle
     *
     * @return $this
     */
    public function setInterestRateVariationsForBorrowerCycle($interestRateVariationsForBorrowerCycle)
    {
        $this->container['interestRateVariationsForBorrowerCycle'] = $interestRateVariationsForBorrowerCycle;

        return $this;
    }

    /**
     * Gets numberOfRepaymentVariationsForBorrowerCycle
     *
     * @return \Frengky\Fineract\Model\LoanProductBorrowerCycleVariationData[]
     */
    public function getNumberOfRepaymentVariationsForBorrowerCycle()
    {
        return $this->container['numberOfRepaymentVariationsForBorrowerCycle'];
    }

    /**
     * Sets numberOfRepaymentVariationsForBorrowerCycle
     *
     * @param \Frengky\Fineract\Model\LoanProductBorrowerCycleVariationData[] $numberOfRepaymentVariationsForBorrowerCycle numberOfRepaymentVariationsForBorrowerCycle
     *
     * @return $this
     */
    public function setNumberOfRepaymentVariationsForBorrowerCycle($numberOfRepaymentVariationsForBorrowerCycle)
    {
        $this->container['numberOfRepaymentVariationsForBorrowerCycle'] = $numberOfRepaymentVariationsForBorrowerCycle;

        return $this;
    }

    /**
     * Gets fundOptions
     *
     * @return \Frengky\Fineract\Model\FundData[]
     */
    public function getFundOptions()
    {
        return $this->container['fundOptions'];
    }

    /**
     * Sets fundOptions
     *
     * @param \Frengky\Fineract\Model\FundData[] $fundOptions fundOptions
     *
     * @return $this
     */
    public function setFundOptions($fundOptions)
    {
        $this->container['fundOptions'] = $fundOptions;

        return $this;
    }

    /**
     * Gets repaymentFrequencyTypeOptions
     *
     * @return \Frengky\Fineract\Model\EnumOptionData[]
     */
    public function getRepaymentFrequencyTypeOptions()
    {
        return $this->container['repaymentFrequencyTypeOptions'];
    }

    /**
     * Sets repaymentFrequencyTypeOptions
     *
     * @param \Frengky\Fineract\Model\EnumOptionData[] $repaymentFrequencyTypeOptions repaymentFrequencyTypeOptions
     *
     * @return $this
     */
    public function setRepaymentFrequencyTypeOptions($repaymentFrequencyTypeOptions)
    {
        $this->container['repaymentFrequencyTypeOptions'] = $repaymentFrequencyTypeOptions;

        return $this;
    }

    /**
     * Gets interestRateFrequencyTypeOptions
     *
     * @return \Frengky\Fineract\Model\EnumOptionData[]
     */
    public function getInterestRateFrequencyTypeOptions()
    {
        return $this->container['interestRateFrequencyTypeOptions'];
    }

    /**
     * Sets interestRateFrequencyTypeOptions
     *
     * @param \Frengky\Fineract\Model\EnumOptionData[] $interestRateFrequencyTypeOptions interestRateFrequencyTypeOptions
     *
     * @return $this
     */
    public function setInterestRateFrequencyTypeOptions($interestRateFrequencyTypeOptions)
    {
        $this->container['interestRateFrequencyTypeOptions'] = $interestRateFrequencyTypeOptions;

        return $this;
    }

    /**
     * Gets amortizationTypeOptions
     *
     * @return \Frengky\Fineract\Model\EnumOptionData[]
     */
    public function getAmortizationTypeOptions()
    {
        return $this->container['amortizationTypeOptions'];
    }

    /**
     * Sets amortizationTypeOptions
     *
     * @param \Frengky\Fineract\Model\EnumOptionData[] $amortizationTypeOptions amortizationTypeOptions
     *
     * @return $this
     */
    public function setAmortizationTypeOptions($amortizationTypeOptions)
    {
        $this->container['amortizationTypeOptions'] = $amortizationTypeOptions;

        return $this;
    }

    /**
     * Gets interestTypeOptions
     *
     * @return \Frengky\Fineract\Model\EnumOptionData[]
     */
    public function getInterestTypeOptions()
    {
        return $this->container['interestTypeOptions'];
    }

    /**
     * Sets interestTypeOptions
     *
     * @param \Frengky\Fineract\Model\EnumOptionData[] $interestTypeOptions interestTypeOptions
     *
     * @return $this
     */
    public function setInterestTypeOptions($interestTypeOptions)
    {
        $this->container['interestTypeOptions'] = $interestTypeOptions;

        return $this;
    }

    /**
     * Gets interestCalculationPeriodTypeOptions
     *
     * @return \Frengky\Fineract\Model\EnumOptionData[]
     */
    public function getInterestCalculationPeriodTypeOptions()
    {
        return $this->container['interestCalculationPeriodTypeOptions'];
    }

    /**
     * Sets interestCalculationPeriodTypeOptions
     *
     * @param \Frengky\Fineract\Model\EnumOptionData[] $interestCalculationPeriodTypeOptions interestCalculationPeriodTypeOptions
     *
     * @return $this
     */
    public function setInterestCalculationPeriodTypeOptions($interestCalculationPeriodTypeOptions)
    {
        $this->container['interestCalculationPeriodTypeOptions'] = $interestCalculationPeriodTypeOptions;

        return $this;
    }

    /**
     * Gets chargeOptions
     *
     * @return \Frengky\Fineract\Model\ChargeData[]
     */
    public function getChargeOptions()
    {
        return $this->container['chargeOptions'];
    }

    /**
     * Sets chargeOptions
     *
     * @param \Frengky\Fineract\Model\ChargeData[] $chargeOptions chargeOptions
     *
     * @return $this
     */
    public function setChargeOptions($chargeOptions)
    {
        $this->container['chargeOptions'] = $chargeOptions;

        return $this;
    }

    /**
     * Gets multiDisburseLoan
     *
     * @return bool
     */
    public function getMultiDisburseLoan()
    {
        return $this->container['multiDisburseLoan'];
    }

    /**
     * Sets multiDisburseLoan
     *
     * @param bool $multiDisburseLoan multiDisburseLoan
     *
     * @return $this
     */
    public function setMultiDisburseLoan($multiDisburseLoan)
    {
        $this->container['multiDisburseLoan'] = $multiDisburseLoan;

        return $this;
    }

    /**
     * Gets outstandingLoanBalance
     *
     * @return float
     */
    public function getOutstandingLoanBalance()
    {
        return $this->container['outstandingLoanBalance'];
    }

    /**
     * Sets outstandingLoanBalance
     *
     * @param float $outstandingLoanBalance outstandingLoanBalance
     *
     * @return $this
     */
    public function setOutstandingLoanBalance($outstandingLoanBalance)
    {
        $this->container['outstandingLoanBalance'] = $outstandingLoanBalance;

        return $this;
    }

    /**
     * Gets interestRecalculationEnabled
     *
     * @return bool
     */
    public function getInterestRecalculationEnabled()
    {
        return $this->container['interestRecalculationEnabled'];
    }

    /**
     * Sets interestRecalculationEnabled
     *
     * @param bool $interestRecalculationEnabled interestRecalculationEnabled
     *
     * @return $this
     */
    public function setInterestRecalculationEnabled($interestRecalculationEnabled)
    {
        $this->container['interestRecalculationEnabled'] = $interestRecalculationEnabled;

        return $this;
    }

    /**
     * Gets compoundingToBePostedAsTransaction
     *
     * @return bool
     */
    public function getCompoundingToBePostedAsTransaction()
    {
        return $this->container['compoundingToBePostedAsTransaction'];
    }

    /**
     * Sets compoundingToBePostedAsTransaction
     *
     * @param bool $compoundingToBePostedAsTransaction compoundingToBePostedAsTransaction
     *
     * @return $this
     */
    public function setCompoundingToBePostedAsTransaction($compoundingToBePostedAsTransaction)
    {
        $this->container['compoundingToBePostedAsTransaction'] = $compoundingToBePostedAsTransaction;

        return $this;
    }

    /**
     * Gets equalAmortization
     *
     * @return bool
     */
    public function getEqualAmortization()
    {
        return $this->container['equalAmortization'];
    }

    /**
     * Sets equalAmortization
     *
     * @param bool $equalAmortization equalAmortization
     *
     * @return $this
     */
    public function setEqualAmortization($equalAmortization)
    {
        $this->container['equalAmortization'] = $equalAmortization;

        return $this;
    }

    /**
     * Gets floatingInterestRateCalculationAllowed
     *
     * @return bool
     */
    public function getFloatingInterestRateCalculationAllowed()
    {
        return $this->container['floatingInterestRateCalculationAllowed'];
    }

    /**
     * Sets floatingInterestRateCalculationAllowed
     *
     * @param bool $floatingInterestRateCalculationAllowed floatingInterestRateCalculationAllowed
     *
     * @return $this
     */
    public function setFloatingInterestRateCalculationAllowed($floatingInterestRateCalculationAllowed)
    {
        $this->container['floatingInterestRateCalculationAllowed'] = $floatingInterestRateCalculationAllowed;

        return $this;
    }

    /**
     * Gets linkedToFloatingInterestRates
     *
     * @return bool
     */
    public function getLinkedToFloatingInterestRates()
    {
        return $this->container['linkedToFloatingInterestRates'];
    }

    /**
     * Sets linkedToFloatingInterestRates
     *
     * @param bool $linkedToFloatingInterestRates linkedToFloatingInterestRates
     *
     * @return $this
     */
    public function setLinkedToFloatingInterestRates($linkedToFloatingInterestRates)
    {
        $this->container['linkedToFloatingInterestRates'] = $linkedToFloatingInterestRates;

        return $this;
    }

    /**
     * Gets variableInstallmentsAllowed
     *
     * @return bool
     */
    public function getVariableInstallmentsAllowed()
    {
        return $this->container['variableInstallmentsAllowed'];
    }

    /**
     * Sets variableInstallmentsAllowed
     *
     * @param bool $variableInstallmentsAllowed variableInstallmentsAllowed
     *
     * @return $this
     */
    public function setVariableInstallmentsAllowed($variableInstallmentsAllowed)
    {
        $this->container['variableInstallmentsAllowed'] = $variableInstallmentsAllowed;

        return $this;
    }

    /**
     * Gets getloanProductConfigurableAttributes
     *
     * @return \Frengky\Fineract\Model\LoanProductConfigurableAttributes
     */
    public function getGetloanProductConfigurableAttributes()
    {
        return $this->container['getloanProductConfigurableAttributes'];
    }

    /**
     * Sets getloanProductConfigurableAttributes
     *
     * @param \Frengky\Fineract\Model\LoanProductConfigurableAttributes $getloanProductConfigurableAttributes getloanProductConfigurableAttributes
     *
     * @return $this
     */
    public function setGetloanProductConfigurableAttributes($getloanProductConfigurableAttributes)
    {
        $this->container['getloanProductConfigurableAttributes'] = $getloanProductConfigurableAttributes;

        return $this;
    }

    /**
     * Gets minimumGapBetweenInstallments
     *
     * @return int
     */
    public function getMinimumGapBetweenInstallments()
    {
        return $this->container['minimumGapBetweenInstallments'];
    }

    /**
     * Sets minimumGapBetweenInstallments
     *
     * @param int $minimumGapBetweenInstallments minimumGapBetweenInstallments
     *
     * @return $this
     */
    public function setMinimumGapBetweenInstallments($minimumGapBetweenInstallments)
    {
        $this->container['minimumGapBetweenInstallments'] = $minimumGapBetweenInstallments;

        return $this;
    }

    /**
     * Gets maximumGapBetweenInstallments
     *
     * @return int
     */
    public function getMaximumGapBetweenInstallments()
    {
        return $this->container['maximumGapBetweenInstallments'];
    }

    /**
     * Sets maximumGapBetweenInstallments
     *
     * @param int $maximumGapBetweenInstallments maximumGapBetweenInstallments
     *
     * @return $this
     */
    public function setMaximumGapBetweenInstallments($maximumGapBetweenInstallments)
    {
        $this->container['maximumGapBetweenInstallments'] = $maximumGapBetweenInstallments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
