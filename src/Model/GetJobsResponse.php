<?php
/**
 * GetJobsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetJobsResponse Class Doc Comment
 *
 * @category Class
 * @description GetJobsResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetJobsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetJobsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'jobId' => 'int',
'displayName' => 'string',
'nextRunTime' => '\DateTime',
'initializingError' => 'string',
'cronExpression' => 'string',
'active' => 'bool',
'currentlyRunning' => 'bool',
'lastRunHistory' => '\Frengky\Fineract\Model\JobDetailHistoryData'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'jobId' => 'int64',
'displayName' => null,
'nextRunTime' => 'date-time',
'initializingError' => null,
'cronExpression' => null,
'active' => null,
'currentlyRunning' => null,
'lastRunHistory' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'jobId' => 'jobId',
'displayName' => 'displayName',
'nextRunTime' => 'nextRunTime',
'initializingError' => 'initializingError',
'cronExpression' => 'cronExpression',
'active' => 'active',
'currentlyRunning' => 'currentlyRunning',
'lastRunHistory' => 'lastRunHistory'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'jobId' => 'setJobId',
'displayName' => 'setDisplayName',
'nextRunTime' => 'setNextRunTime',
'initializingError' => 'setInitializingError',
'cronExpression' => 'setCronExpression',
'active' => 'setActive',
'currentlyRunning' => 'setCurrentlyRunning',
'lastRunHistory' => 'setLastRunHistory'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'jobId' => 'getJobId',
'displayName' => 'getDisplayName',
'nextRunTime' => 'getNextRunTime',
'initializingError' => 'getInitializingError',
'cronExpression' => 'getCronExpression',
'active' => 'getActive',
'currentlyRunning' => 'getCurrentlyRunning',
'lastRunHistory' => 'getLastRunHistory'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['jobId'] = isset($data['jobId']) ? $data['jobId'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['nextRunTime'] = isset($data['nextRunTime']) ? $data['nextRunTime'] : null;
        $this->container['initializingError'] = isset($data['initializingError']) ? $data['initializingError'] : null;
        $this->container['cronExpression'] = isset($data['cronExpression']) ? $data['cronExpression'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['currentlyRunning'] = isset($data['currentlyRunning']) ? $data['currentlyRunning'] : null;
        $this->container['lastRunHistory'] = isset($data['lastRunHistory']) ? $data['lastRunHistory'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets jobId
     *
     * @return int
     */
    public function getJobId()
    {
        return $this->container['jobId'];
    }

    /**
     * Sets jobId
     *
     * @param int $jobId jobId
     *
     * @return $this
     */
    public function setJobId($jobId)
    {
        $this->container['jobId'] = $jobId;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets nextRunTime
     *
     * @return \DateTime
     */
    public function getNextRunTime()
    {
        return $this->container['nextRunTime'];
    }

    /**
     * Sets nextRunTime
     *
     * @param \DateTime $nextRunTime nextRunTime
     *
     * @return $this
     */
    public function setNextRunTime($nextRunTime)
    {
        $this->container['nextRunTime'] = $nextRunTime;

        return $this;
    }

    /**
     * Gets initializingError
     *
     * @return string
     */
    public function getInitializingError()
    {
        return $this->container['initializingError'];
    }

    /**
     * Sets initializingError
     *
     * @param string $initializingError initializingError
     *
     * @return $this
     */
    public function setInitializingError($initializingError)
    {
        $this->container['initializingError'] = $initializingError;

        return $this;
    }

    /**
     * Gets cronExpression
     *
     * @return string
     */
    public function getCronExpression()
    {
        return $this->container['cronExpression'];
    }

    /**
     * Sets cronExpression
     *
     * @param string $cronExpression cronExpression
     *
     * @return $this
     */
    public function setCronExpression($cronExpression)
    {
        $this->container['cronExpression'] = $cronExpression;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets currentlyRunning
     *
     * @return bool
     */
    public function getCurrentlyRunning()
    {
        return $this->container['currentlyRunning'];
    }

    /**
     * Sets currentlyRunning
     *
     * @param bool $currentlyRunning currentlyRunning
     *
     * @return $this
     */
    public function setCurrentlyRunning($currentlyRunning)
    {
        $this->container['currentlyRunning'] = $currentlyRunning;

        return $this;
    }

    /**
     * Gets lastRunHistory
     *
     * @return \Frengky\Fineract\Model\JobDetailHistoryData
     */
    public function getLastRunHistory()
    {
        return $this->container['lastRunHistory'];
    }

    /**
     * Sets lastRunHistory
     *
     * @param \Frengky\Fineract\Model\JobDetailHistoryData $lastRunHistory lastRunHistory
     *
     * @return $this
     */
    public function setLastRunHistory($lastRunHistory)
    {
        $this->container['lastRunHistory'] = $lastRunHistory;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
