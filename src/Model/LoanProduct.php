<?php
/**
 * LoanProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * LoanProduct Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LoanProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LoanProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'shortName' => 'string',
'rates' => '\Frengky\Fineract\Model\Rate[]',
'loanProductRelatedDetail' => '\Frengky\Fineract\Model\LoanProductRelatedDetail',
'includeInBorrowerCycle' => 'bool',
'startDate' => '\DateTime',
'closeDate' => '\DateTime',
'externalId' => 'string',
'minimumDaysBetweenDisbursalAndFirstRepayment' => 'int',
'productInterestRecalculationDetails' => '\Frengky\Fineract\Model\LoanProductInterestRecalculationDetails',
'loanProductGuaranteeDetails' => '\Frengky\Fineract\Model\LoanProductGuaranteeDetails',
'principalThresholdForLastInstallment' => 'float',
'installmentAmountInMultiplesOf' => 'int',
'floatingRates' => '\Frengky\Fineract\Model\LoanProductFloatingRates',
'syncExpectedWithDisbursementDate' => 'bool',
'currency' => '\Frengky\Fineract\Model\MonetaryCurrency',
'accountingType' => 'int',
'interestRecalculationEnabled' => 'bool',
'principalAmount' => '\Frengky\Fineract\Model\Money',
'multiDisburseLoan' => 'bool',
'equalAmortization' => 'bool',
'linkedToFloatingInterestRate' => 'bool',
'cashBasedAccountingEnabled' => 'bool',
'upfrontAccrualAccountingEnabled' => 'bool',
'accountingDisabled' => 'bool',
'periodicAccrualAccountingEnabled' => 'bool',
'interestPeriodFrequencyType' => 'string',
'holdGuaranteeFundsEnabled' => 'bool',
'numberOfRepayments' => 'int',
'nominalInterestRatePerPeriod' => 'float',
'accrualBasedAccountingEnabled' => 'bool',
'arrearsBasedOnOriginalSchedule' => 'bool',
'minNominalInterestRatePerPeriod' => 'float',
'maxNominalInterestRatePerPeriod' => 'float',
'minNumberOfRepayments' => 'int',
'maxNumberOfRepayments' => 'int',
'repaymentStrategy' => '\Frengky\Fineract\Model\LoanTransactionProcessingStrategy',
'loanProductCharges' => '\Frengky\Fineract\Model\Charge[]',
'loanProductConfigurableAttributes' => '\Frengky\Fineract\Model\LoanProductConfigurableAttributes',
'minPrincipalAmount' => '\Frengky\Fineract\Model\Money',
'maxPrincipalAmount' => '\Frengky\Fineract\Model\Money',
'new' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'shortName' => null,
'rates' => null,
'loanProductRelatedDetail' => null,
'includeInBorrowerCycle' => null,
'startDate' => 'date',
'closeDate' => 'date',
'externalId' => null,
'minimumDaysBetweenDisbursalAndFirstRepayment' => 'int32',
'productInterestRecalculationDetails' => null,
'loanProductGuaranteeDetails' => null,
'principalThresholdForLastInstallment' => null,
'installmentAmountInMultiplesOf' => 'int32',
'floatingRates' => null,
'syncExpectedWithDisbursementDate' => null,
'currency' => null,
'accountingType' => 'int32',
'interestRecalculationEnabled' => null,
'principalAmount' => null,
'multiDisburseLoan' => null,
'equalAmortization' => null,
'linkedToFloatingInterestRate' => null,
'cashBasedAccountingEnabled' => null,
'upfrontAccrualAccountingEnabled' => null,
'accountingDisabled' => null,
'periodicAccrualAccountingEnabled' => null,
'interestPeriodFrequencyType' => null,
'holdGuaranteeFundsEnabled' => null,
'numberOfRepayments' => 'int32',
'nominalInterestRatePerPeriod' => null,
'accrualBasedAccountingEnabled' => null,
'arrearsBasedOnOriginalSchedule' => null,
'minNominalInterestRatePerPeriod' => null,
'maxNominalInterestRatePerPeriod' => null,
'minNumberOfRepayments' => 'int32',
'maxNumberOfRepayments' => 'int32',
'repaymentStrategy' => null,
'loanProductCharges' => null,
'loanProductConfigurableAttributes' => null,
'minPrincipalAmount' => null,
'maxPrincipalAmount' => null,
'new' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'shortName' => 'shortName',
'rates' => 'rates',
'loanProductRelatedDetail' => 'loanProductRelatedDetail',
'includeInBorrowerCycle' => 'includeInBorrowerCycle',
'startDate' => 'startDate',
'closeDate' => 'closeDate',
'externalId' => 'externalId',
'minimumDaysBetweenDisbursalAndFirstRepayment' => 'minimumDaysBetweenDisbursalAndFirstRepayment',
'productInterestRecalculationDetails' => 'productInterestRecalculationDetails',
'loanProductGuaranteeDetails' => 'loanProductGuaranteeDetails',
'principalThresholdForLastInstallment' => 'principalThresholdForLastInstallment',
'installmentAmountInMultiplesOf' => 'installmentAmountInMultiplesOf',
'floatingRates' => 'floatingRates',
'syncExpectedWithDisbursementDate' => 'syncExpectedWithDisbursementDate',
'currency' => 'currency',
'accountingType' => 'accountingType',
'interestRecalculationEnabled' => 'interestRecalculationEnabled',
'principalAmount' => 'principalAmount',
'multiDisburseLoan' => 'multiDisburseLoan',
'equalAmortization' => 'equalAmortization',
'linkedToFloatingInterestRate' => 'linkedToFloatingInterestRate',
'cashBasedAccountingEnabled' => 'cashBasedAccountingEnabled',
'upfrontAccrualAccountingEnabled' => 'upfrontAccrualAccountingEnabled',
'accountingDisabled' => 'accountingDisabled',
'periodicAccrualAccountingEnabled' => 'periodicAccrualAccountingEnabled',
'interestPeriodFrequencyType' => 'interestPeriodFrequencyType',
'holdGuaranteeFundsEnabled' => 'holdGuaranteeFundsEnabled',
'numberOfRepayments' => 'numberOfRepayments',
'nominalInterestRatePerPeriod' => 'nominalInterestRatePerPeriod',
'accrualBasedAccountingEnabled' => 'accrualBasedAccountingEnabled',
'arrearsBasedOnOriginalSchedule' => 'arrearsBasedOnOriginalSchedule',
'minNominalInterestRatePerPeriod' => 'minNominalInterestRatePerPeriod',
'maxNominalInterestRatePerPeriod' => 'maxNominalInterestRatePerPeriod',
'minNumberOfRepayments' => 'minNumberOfRepayments',
'maxNumberOfRepayments' => 'maxNumberOfRepayments',
'repaymentStrategy' => 'repaymentStrategy',
'loanProductCharges' => 'loanProductCharges',
'loanProductConfigurableAttributes' => 'loanProductConfigurableAttributes',
'minPrincipalAmount' => 'minPrincipalAmount',
'maxPrincipalAmount' => 'maxPrincipalAmount',
'new' => 'new'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'shortName' => 'setShortName',
'rates' => 'setRates',
'loanProductRelatedDetail' => 'setLoanProductRelatedDetail',
'includeInBorrowerCycle' => 'setIncludeInBorrowerCycle',
'startDate' => 'setStartDate',
'closeDate' => 'setCloseDate',
'externalId' => 'setExternalId',
'minimumDaysBetweenDisbursalAndFirstRepayment' => 'setMinimumDaysBetweenDisbursalAndFirstRepayment',
'productInterestRecalculationDetails' => 'setProductInterestRecalculationDetails',
'loanProductGuaranteeDetails' => 'setLoanProductGuaranteeDetails',
'principalThresholdForLastInstallment' => 'setPrincipalThresholdForLastInstallment',
'installmentAmountInMultiplesOf' => 'setInstallmentAmountInMultiplesOf',
'floatingRates' => 'setFloatingRates',
'syncExpectedWithDisbursementDate' => 'setSyncExpectedWithDisbursementDate',
'currency' => 'setCurrency',
'accountingType' => 'setAccountingType',
'interestRecalculationEnabled' => 'setInterestRecalculationEnabled',
'principalAmount' => 'setPrincipalAmount',
'multiDisburseLoan' => 'setMultiDisburseLoan',
'equalAmortization' => 'setEqualAmortization',
'linkedToFloatingInterestRate' => 'setLinkedToFloatingInterestRate',
'cashBasedAccountingEnabled' => 'setCashBasedAccountingEnabled',
'upfrontAccrualAccountingEnabled' => 'setUpfrontAccrualAccountingEnabled',
'accountingDisabled' => 'setAccountingDisabled',
'periodicAccrualAccountingEnabled' => 'setPeriodicAccrualAccountingEnabled',
'interestPeriodFrequencyType' => 'setInterestPeriodFrequencyType',
'holdGuaranteeFundsEnabled' => 'setHoldGuaranteeFundsEnabled',
'numberOfRepayments' => 'setNumberOfRepayments',
'nominalInterestRatePerPeriod' => 'setNominalInterestRatePerPeriod',
'accrualBasedAccountingEnabled' => 'setAccrualBasedAccountingEnabled',
'arrearsBasedOnOriginalSchedule' => 'setArrearsBasedOnOriginalSchedule',
'minNominalInterestRatePerPeriod' => 'setMinNominalInterestRatePerPeriod',
'maxNominalInterestRatePerPeriod' => 'setMaxNominalInterestRatePerPeriod',
'minNumberOfRepayments' => 'setMinNumberOfRepayments',
'maxNumberOfRepayments' => 'setMaxNumberOfRepayments',
'repaymentStrategy' => 'setRepaymentStrategy',
'loanProductCharges' => 'setLoanProductCharges',
'loanProductConfigurableAttributes' => 'setLoanProductConfigurableAttributes',
'minPrincipalAmount' => 'setMinPrincipalAmount',
'maxPrincipalAmount' => 'setMaxPrincipalAmount',
'new' => 'setNew'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'shortName' => 'getShortName',
'rates' => 'getRates',
'loanProductRelatedDetail' => 'getLoanProductRelatedDetail',
'includeInBorrowerCycle' => 'getIncludeInBorrowerCycle',
'startDate' => 'getStartDate',
'closeDate' => 'getCloseDate',
'externalId' => 'getExternalId',
'minimumDaysBetweenDisbursalAndFirstRepayment' => 'getMinimumDaysBetweenDisbursalAndFirstRepayment',
'productInterestRecalculationDetails' => 'getProductInterestRecalculationDetails',
'loanProductGuaranteeDetails' => 'getLoanProductGuaranteeDetails',
'principalThresholdForLastInstallment' => 'getPrincipalThresholdForLastInstallment',
'installmentAmountInMultiplesOf' => 'getInstallmentAmountInMultiplesOf',
'floatingRates' => 'getFloatingRates',
'syncExpectedWithDisbursementDate' => 'getSyncExpectedWithDisbursementDate',
'currency' => 'getCurrency',
'accountingType' => 'getAccountingType',
'interestRecalculationEnabled' => 'getInterestRecalculationEnabled',
'principalAmount' => 'getPrincipalAmount',
'multiDisburseLoan' => 'getMultiDisburseLoan',
'equalAmortization' => 'getEqualAmortization',
'linkedToFloatingInterestRate' => 'getLinkedToFloatingInterestRate',
'cashBasedAccountingEnabled' => 'getCashBasedAccountingEnabled',
'upfrontAccrualAccountingEnabled' => 'getUpfrontAccrualAccountingEnabled',
'accountingDisabled' => 'getAccountingDisabled',
'periodicAccrualAccountingEnabled' => 'getPeriodicAccrualAccountingEnabled',
'interestPeriodFrequencyType' => 'getInterestPeriodFrequencyType',
'holdGuaranteeFundsEnabled' => 'getHoldGuaranteeFundsEnabled',
'numberOfRepayments' => 'getNumberOfRepayments',
'nominalInterestRatePerPeriod' => 'getNominalInterestRatePerPeriod',
'accrualBasedAccountingEnabled' => 'getAccrualBasedAccountingEnabled',
'arrearsBasedOnOriginalSchedule' => 'getArrearsBasedOnOriginalSchedule',
'minNominalInterestRatePerPeriod' => 'getMinNominalInterestRatePerPeriod',
'maxNominalInterestRatePerPeriod' => 'getMaxNominalInterestRatePerPeriod',
'minNumberOfRepayments' => 'getMinNumberOfRepayments',
'maxNumberOfRepayments' => 'getMaxNumberOfRepayments',
'repaymentStrategy' => 'getRepaymentStrategy',
'loanProductCharges' => 'getLoanProductCharges',
'loanProductConfigurableAttributes' => 'getLoanProductConfigurableAttributes',
'minPrincipalAmount' => 'getMinPrincipalAmount',
'maxPrincipalAmount' => 'getMaxPrincipalAmount',
'new' => 'getNew'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INTEREST_PERIOD_FREQUENCY_TYPE_DAYS = 'DAYS';
const INTEREST_PERIOD_FREQUENCY_TYPE_WEEKS = 'WEEKS';
const INTEREST_PERIOD_FREQUENCY_TYPE_MONTHS = 'MONTHS';
const INTEREST_PERIOD_FREQUENCY_TYPE_YEARS = 'YEARS';
const INTEREST_PERIOD_FREQUENCY_TYPE_WHOLE_TERM = 'WHOLE_TERM';
const INTEREST_PERIOD_FREQUENCY_TYPE_INVALID = 'INVALID';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInterestPeriodFrequencyTypeAllowableValues()
    {
        return [
            self::INTEREST_PERIOD_FREQUENCY_TYPE_DAYS,
self::INTEREST_PERIOD_FREQUENCY_TYPE_WEEKS,
self::INTEREST_PERIOD_FREQUENCY_TYPE_MONTHS,
self::INTEREST_PERIOD_FREQUENCY_TYPE_YEARS,
self::INTEREST_PERIOD_FREQUENCY_TYPE_WHOLE_TERM,
self::INTEREST_PERIOD_FREQUENCY_TYPE_INVALID,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['shortName'] = isset($data['shortName']) ? $data['shortName'] : null;
        $this->container['rates'] = isset($data['rates']) ? $data['rates'] : null;
        $this->container['loanProductRelatedDetail'] = isset($data['loanProductRelatedDetail']) ? $data['loanProductRelatedDetail'] : null;
        $this->container['includeInBorrowerCycle'] = isset($data['includeInBorrowerCycle']) ? $data['includeInBorrowerCycle'] : null;
        $this->container['startDate'] = isset($data['startDate']) ? $data['startDate'] : null;
        $this->container['closeDate'] = isset($data['closeDate']) ? $data['closeDate'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['minimumDaysBetweenDisbursalAndFirstRepayment'] = isset($data['minimumDaysBetweenDisbursalAndFirstRepayment']) ? $data['minimumDaysBetweenDisbursalAndFirstRepayment'] : null;
        $this->container['productInterestRecalculationDetails'] = isset($data['productInterestRecalculationDetails']) ? $data['productInterestRecalculationDetails'] : null;
        $this->container['loanProductGuaranteeDetails'] = isset($data['loanProductGuaranteeDetails']) ? $data['loanProductGuaranteeDetails'] : null;
        $this->container['principalThresholdForLastInstallment'] = isset($data['principalThresholdForLastInstallment']) ? $data['principalThresholdForLastInstallment'] : null;
        $this->container['installmentAmountInMultiplesOf'] = isset($data['installmentAmountInMultiplesOf']) ? $data['installmentAmountInMultiplesOf'] : null;
        $this->container['floatingRates'] = isset($data['floatingRates']) ? $data['floatingRates'] : null;
        $this->container['syncExpectedWithDisbursementDate'] = isset($data['syncExpectedWithDisbursementDate']) ? $data['syncExpectedWithDisbursementDate'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['accountingType'] = isset($data['accountingType']) ? $data['accountingType'] : null;
        $this->container['interestRecalculationEnabled'] = isset($data['interestRecalculationEnabled']) ? $data['interestRecalculationEnabled'] : null;
        $this->container['principalAmount'] = isset($data['principalAmount']) ? $data['principalAmount'] : null;
        $this->container['multiDisburseLoan'] = isset($data['multiDisburseLoan']) ? $data['multiDisburseLoan'] : null;
        $this->container['equalAmortization'] = isset($data['equalAmortization']) ? $data['equalAmortization'] : null;
        $this->container['linkedToFloatingInterestRate'] = isset($data['linkedToFloatingInterestRate']) ? $data['linkedToFloatingInterestRate'] : null;
        $this->container['cashBasedAccountingEnabled'] = isset($data['cashBasedAccountingEnabled']) ? $data['cashBasedAccountingEnabled'] : null;
        $this->container['upfrontAccrualAccountingEnabled'] = isset($data['upfrontAccrualAccountingEnabled']) ? $data['upfrontAccrualAccountingEnabled'] : null;
        $this->container['accountingDisabled'] = isset($data['accountingDisabled']) ? $data['accountingDisabled'] : null;
        $this->container['periodicAccrualAccountingEnabled'] = isset($data['periodicAccrualAccountingEnabled']) ? $data['periodicAccrualAccountingEnabled'] : null;
        $this->container['interestPeriodFrequencyType'] = isset($data['interestPeriodFrequencyType']) ? $data['interestPeriodFrequencyType'] : null;
        $this->container['holdGuaranteeFundsEnabled'] = isset($data['holdGuaranteeFundsEnabled']) ? $data['holdGuaranteeFundsEnabled'] : null;
        $this->container['numberOfRepayments'] = isset($data['numberOfRepayments']) ? $data['numberOfRepayments'] : null;
        $this->container['nominalInterestRatePerPeriod'] = isset($data['nominalInterestRatePerPeriod']) ? $data['nominalInterestRatePerPeriod'] : null;
        $this->container['accrualBasedAccountingEnabled'] = isset($data['accrualBasedAccountingEnabled']) ? $data['accrualBasedAccountingEnabled'] : null;
        $this->container['arrearsBasedOnOriginalSchedule'] = isset($data['arrearsBasedOnOriginalSchedule']) ? $data['arrearsBasedOnOriginalSchedule'] : null;
        $this->container['minNominalInterestRatePerPeriod'] = isset($data['minNominalInterestRatePerPeriod']) ? $data['minNominalInterestRatePerPeriod'] : null;
        $this->container['maxNominalInterestRatePerPeriod'] = isset($data['maxNominalInterestRatePerPeriod']) ? $data['maxNominalInterestRatePerPeriod'] : null;
        $this->container['minNumberOfRepayments'] = isset($data['minNumberOfRepayments']) ? $data['minNumberOfRepayments'] : null;
        $this->container['maxNumberOfRepayments'] = isset($data['maxNumberOfRepayments']) ? $data['maxNumberOfRepayments'] : null;
        $this->container['repaymentStrategy'] = isset($data['repaymentStrategy']) ? $data['repaymentStrategy'] : null;
        $this->container['loanProductCharges'] = isset($data['loanProductCharges']) ? $data['loanProductCharges'] : null;
        $this->container['loanProductConfigurableAttributes'] = isset($data['loanProductConfigurableAttributes']) ? $data['loanProductConfigurableAttributes'] : null;
        $this->container['minPrincipalAmount'] = isset($data['minPrincipalAmount']) ? $data['minPrincipalAmount'] : null;
        $this->container['maxPrincipalAmount'] = isset($data['maxPrincipalAmount']) ? $data['maxPrincipalAmount'] : null;
        $this->container['new'] = isset($data['new']) ? $data['new'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getInterestPeriodFrequencyTypeAllowableValues();
        if (!is_null($this->container['interestPeriodFrequencyType']) && !in_array($this->container['interestPeriodFrequencyType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'interestPeriodFrequencyType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets shortName
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['shortName'];
    }

    /**
     * Sets shortName
     *
     * @param string $shortName shortName
     *
     * @return $this
     */
    public function setShortName($shortName)
    {
        $this->container['shortName'] = $shortName;

        return $this;
    }

    /**
     * Gets rates
     *
     * @return \Frengky\Fineract\Model\Rate[]
     */
    public function getRates()
    {
        return $this->container['rates'];
    }

    /**
     * Sets rates
     *
     * @param \Frengky\Fineract\Model\Rate[] $rates rates
     *
     * @return $this
     */
    public function setRates($rates)
    {
        $this->container['rates'] = $rates;

        return $this;
    }

    /**
     * Gets loanProductRelatedDetail
     *
     * @return \Frengky\Fineract\Model\LoanProductRelatedDetail
     */
    public function getLoanProductRelatedDetail()
    {
        return $this->container['loanProductRelatedDetail'];
    }

    /**
     * Sets loanProductRelatedDetail
     *
     * @param \Frengky\Fineract\Model\LoanProductRelatedDetail $loanProductRelatedDetail loanProductRelatedDetail
     *
     * @return $this
     */
    public function setLoanProductRelatedDetail($loanProductRelatedDetail)
    {
        $this->container['loanProductRelatedDetail'] = $loanProductRelatedDetail;

        return $this;
    }

    /**
     * Gets includeInBorrowerCycle
     *
     * @return bool
     */
    public function getIncludeInBorrowerCycle()
    {
        return $this->container['includeInBorrowerCycle'];
    }

    /**
     * Sets includeInBorrowerCycle
     *
     * @param bool $includeInBorrowerCycle includeInBorrowerCycle
     *
     * @return $this
     */
    public function setIncludeInBorrowerCycle($includeInBorrowerCycle)
    {
        $this->container['includeInBorrowerCycle'] = $includeInBorrowerCycle;

        return $this;
    }

    /**
     * Gets startDate
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['startDate'];
    }

    /**
     * Sets startDate
     *
     * @param \DateTime $startDate startDate
     *
     * @return $this
     */
    public function setStartDate($startDate)
    {
        $this->container['startDate'] = $startDate;

        return $this;
    }

    /**
     * Gets closeDate
     *
     * @return \DateTime
     */
    public function getCloseDate()
    {
        return $this->container['closeDate'];
    }

    /**
     * Sets closeDate
     *
     * @param \DateTime $closeDate closeDate
     *
     * @return $this
     */
    public function setCloseDate($closeDate)
    {
        $this->container['closeDate'] = $closeDate;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId externalId
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets minimumDaysBetweenDisbursalAndFirstRepayment
     *
     * @return int
     */
    public function getMinimumDaysBetweenDisbursalAndFirstRepayment()
    {
        return $this->container['minimumDaysBetweenDisbursalAndFirstRepayment'];
    }

    /**
     * Sets minimumDaysBetweenDisbursalAndFirstRepayment
     *
     * @param int $minimumDaysBetweenDisbursalAndFirstRepayment minimumDaysBetweenDisbursalAndFirstRepayment
     *
     * @return $this
     */
    public function setMinimumDaysBetweenDisbursalAndFirstRepayment($minimumDaysBetweenDisbursalAndFirstRepayment)
    {
        $this->container['minimumDaysBetweenDisbursalAndFirstRepayment'] = $minimumDaysBetweenDisbursalAndFirstRepayment;

        return $this;
    }

    /**
     * Gets productInterestRecalculationDetails
     *
     * @return \Frengky\Fineract\Model\LoanProductInterestRecalculationDetails
     */
    public function getProductInterestRecalculationDetails()
    {
        return $this->container['productInterestRecalculationDetails'];
    }

    /**
     * Sets productInterestRecalculationDetails
     *
     * @param \Frengky\Fineract\Model\LoanProductInterestRecalculationDetails $productInterestRecalculationDetails productInterestRecalculationDetails
     *
     * @return $this
     */
    public function setProductInterestRecalculationDetails($productInterestRecalculationDetails)
    {
        $this->container['productInterestRecalculationDetails'] = $productInterestRecalculationDetails;

        return $this;
    }

    /**
     * Gets loanProductGuaranteeDetails
     *
     * @return \Frengky\Fineract\Model\LoanProductGuaranteeDetails
     */
    public function getLoanProductGuaranteeDetails()
    {
        return $this->container['loanProductGuaranteeDetails'];
    }

    /**
     * Sets loanProductGuaranteeDetails
     *
     * @param \Frengky\Fineract\Model\LoanProductGuaranteeDetails $loanProductGuaranteeDetails loanProductGuaranteeDetails
     *
     * @return $this
     */
    public function setLoanProductGuaranteeDetails($loanProductGuaranteeDetails)
    {
        $this->container['loanProductGuaranteeDetails'] = $loanProductGuaranteeDetails;

        return $this;
    }

    /**
     * Gets principalThresholdForLastInstallment
     *
     * @return float
     */
    public function getPrincipalThresholdForLastInstallment()
    {
        return $this->container['principalThresholdForLastInstallment'];
    }

    /**
     * Sets principalThresholdForLastInstallment
     *
     * @param float $principalThresholdForLastInstallment principalThresholdForLastInstallment
     *
     * @return $this
     */
    public function setPrincipalThresholdForLastInstallment($principalThresholdForLastInstallment)
    {
        $this->container['principalThresholdForLastInstallment'] = $principalThresholdForLastInstallment;

        return $this;
    }

    /**
     * Gets installmentAmountInMultiplesOf
     *
     * @return int
     */
    public function getInstallmentAmountInMultiplesOf()
    {
        return $this->container['installmentAmountInMultiplesOf'];
    }

    /**
     * Sets installmentAmountInMultiplesOf
     *
     * @param int $installmentAmountInMultiplesOf installmentAmountInMultiplesOf
     *
     * @return $this
     */
    public function setInstallmentAmountInMultiplesOf($installmentAmountInMultiplesOf)
    {
        $this->container['installmentAmountInMultiplesOf'] = $installmentAmountInMultiplesOf;

        return $this;
    }

    /**
     * Gets floatingRates
     *
     * @return \Frengky\Fineract\Model\LoanProductFloatingRates
     */
    public function getFloatingRates()
    {
        return $this->container['floatingRates'];
    }

    /**
     * Sets floatingRates
     *
     * @param \Frengky\Fineract\Model\LoanProductFloatingRates $floatingRates floatingRates
     *
     * @return $this
     */
    public function setFloatingRates($floatingRates)
    {
        $this->container['floatingRates'] = $floatingRates;

        return $this;
    }

    /**
     * Gets syncExpectedWithDisbursementDate
     *
     * @return bool
     */
    public function getSyncExpectedWithDisbursementDate()
    {
        return $this->container['syncExpectedWithDisbursementDate'];
    }

    /**
     * Sets syncExpectedWithDisbursementDate
     *
     * @param bool $syncExpectedWithDisbursementDate syncExpectedWithDisbursementDate
     *
     * @return $this
     */
    public function setSyncExpectedWithDisbursementDate($syncExpectedWithDisbursementDate)
    {
        $this->container['syncExpectedWithDisbursementDate'] = $syncExpectedWithDisbursementDate;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Frengky\Fineract\Model\MonetaryCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Frengky\Fineract\Model\MonetaryCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets accountingType
     *
     * @return int
     */
    public function getAccountingType()
    {
        return $this->container['accountingType'];
    }

    /**
     * Sets accountingType
     *
     * @param int $accountingType accountingType
     *
     * @return $this
     */
    public function setAccountingType($accountingType)
    {
        $this->container['accountingType'] = $accountingType;

        return $this;
    }

    /**
     * Gets interestRecalculationEnabled
     *
     * @return bool
     */
    public function getInterestRecalculationEnabled()
    {
        return $this->container['interestRecalculationEnabled'];
    }

    /**
     * Sets interestRecalculationEnabled
     *
     * @param bool $interestRecalculationEnabled interestRecalculationEnabled
     *
     * @return $this
     */
    public function setInterestRecalculationEnabled($interestRecalculationEnabled)
    {
        $this->container['interestRecalculationEnabled'] = $interestRecalculationEnabled;

        return $this;
    }

    /**
     * Gets principalAmount
     *
     * @return \Frengky\Fineract\Model\Money
     */
    public function getPrincipalAmount()
    {
        return $this->container['principalAmount'];
    }

    /**
     * Sets principalAmount
     *
     * @param \Frengky\Fineract\Model\Money $principalAmount principalAmount
     *
     * @return $this
     */
    public function setPrincipalAmount($principalAmount)
    {
        $this->container['principalAmount'] = $principalAmount;

        return $this;
    }

    /**
     * Gets multiDisburseLoan
     *
     * @return bool
     */
    public function getMultiDisburseLoan()
    {
        return $this->container['multiDisburseLoan'];
    }

    /**
     * Sets multiDisburseLoan
     *
     * @param bool $multiDisburseLoan multiDisburseLoan
     *
     * @return $this
     */
    public function setMultiDisburseLoan($multiDisburseLoan)
    {
        $this->container['multiDisburseLoan'] = $multiDisburseLoan;

        return $this;
    }

    /**
     * Gets equalAmortization
     *
     * @return bool
     */
    public function getEqualAmortization()
    {
        return $this->container['equalAmortization'];
    }

    /**
     * Sets equalAmortization
     *
     * @param bool $equalAmortization equalAmortization
     *
     * @return $this
     */
    public function setEqualAmortization($equalAmortization)
    {
        $this->container['equalAmortization'] = $equalAmortization;

        return $this;
    }

    /**
     * Gets linkedToFloatingInterestRate
     *
     * @return bool
     */
    public function getLinkedToFloatingInterestRate()
    {
        return $this->container['linkedToFloatingInterestRate'];
    }

    /**
     * Sets linkedToFloatingInterestRate
     *
     * @param bool $linkedToFloatingInterestRate linkedToFloatingInterestRate
     *
     * @return $this
     */
    public function setLinkedToFloatingInterestRate($linkedToFloatingInterestRate)
    {
        $this->container['linkedToFloatingInterestRate'] = $linkedToFloatingInterestRate;

        return $this;
    }

    /**
     * Gets cashBasedAccountingEnabled
     *
     * @return bool
     */
    public function getCashBasedAccountingEnabled()
    {
        return $this->container['cashBasedAccountingEnabled'];
    }

    /**
     * Sets cashBasedAccountingEnabled
     *
     * @param bool $cashBasedAccountingEnabled cashBasedAccountingEnabled
     *
     * @return $this
     */
    public function setCashBasedAccountingEnabled($cashBasedAccountingEnabled)
    {
        $this->container['cashBasedAccountingEnabled'] = $cashBasedAccountingEnabled;

        return $this;
    }

    /**
     * Gets upfrontAccrualAccountingEnabled
     *
     * @return bool
     */
    public function getUpfrontAccrualAccountingEnabled()
    {
        return $this->container['upfrontAccrualAccountingEnabled'];
    }

    /**
     * Sets upfrontAccrualAccountingEnabled
     *
     * @param bool $upfrontAccrualAccountingEnabled upfrontAccrualAccountingEnabled
     *
     * @return $this
     */
    public function setUpfrontAccrualAccountingEnabled($upfrontAccrualAccountingEnabled)
    {
        $this->container['upfrontAccrualAccountingEnabled'] = $upfrontAccrualAccountingEnabled;

        return $this;
    }

    /**
     * Gets accountingDisabled
     *
     * @return bool
     */
    public function getAccountingDisabled()
    {
        return $this->container['accountingDisabled'];
    }

    /**
     * Sets accountingDisabled
     *
     * @param bool $accountingDisabled accountingDisabled
     *
     * @return $this
     */
    public function setAccountingDisabled($accountingDisabled)
    {
        $this->container['accountingDisabled'] = $accountingDisabled;

        return $this;
    }

    /**
     * Gets periodicAccrualAccountingEnabled
     *
     * @return bool
     */
    public function getPeriodicAccrualAccountingEnabled()
    {
        return $this->container['periodicAccrualAccountingEnabled'];
    }

    /**
     * Sets periodicAccrualAccountingEnabled
     *
     * @param bool $periodicAccrualAccountingEnabled periodicAccrualAccountingEnabled
     *
     * @return $this
     */
    public function setPeriodicAccrualAccountingEnabled($periodicAccrualAccountingEnabled)
    {
        $this->container['periodicAccrualAccountingEnabled'] = $periodicAccrualAccountingEnabled;

        return $this;
    }

    /**
     * Gets interestPeriodFrequencyType
     *
     * @return string
     */
    public function getInterestPeriodFrequencyType()
    {
        return $this->container['interestPeriodFrequencyType'];
    }

    /**
     * Sets interestPeriodFrequencyType
     *
     * @param string $interestPeriodFrequencyType interestPeriodFrequencyType
     *
     * @return $this
     */
    public function setInterestPeriodFrequencyType($interestPeriodFrequencyType)
    {
        $allowedValues = $this->getInterestPeriodFrequencyTypeAllowableValues();
        if (!is_null($interestPeriodFrequencyType) && !in_array($interestPeriodFrequencyType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'interestPeriodFrequencyType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['interestPeriodFrequencyType'] = $interestPeriodFrequencyType;

        return $this;
    }

    /**
     * Gets holdGuaranteeFundsEnabled
     *
     * @return bool
     */
    public function getHoldGuaranteeFundsEnabled()
    {
        return $this->container['holdGuaranteeFundsEnabled'];
    }

    /**
     * Sets holdGuaranteeFundsEnabled
     *
     * @param bool $holdGuaranteeFundsEnabled holdGuaranteeFundsEnabled
     *
     * @return $this
     */
    public function setHoldGuaranteeFundsEnabled($holdGuaranteeFundsEnabled)
    {
        $this->container['holdGuaranteeFundsEnabled'] = $holdGuaranteeFundsEnabled;

        return $this;
    }

    /**
     * Gets numberOfRepayments
     *
     * @return int
     */
    public function getNumberOfRepayments()
    {
        return $this->container['numberOfRepayments'];
    }

    /**
     * Sets numberOfRepayments
     *
     * @param int $numberOfRepayments numberOfRepayments
     *
     * @return $this
     */
    public function setNumberOfRepayments($numberOfRepayments)
    {
        $this->container['numberOfRepayments'] = $numberOfRepayments;

        return $this;
    }

    /**
     * Gets nominalInterestRatePerPeriod
     *
     * @return float
     */
    public function getNominalInterestRatePerPeriod()
    {
        return $this->container['nominalInterestRatePerPeriod'];
    }

    /**
     * Sets nominalInterestRatePerPeriod
     *
     * @param float $nominalInterestRatePerPeriod nominalInterestRatePerPeriod
     *
     * @return $this
     */
    public function setNominalInterestRatePerPeriod($nominalInterestRatePerPeriod)
    {
        $this->container['nominalInterestRatePerPeriod'] = $nominalInterestRatePerPeriod;

        return $this;
    }

    /**
     * Gets accrualBasedAccountingEnabled
     *
     * @return bool
     */
    public function getAccrualBasedAccountingEnabled()
    {
        return $this->container['accrualBasedAccountingEnabled'];
    }

    /**
     * Sets accrualBasedAccountingEnabled
     *
     * @param bool $accrualBasedAccountingEnabled accrualBasedAccountingEnabled
     *
     * @return $this
     */
    public function setAccrualBasedAccountingEnabled($accrualBasedAccountingEnabled)
    {
        $this->container['accrualBasedAccountingEnabled'] = $accrualBasedAccountingEnabled;

        return $this;
    }

    /**
     * Gets arrearsBasedOnOriginalSchedule
     *
     * @return bool
     */
    public function getArrearsBasedOnOriginalSchedule()
    {
        return $this->container['arrearsBasedOnOriginalSchedule'];
    }

    /**
     * Sets arrearsBasedOnOriginalSchedule
     *
     * @param bool $arrearsBasedOnOriginalSchedule arrearsBasedOnOriginalSchedule
     *
     * @return $this
     */
    public function setArrearsBasedOnOriginalSchedule($arrearsBasedOnOriginalSchedule)
    {
        $this->container['arrearsBasedOnOriginalSchedule'] = $arrearsBasedOnOriginalSchedule;

        return $this;
    }

    /**
     * Gets minNominalInterestRatePerPeriod
     *
     * @return float
     */
    public function getMinNominalInterestRatePerPeriod()
    {
        return $this->container['minNominalInterestRatePerPeriod'];
    }

    /**
     * Sets minNominalInterestRatePerPeriod
     *
     * @param float $minNominalInterestRatePerPeriod minNominalInterestRatePerPeriod
     *
     * @return $this
     */
    public function setMinNominalInterestRatePerPeriod($minNominalInterestRatePerPeriod)
    {
        $this->container['minNominalInterestRatePerPeriod'] = $minNominalInterestRatePerPeriod;

        return $this;
    }

    /**
     * Gets maxNominalInterestRatePerPeriod
     *
     * @return float
     */
    public function getMaxNominalInterestRatePerPeriod()
    {
        return $this->container['maxNominalInterestRatePerPeriod'];
    }

    /**
     * Sets maxNominalInterestRatePerPeriod
     *
     * @param float $maxNominalInterestRatePerPeriod maxNominalInterestRatePerPeriod
     *
     * @return $this
     */
    public function setMaxNominalInterestRatePerPeriod($maxNominalInterestRatePerPeriod)
    {
        $this->container['maxNominalInterestRatePerPeriod'] = $maxNominalInterestRatePerPeriod;

        return $this;
    }

    /**
     * Gets minNumberOfRepayments
     *
     * @return int
     */
    public function getMinNumberOfRepayments()
    {
        return $this->container['minNumberOfRepayments'];
    }

    /**
     * Sets minNumberOfRepayments
     *
     * @param int $minNumberOfRepayments minNumberOfRepayments
     *
     * @return $this
     */
    public function setMinNumberOfRepayments($minNumberOfRepayments)
    {
        $this->container['minNumberOfRepayments'] = $minNumberOfRepayments;

        return $this;
    }

    /**
     * Gets maxNumberOfRepayments
     *
     * @return int
     */
    public function getMaxNumberOfRepayments()
    {
        return $this->container['maxNumberOfRepayments'];
    }

    /**
     * Sets maxNumberOfRepayments
     *
     * @param int $maxNumberOfRepayments maxNumberOfRepayments
     *
     * @return $this
     */
    public function setMaxNumberOfRepayments($maxNumberOfRepayments)
    {
        $this->container['maxNumberOfRepayments'] = $maxNumberOfRepayments;

        return $this;
    }

    /**
     * Gets repaymentStrategy
     *
     * @return \Frengky\Fineract\Model\LoanTransactionProcessingStrategy
     */
    public function getRepaymentStrategy()
    {
        return $this->container['repaymentStrategy'];
    }

    /**
     * Sets repaymentStrategy
     *
     * @param \Frengky\Fineract\Model\LoanTransactionProcessingStrategy $repaymentStrategy repaymentStrategy
     *
     * @return $this
     */
    public function setRepaymentStrategy($repaymentStrategy)
    {
        $this->container['repaymentStrategy'] = $repaymentStrategy;

        return $this;
    }

    /**
     * Gets loanProductCharges
     *
     * @return \Frengky\Fineract\Model\Charge[]
     */
    public function getLoanProductCharges()
    {
        return $this->container['loanProductCharges'];
    }

    /**
     * Sets loanProductCharges
     *
     * @param \Frengky\Fineract\Model\Charge[] $loanProductCharges loanProductCharges
     *
     * @return $this
     */
    public function setLoanProductCharges($loanProductCharges)
    {
        $this->container['loanProductCharges'] = $loanProductCharges;

        return $this;
    }

    /**
     * Gets loanProductConfigurableAttributes
     *
     * @return \Frengky\Fineract\Model\LoanProductConfigurableAttributes
     */
    public function getLoanProductConfigurableAttributes()
    {
        return $this->container['loanProductConfigurableAttributes'];
    }

    /**
     * Sets loanProductConfigurableAttributes
     *
     * @param \Frengky\Fineract\Model\LoanProductConfigurableAttributes $loanProductConfigurableAttributes loanProductConfigurableAttributes
     *
     * @return $this
     */
    public function setLoanProductConfigurableAttributes($loanProductConfigurableAttributes)
    {
        $this->container['loanProductConfigurableAttributes'] = $loanProductConfigurableAttributes;

        return $this;
    }

    /**
     * Gets minPrincipalAmount
     *
     * @return \Frengky\Fineract\Model\Money
     */
    public function getMinPrincipalAmount()
    {
        return $this->container['minPrincipalAmount'];
    }

    /**
     * Sets minPrincipalAmount
     *
     * @param \Frengky\Fineract\Model\Money $minPrincipalAmount minPrincipalAmount
     *
     * @return $this
     */
    public function setMinPrincipalAmount($minPrincipalAmount)
    {
        $this->container['minPrincipalAmount'] = $minPrincipalAmount;

        return $this;
    }

    /**
     * Gets maxPrincipalAmount
     *
     * @return \Frengky\Fineract\Model\Money
     */
    public function getMaxPrincipalAmount()
    {
        return $this->container['maxPrincipalAmount'];
    }

    /**
     * Sets maxPrincipalAmount
     *
     * @param \Frengky\Fineract\Model\Money $maxPrincipalAmount maxPrincipalAmount
     *
     * @return $this
     */
    public function setMaxPrincipalAmount($maxPrincipalAmount)
    {
        $this->container['maxPrincipalAmount'] = $maxPrincipalAmount;

        return $this;
    }

    /**
     * Gets new
     *
     * @return bool
     */
    public function getNew()
    {
        return $this->container['new'];
    }

    /**
     * Sets new
     *
     * @param bool $new new
     *
     * @return $this
     */
    public function setNew($new)
    {
        $this->container['new'] = $new;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
