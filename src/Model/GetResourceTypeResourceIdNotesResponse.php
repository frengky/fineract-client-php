<?php
/**
 * GetResourceTypeResourceIdNotesResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetResourceTypeResourceIdNotesResponse Class Doc Comment
 *
 * @category Class
 * @description GetResourceTypeResourceIdNotesResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetResourceTypeResourceIdNotesResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetResourceTypeResourceIdNotesResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'clientId' => 'int',
'noteType' => '\Frengky\Fineract\Model\GetNotesNoteType',
'note' => 'string',
'createdById' => 'int',
'createdByUsername' => 'string',
'createdOn' => '\DateTime',
'updatedById' => 'int',
'updatedByUsername' => 'string',
'updatedOn' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'clientId' => 'int32',
'noteType' => null,
'note' => null,
'createdById' => 'int32',
'createdByUsername' => null,
'createdOn' => 'date-time',
'updatedById' => 'int32',
'updatedByUsername' => null,
'updatedOn' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'clientId' => 'clientId',
'noteType' => 'noteType',
'note' => 'note',
'createdById' => 'createdById',
'createdByUsername' => 'createdByUsername',
'createdOn' => 'createdOn',
'updatedById' => 'updatedById',
'updatedByUsername' => 'updatedByUsername',
'updatedOn' => 'updatedOn'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'clientId' => 'setClientId',
'noteType' => 'setNoteType',
'note' => 'setNote',
'createdById' => 'setCreatedById',
'createdByUsername' => 'setCreatedByUsername',
'createdOn' => 'setCreatedOn',
'updatedById' => 'setUpdatedById',
'updatedByUsername' => 'setUpdatedByUsername',
'updatedOn' => 'setUpdatedOn'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'clientId' => 'getClientId',
'noteType' => 'getNoteType',
'note' => 'getNote',
'createdById' => 'getCreatedById',
'createdByUsername' => 'getCreatedByUsername',
'createdOn' => 'getCreatedOn',
'updatedById' => 'getUpdatedById',
'updatedByUsername' => 'getUpdatedByUsername',
'updatedOn' => 'getUpdatedOn'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['clientId'] = isset($data['clientId']) ? $data['clientId'] : null;
        $this->container['noteType'] = isset($data['noteType']) ? $data['noteType'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['createdById'] = isset($data['createdById']) ? $data['createdById'] : null;
        $this->container['createdByUsername'] = isset($data['createdByUsername']) ? $data['createdByUsername'] : null;
        $this->container['createdOn'] = isset($data['createdOn']) ? $data['createdOn'] : null;
        $this->container['updatedById'] = isset($data['updatedById']) ? $data['updatedById'] : null;
        $this->container['updatedByUsername'] = isset($data['updatedByUsername']) ? $data['updatedByUsername'] : null;
        $this->container['updatedOn'] = isset($data['updatedOn']) ? $data['updatedOn'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param int $clientId clientId
     *
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets noteType
     *
     * @return \Frengky\Fineract\Model\GetNotesNoteType
     */
    public function getNoteType()
    {
        return $this->container['noteType'];
    }

    /**
     * Sets noteType
     *
     * @param \Frengky\Fineract\Model\GetNotesNoteType $noteType noteType
     *
     * @return $this
     */
    public function setNoteType($noteType)
    {
        $this->container['noteType'] = $noteType;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets createdById
     *
     * @return int
     */
    public function getCreatedById()
    {
        return $this->container['createdById'];
    }

    /**
     * Sets createdById
     *
     * @param int $createdById createdById
     *
     * @return $this
     */
    public function setCreatedById($createdById)
    {
        $this->container['createdById'] = $createdById;

        return $this;
    }

    /**
     * Gets createdByUsername
     *
     * @return string
     */
    public function getCreatedByUsername()
    {
        return $this->container['createdByUsername'];
    }

    /**
     * Sets createdByUsername
     *
     * @param string $createdByUsername createdByUsername
     *
     * @return $this
     */
    public function setCreatedByUsername($createdByUsername)
    {
        $this->container['createdByUsername'] = $createdByUsername;

        return $this;
    }

    /**
     * Gets createdOn
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['createdOn'];
    }

    /**
     * Sets createdOn
     *
     * @param \DateTime $createdOn createdOn
     *
     * @return $this
     */
    public function setCreatedOn($createdOn)
    {
        $this->container['createdOn'] = $createdOn;

        return $this;
    }

    /**
     * Gets updatedById
     *
     * @return int
     */
    public function getUpdatedById()
    {
        return $this->container['updatedById'];
    }

    /**
     * Sets updatedById
     *
     * @param int $updatedById updatedById
     *
     * @return $this
     */
    public function setUpdatedById($updatedById)
    {
        $this->container['updatedById'] = $updatedById;

        return $this;
    }

    /**
     * Gets updatedByUsername
     *
     * @return string
     */
    public function getUpdatedByUsername()
    {
        return $this->container['updatedByUsername'];
    }

    /**
     * Sets updatedByUsername
     *
     * @param string $updatedByUsername updatedByUsername
     *
     * @return $this
     */
    public function setUpdatedByUsername($updatedByUsername)
    {
        $this->container['updatedByUsername'] = $updatedByUsername;

        return $this;
    }

    /**
     * Gets updatedOn
     *
     * @return \DateTime
     */
    public function getUpdatedOn()
    {
        return $this->container['updatedOn'];
    }

    /**
     * Sets updatedOn
     *
     * @param \DateTime $updatedOn updatedOn
     *
     * @return $this
     */
    public function setUpdatedOn($updatedOn)
    {
        $this->container['updatedOn'] = $updatedOn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
