<?php
/**
 * InteropTransactionRequestData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * InteropTransactionRequestData Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InteropTransactionRequestData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InteropTransactionRequestData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transactionCode' => 'string',
'requestCode' => 'string',
'accountId' => 'string',
'amount' => '\Frengky\Fineract\Model\MoneyData',
'transactionRole' => 'string',
'transactionType' => '\Frengky\Fineract\Model\InteropTransactionTypeData',
'note' => 'string',
'geoCode' => '\Frengky\Fineract\Model\GeoCodeData',
'expiration' => '\DateTime',
'extensionList' => '\Frengky\Fineract\Model\ExtensionData[]',
'expirationLocalDate' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transactionCode' => null,
'requestCode' => null,
'accountId' => null,
'amount' => null,
'transactionRole' => null,
'transactionType' => null,
'note' => null,
'geoCode' => null,
'expiration' => 'date-time',
'extensionList' => null,
'expirationLocalDate' => 'date'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transactionCode' => 'transactionCode',
'requestCode' => 'requestCode',
'accountId' => 'accountId',
'amount' => 'amount',
'transactionRole' => 'transactionRole',
'transactionType' => 'transactionType',
'note' => 'note',
'geoCode' => 'geoCode',
'expiration' => 'expiration',
'extensionList' => 'extensionList',
'expirationLocalDate' => 'expirationLocalDate'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transactionCode' => 'setTransactionCode',
'requestCode' => 'setRequestCode',
'accountId' => 'setAccountId',
'amount' => 'setAmount',
'transactionRole' => 'setTransactionRole',
'transactionType' => 'setTransactionType',
'note' => 'setNote',
'geoCode' => 'setGeoCode',
'expiration' => 'setExpiration',
'extensionList' => 'setExtensionList',
'expirationLocalDate' => 'setExpirationLocalDate'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transactionCode' => 'getTransactionCode',
'requestCode' => 'getRequestCode',
'accountId' => 'getAccountId',
'amount' => 'getAmount',
'transactionRole' => 'getTransactionRole',
'transactionType' => 'getTransactionType',
'note' => 'getNote',
'geoCode' => 'getGeoCode',
'expiration' => 'getExpiration',
'extensionList' => 'getExtensionList',
'expirationLocalDate' => 'getExpirationLocalDate'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSACTION_ROLE_PAYER = 'PAYER';
const TRANSACTION_ROLE_PAYEE = 'PAYEE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransactionRoleAllowableValues()
    {
        return [
            self::TRANSACTION_ROLE_PAYER,
self::TRANSACTION_ROLE_PAYEE,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transactionCode'] = isset($data['transactionCode']) ? $data['transactionCode'] : null;
        $this->container['requestCode'] = isset($data['requestCode']) ? $data['requestCode'] : null;
        $this->container['accountId'] = isset($data['accountId']) ? $data['accountId'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['transactionRole'] = isset($data['transactionRole']) ? $data['transactionRole'] : null;
        $this->container['transactionType'] = isset($data['transactionType']) ? $data['transactionType'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['geoCode'] = isset($data['geoCode']) ? $data['geoCode'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['extensionList'] = isset($data['extensionList']) ? $data['extensionList'] : null;
        $this->container['expirationLocalDate'] = isset($data['expirationLocalDate']) ? $data['expirationLocalDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transactionCode'] === null) {
            $invalidProperties[] = "'transactionCode' can't be null";
        }
        if ($this->container['accountId'] === null) {
            $invalidProperties[] = "'accountId' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['transactionRole'] === null) {
            $invalidProperties[] = "'transactionRole' can't be null";
        }
        $allowedValues = $this->getTransactionRoleAllowableValues();
        if (!is_null($this->container['transactionRole']) && !in_array($this->container['transactionRole'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transactionRole', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transactionCode
     *
     * @return string
     */
    public function getTransactionCode()
    {
        return $this->container['transactionCode'];
    }

    /**
     * Sets transactionCode
     *
     * @param string $transactionCode transactionCode
     *
     * @return $this
     */
    public function setTransactionCode($transactionCode)
    {
        $this->container['transactionCode'] = $transactionCode;

        return $this;
    }

    /**
     * Gets requestCode
     *
     * @return string
     */
    public function getRequestCode()
    {
        return $this->container['requestCode'];
    }

    /**
     * Sets requestCode
     *
     * @param string $requestCode requestCode
     *
     * @return $this
     */
    public function setRequestCode($requestCode)
    {
        $this->container['requestCode'] = $requestCode;

        return $this;
    }

    /**
     * Gets accountId
     *
     * @return string
     */
    public function getAccountId()
    {
        return $this->container['accountId'];
    }

    /**
     * Sets accountId
     *
     * @param string $accountId accountId
     *
     * @return $this
     */
    public function setAccountId($accountId)
    {
        $this->container['accountId'] = $accountId;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \Frengky\Fineract\Model\MoneyData
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Frengky\Fineract\Model\MoneyData $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets transactionRole
     *
     * @return string
     */
    public function getTransactionRole()
    {
        return $this->container['transactionRole'];
    }

    /**
     * Sets transactionRole
     *
     * @param string $transactionRole transactionRole
     *
     * @return $this
     */
    public function setTransactionRole($transactionRole)
    {
        $allowedValues = $this->getTransactionRoleAllowableValues();
        if (!in_array($transactionRole, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transactionRole', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transactionRole'] = $transactionRole;

        return $this;
    }

    /**
     * Gets transactionType
     *
     * @return \Frengky\Fineract\Model\InteropTransactionTypeData
     */
    public function getTransactionType()
    {
        return $this->container['transactionType'];
    }

    /**
     * Sets transactionType
     *
     * @param \Frengky\Fineract\Model\InteropTransactionTypeData $transactionType transactionType
     *
     * @return $this
     */
    public function setTransactionType($transactionType)
    {
        $this->container['transactionType'] = $transactionType;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets geoCode
     *
     * @return \Frengky\Fineract\Model\GeoCodeData
     */
    public function getGeoCode()
    {
        return $this->container['geoCode'];
    }

    /**
     * Sets geoCode
     *
     * @param \Frengky\Fineract\Model\GeoCodeData $geoCode geoCode
     *
     * @return $this
     */
    public function setGeoCode($geoCode)
    {
        $this->container['geoCode'] = $geoCode;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return \DateTime
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param \DateTime $expiration expiration
     *
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets extensionList
     *
     * @return \Frengky\Fineract\Model\ExtensionData[]
     */
    public function getExtensionList()
    {
        return $this->container['extensionList'];
    }

    /**
     * Sets extensionList
     *
     * @param \Frengky\Fineract\Model\ExtensionData[] $extensionList extensionList
     *
     * @return $this
     */
    public function setExtensionList($extensionList)
    {
        $this->container['extensionList'] = $extensionList;

        return $this;
    }

    /**
     * Gets expirationLocalDate
     *
     * @return \DateTime
     */
    public function getExpirationLocalDate()
    {
        return $this->container['expirationLocalDate'];
    }

    /**
     * Sets expirationLocalDate
     *
     * @param \DateTime $expirationLocalDate expirationLocalDate
     *
     * @return $this
     */
    public function setExpirationLocalDate($expirationLocalDate)
    {
        $this->container['expirationLocalDate'] = $expirationLocalDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
