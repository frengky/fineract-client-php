<?php
/**
 * GetGroupsTemplateColumnHeaderData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetGroupsTemplateColumnHeaderData Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetGroupsTemplateColumnHeaderData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetGroupsTemplateColumnHeaderData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'columnName' => 'string',
'columnType' => 'string',
'columnLength' => 'int',
'columnDisplayType' => 'string',
'isColumnNullable' => 'bool',
'isColumnPrimaryKey' => 'bool',
'columnValues' => '\Frengky\Fineract\Model\GetGroupsTemplateColumnValues[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'columnName' => null,
'columnType' => null,
'columnLength' => 'int32',
'columnDisplayType' => null,
'isColumnNullable' => null,
'isColumnPrimaryKey' => null,
'columnValues' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'columnName' => 'columnName',
'columnType' => 'columnType',
'columnLength' => 'columnLength',
'columnDisplayType' => 'columnDisplayType',
'isColumnNullable' => 'isColumnNullable',
'isColumnPrimaryKey' => 'isColumnPrimaryKey',
'columnValues' => 'columnValues'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'columnName' => 'setColumnName',
'columnType' => 'setColumnType',
'columnLength' => 'setColumnLength',
'columnDisplayType' => 'setColumnDisplayType',
'isColumnNullable' => 'setIsColumnNullable',
'isColumnPrimaryKey' => 'setIsColumnPrimaryKey',
'columnValues' => 'setColumnValues'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'columnName' => 'getColumnName',
'columnType' => 'getColumnType',
'columnLength' => 'getColumnLength',
'columnDisplayType' => 'getColumnDisplayType',
'isColumnNullable' => 'getIsColumnNullable',
'isColumnPrimaryKey' => 'getIsColumnPrimaryKey',
'columnValues' => 'getColumnValues'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['columnName'] = isset($data['columnName']) ? $data['columnName'] : null;
        $this->container['columnType'] = isset($data['columnType']) ? $data['columnType'] : null;
        $this->container['columnLength'] = isset($data['columnLength']) ? $data['columnLength'] : null;
        $this->container['columnDisplayType'] = isset($data['columnDisplayType']) ? $data['columnDisplayType'] : null;
        $this->container['isColumnNullable'] = isset($data['isColumnNullable']) ? $data['isColumnNullable'] : null;
        $this->container['isColumnPrimaryKey'] = isset($data['isColumnPrimaryKey']) ? $data['isColumnPrimaryKey'] : null;
        $this->container['columnValues'] = isset($data['columnValues']) ? $data['columnValues'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets columnName
     *
     * @return string
     */
    public function getColumnName()
    {
        return $this->container['columnName'];
    }

    /**
     * Sets columnName
     *
     * @param string $columnName columnName
     *
     * @return $this
     */
    public function setColumnName($columnName)
    {
        $this->container['columnName'] = $columnName;

        return $this;
    }

    /**
     * Gets columnType
     *
     * @return string
     */
    public function getColumnType()
    {
        return $this->container['columnType'];
    }

    /**
     * Sets columnType
     *
     * @param string $columnType columnType
     *
     * @return $this
     */
    public function setColumnType($columnType)
    {
        $this->container['columnType'] = $columnType;

        return $this;
    }

    /**
     * Gets columnLength
     *
     * @return int
     */
    public function getColumnLength()
    {
        return $this->container['columnLength'];
    }

    /**
     * Sets columnLength
     *
     * @param int $columnLength columnLength
     *
     * @return $this
     */
    public function setColumnLength($columnLength)
    {
        $this->container['columnLength'] = $columnLength;

        return $this;
    }

    /**
     * Gets columnDisplayType
     *
     * @return string
     */
    public function getColumnDisplayType()
    {
        return $this->container['columnDisplayType'];
    }

    /**
     * Sets columnDisplayType
     *
     * @param string $columnDisplayType columnDisplayType
     *
     * @return $this
     */
    public function setColumnDisplayType($columnDisplayType)
    {
        $this->container['columnDisplayType'] = $columnDisplayType;

        return $this;
    }

    /**
     * Gets isColumnNullable
     *
     * @return bool
     */
    public function getIsColumnNullable()
    {
        return $this->container['isColumnNullable'];
    }

    /**
     * Sets isColumnNullable
     *
     * @param bool $isColumnNullable isColumnNullable
     *
     * @return $this
     */
    public function setIsColumnNullable($isColumnNullable)
    {
        $this->container['isColumnNullable'] = $isColumnNullable;

        return $this;
    }

    /**
     * Gets isColumnPrimaryKey
     *
     * @return bool
     */
    public function getIsColumnPrimaryKey()
    {
        return $this->container['isColumnPrimaryKey'];
    }

    /**
     * Sets isColumnPrimaryKey
     *
     * @param bool $isColumnPrimaryKey isColumnPrimaryKey
     *
     * @return $this
     */
    public function setIsColumnPrimaryKey($isColumnPrimaryKey)
    {
        $this->container['isColumnPrimaryKey'] = $isColumnPrimaryKey;

        return $this;
    }

    /**
     * Gets columnValues
     *
     * @return \Frengky\Fineract\Model\GetGroupsTemplateColumnValues[]
     */
    public function getColumnValues()
    {
        return $this->container['columnValues'];
    }

    /**
     * Sets columnValues
     *
     * @param \Frengky\Fineract\Model\GetGroupsTemplateColumnValues[] $columnValues columnValues
     *
     * @return $this
     */
    public function setColumnValues($columnValues)
    {
        $this->container['columnValues'] = $columnValues;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
