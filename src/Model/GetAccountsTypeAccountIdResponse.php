<?php
/**
 * GetAccountsTypeAccountIdResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetAccountsTypeAccountIdResponse Class Doc Comment
 *
 * @category Class
 * @description GetAccountsTypeAccountIdResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetAccountsTypeAccountIdResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetAccountsTypeAccountIdResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'accountNo' => 'int',
'savingsAccountNumber' => 'int',
'clientId' => 'int',
'clientName' => 'string',
'productId' => 'int',
'productName' => 'string',
'status' => '\Frengky\Fineract\Model\GetAccountsStatus',
'timeline' => '\Frengky\Fineract\Model\GetAccountsTimeline',
'currency' => '\Frengky\Fineract\Model\GetAccountsCurrency',
'summary' => '\Frengky\Fineract\Model\GetAccountsSummary',
'purchasedShares' => '\Frengky\Fineract\Model\GetAccountsPurchasedShares[]',
'savingsAccountId' => 'int',
'currentMarketPrice' => 'int',
'lockinPeriod' => 'int',
'lockPeriodTypeEnum' => '\Frengky\Fineract\Model\GetAccountsLockPeriodTypeEnum',
'minimumActivePeriod' => 'int',
'minimumActivePeriodTypeEnum' => '\Frengky\Fineract\Model\GetAccountsLockPeriodTypeEnum',
'allowDividendCalculationForInactiveClients' => 'bool',
'charges' => '\Frengky\Fineract\Model\GetAccountsCharges[]',
'dividends' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'accountNo' => 'int64',
'savingsAccountNumber' => 'int64',
'clientId' => 'int32',
'clientName' => null,
'productId' => 'int32',
'productName' => null,
'status' => null,
'timeline' => null,
'currency' => null,
'summary' => null,
'purchasedShares' => null,
'savingsAccountId' => 'int32',
'currentMarketPrice' => 'int32',
'lockinPeriod' => 'int32',
'lockPeriodTypeEnum' => null,
'minimumActivePeriod' => 'int32',
'minimumActivePeriodTypeEnum' => null,
'allowDividendCalculationForInactiveClients' => null,
'charges' => null,
'dividends' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'accountNo' => 'accountNo',
'savingsAccountNumber' => 'savingsAccountNumber',
'clientId' => 'clientId',
'clientName' => 'clientName',
'productId' => 'productId',
'productName' => 'productName',
'status' => 'status',
'timeline' => 'timeline',
'currency' => 'currency',
'summary' => 'summary',
'purchasedShares' => 'purchasedShares',
'savingsAccountId' => 'savingsAccountId',
'currentMarketPrice' => 'currentMarketPrice',
'lockinPeriod' => 'lockinPeriod',
'lockPeriodTypeEnum' => 'lockPeriodTypeEnum',
'minimumActivePeriod' => 'minimumActivePeriod',
'minimumActivePeriodTypeEnum' => 'minimumActivePeriodTypeEnum',
'allowDividendCalculationForInactiveClients' => 'allowDividendCalculationForInactiveClients',
'charges' => 'charges',
'dividends' => 'dividends'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'accountNo' => 'setAccountNo',
'savingsAccountNumber' => 'setSavingsAccountNumber',
'clientId' => 'setClientId',
'clientName' => 'setClientName',
'productId' => 'setProductId',
'productName' => 'setProductName',
'status' => 'setStatus',
'timeline' => 'setTimeline',
'currency' => 'setCurrency',
'summary' => 'setSummary',
'purchasedShares' => 'setPurchasedShares',
'savingsAccountId' => 'setSavingsAccountId',
'currentMarketPrice' => 'setCurrentMarketPrice',
'lockinPeriod' => 'setLockinPeriod',
'lockPeriodTypeEnum' => 'setLockPeriodTypeEnum',
'minimumActivePeriod' => 'setMinimumActivePeriod',
'minimumActivePeriodTypeEnum' => 'setMinimumActivePeriodTypeEnum',
'allowDividendCalculationForInactiveClients' => 'setAllowDividendCalculationForInactiveClients',
'charges' => 'setCharges',
'dividends' => 'setDividends'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'accountNo' => 'getAccountNo',
'savingsAccountNumber' => 'getSavingsAccountNumber',
'clientId' => 'getClientId',
'clientName' => 'getClientName',
'productId' => 'getProductId',
'productName' => 'getProductName',
'status' => 'getStatus',
'timeline' => 'getTimeline',
'currency' => 'getCurrency',
'summary' => 'getSummary',
'purchasedShares' => 'getPurchasedShares',
'savingsAccountId' => 'getSavingsAccountId',
'currentMarketPrice' => 'getCurrentMarketPrice',
'lockinPeriod' => 'getLockinPeriod',
'lockPeriodTypeEnum' => 'getLockPeriodTypeEnum',
'minimumActivePeriod' => 'getMinimumActivePeriod',
'minimumActivePeriodTypeEnum' => 'getMinimumActivePeriodTypeEnum',
'allowDividendCalculationForInactiveClients' => 'getAllowDividendCalculationForInactiveClients',
'charges' => 'getCharges',
'dividends' => 'getDividends'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['accountNo'] = isset($data['accountNo']) ? $data['accountNo'] : null;
        $this->container['savingsAccountNumber'] = isset($data['savingsAccountNumber']) ? $data['savingsAccountNumber'] : null;
        $this->container['clientId'] = isset($data['clientId']) ? $data['clientId'] : null;
        $this->container['clientName'] = isset($data['clientName']) ? $data['clientName'] : null;
        $this->container['productId'] = isset($data['productId']) ? $data['productId'] : null;
        $this->container['productName'] = isset($data['productName']) ? $data['productName'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['timeline'] = isset($data['timeline']) ? $data['timeline'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['purchasedShares'] = isset($data['purchasedShares']) ? $data['purchasedShares'] : null;
        $this->container['savingsAccountId'] = isset($data['savingsAccountId']) ? $data['savingsAccountId'] : null;
        $this->container['currentMarketPrice'] = isset($data['currentMarketPrice']) ? $data['currentMarketPrice'] : null;
        $this->container['lockinPeriod'] = isset($data['lockinPeriod']) ? $data['lockinPeriod'] : null;
        $this->container['lockPeriodTypeEnum'] = isset($data['lockPeriodTypeEnum']) ? $data['lockPeriodTypeEnum'] : null;
        $this->container['minimumActivePeriod'] = isset($data['minimumActivePeriod']) ? $data['minimumActivePeriod'] : null;
        $this->container['minimumActivePeriodTypeEnum'] = isset($data['minimumActivePeriodTypeEnum']) ? $data['minimumActivePeriodTypeEnum'] : null;
        $this->container['allowDividendCalculationForInactiveClients'] = isset($data['allowDividendCalculationForInactiveClients']) ? $data['allowDividendCalculationForInactiveClients'] : null;
        $this->container['charges'] = isset($data['charges']) ? $data['charges'] : null;
        $this->container['dividends'] = isset($data['dividends']) ? $data['dividends'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets accountNo
     *
     * @return int
     */
    public function getAccountNo()
    {
        return $this->container['accountNo'];
    }

    /**
     * Sets accountNo
     *
     * @param int $accountNo accountNo
     *
     * @return $this
     */
    public function setAccountNo($accountNo)
    {
        $this->container['accountNo'] = $accountNo;

        return $this;
    }

    /**
     * Gets savingsAccountNumber
     *
     * @return int
     */
    public function getSavingsAccountNumber()
    {
        return $this->container['savingsAccountNumber'];
    }

    /**
     * Sets savingsAccountNumber
     *
     * @param int $savingsAccountNumber savingsAccountNumber
     *
     * @return $this
     */
    public function setSavingsAccountNumber($savingsAccountNumber)
    {
        $this->container['savingsAccountNumber'] = $savingsAccountNumber;

        return $this;
    }

    /**
     * Gets clientId
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['clientId'];
    }

    /**
     * Sets clientId
     *
     * @param int $clientId clientId
     *
     * @return $this
     */
    public function setClientId($clientId)
    {
        $this->container['clientId'] = $clientId;

        return $this;
    }

    /**
     * Gets clientName
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['clientName'];
    }

    /**
     * Sets clientName
     *
     * @param string $clientName clientName
     *
     * @return $this
     */
    public function setClientName($clientName)
    {
        $this->container['clientName'] = $clientName;

        return $this;
    }

    /**
     * Gets productId
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['productId'];
    }

    /**
     * Sets productId
     *
     * @param int $productId productId
     *
     * @return $this
     */
    public function setProductId($productId)
    {
        $this->container['productId'] = $productId;

        return $this;
    }

    /**
     * Gets productName
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['productName'];
    }

    /**
     * Sets productName
     *
     * @param string $productName productName
     *
     * @return $this
     */
    public function setProductName($productName)
    {
        $this->container['productName'] = $productName;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Frengky\Fineract\Model\GetAccountsStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Frengky\Fineract\Model\GetAccountsStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets timeline
     *
     * @return \Frengky\Fineract\Model\GetAccountsTimeline
     */
    public function getTimeline()
    {
        return $this->container['timeline'];
    }

    /**
     * Sets timeline
     *
     * @param \Frengky\Fineract\Model\GetAccountsTimeline $timeline timeline
     *
     * @return $this
     */
    public function setTimeline($timeline)
    {
        $this->container['timeline'] = $timeline;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Frengky\Fineract\Model\GetAccountsCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Frengky\Fineract\Model\GetAccountsCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \Frengky\Fineract\Model\GetAccountsSummary
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \Frengky\Fineract\Model\GetAccountsSummary $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets purchasedShares
     *
     * @return \Frengky\Fineract\Model\GetAccountsPurchasedShares[]
     */
    public function getPurchasedShares()
    {
        return $this->container['purchasedShares'];
    }

    /**
     * Sets purchasedShares
     *
     * @param \Frengky\Fineract\Model\GetAccountsPurchasedShares[] $purchasedShares purchasedShares
     *
     * @return $this
     */
    public function setPurchasedShares($purchasedShares)
    {
        $this->container['purchasedShares'] = $purchasedShares;

        return $this;
    }

    /**
     * Gets savingsAccountId
     *
     * @return int
     */
    public function getSavingsAccountId()
    {
        return $this->container['savingsAccountId'];
    }

    /**
     * Sets savingsAccountId
     *
     * @param int $savingsAccountId savingsAccountId
     *
     * @return $this
     */
    public function setSavingsAccountId($savingsAccountId)
    {
        $this->container['savingsAccountId'] = $savingsAccountId;

        return $this;
    }

    /**
     * Gets currentMarketPrice
     *
     * @return int
     */
    public function getCurrentMarketPrice()
    {
        return $this->container['currentMarketPrice'];
    }

    /**
     * Sets currentMarketPrice
     *
     * @param int $currentMarketPrice currentMarketPrice
     *
     * @return $this
     */
    public function setCurrentMarketPrice($currentMarketPrice)
    {
        $this->container['currentMarketPrice'] = $currentMarketPrice;

        return $this;
    }

    /**
     * Gets lockinPeriod
     *
     * @return int
     */
    public function getLockinPeriod()
    {
        return $this->container['lockinPeriod'];
    }

    /**
     * Sets lockinPeriod
     *
     * @param int $lockinPeriod lockinPeriod
     *
     * @return $this
     */
    public function setLockinPeriod($lockinPeriod)
    {
        $this->container['lockinPeriod'] = $lockinPeriod;

        return $this;
    }

    /**
     * Gets lockPeriodTypeEnum
     *
     * @return \Frengky\Fineract\Model\GetAccountsLockPeriodTypeEnum
     */
    public function getLockPeriodTypeEnum()
    {
        return $this->container['lockPeriodTypeEnum'];
    }

    /**
     * Sets lockPeriodTypeEnum
     *
     * @param \Frengky\Fineract\Model\GetAccountsLockPeriodTypeEnum $lockPeriodTypeEnum lockPeriodTypeEnum
     *
     * @return $this
     */
    public function setLockPeriodTypeEnum($lockPeriodTypeEnum)
    {
        $this->container['lockPeriodTypeEnum'] = $lockPeriodTypeEnum;

        return $this;
    }

    /**
     * Gets minimumActivePeriod
     *
     * @return int
     */
    public function getMinimumActivePeriod()
    {
        return $this->container['minimumActivePeriod'];
    }

    /**
     * Sets minimumActivePeriod
     *
     * @param int $minimumActivePeriod minimumActivePeriod
     *
     * @return $this
     */
    public function setMinimumActivePeriod($minimumActivePeriod)
    {
        $this->container['minimumActivePeriod'] = $minimumActivePeriod;

        return $this;
    }

    /**
     * Gets minimumActivePeriodTypeEnum
     *
     * @return \Frengky\Fineract\Model\GetAccountsLockPeriodTypeEnum
     */
    public function getMinimumActivePeriodTypeEnum()
    {
        return $this->container['minimumActivePeriodTypeEnum'];
    }

    /**
     * Sets minimumActivePeriodTypeEnum
     *
     * @param \Frengky\Fineract\Model\GetAccountsLockPeriodTypeEnum $minimumActivePeriodTypeEnum minimumActivePeriodTypeEnum
     *
     * @return $this
     */
    public function setMinimumActivePeriodTypeEnum($minimumActivePeriodTypeEnum)
    {
        $this->container['minimumActivePeriodTypeEnum'] = $minimumActivePeriodTypeEnum;

        return $this;
    }

    /**
     * Gets allowDividendCalculationForInactiveClients
     *
     * @return bool
     */
    public function getAllowDividendCalculationForInactiveClients()
    {
        return $this->container['allowDividendCalculationForInactiveClients'];
    }

    /**
     * Sets allowDividendCalculationForInactiveClients
     *
     * @param bool $allowDividendCalculationForInactiveClients allowDividendCalculationForInactiveClients
     *
     * @return $this
     */
    public function setAllowDividendCalculationForInactiveClients($allowDividendCalculationForInactiveClients)
    {
        $this->container['allowDividendCalculationForInactiveClients'] = $allowDividendCalculationForInactiveClients;

        return $this;
    }

    /**
     * Gets charges
     *
     * @return \Frengky\Fineract\Model\GetAccountsCharges[]
     */
    public function getCharges()
    {
        return $this->container['charges'];
    }

    /**
     * Sets charges
     *
     * @param \Frengky\Fineract\Model\GetAccountsCharges[] $charges charges
     *
     * @return $this
     */
    public function setCharges($charges)
    {
        $this->container['charges'] = $charges;

        return $this;
    }

    /**
     * Gets dividends
     *
     * @return string[]
     */
    public function getDividends()
    {
        return $this->container['dividends'];
    }

    /**
     * Sets dividends
     *
     * @param string[] $dividends dividends
     *
     * @return $this
     */
    public function setDividends($dividends)
    {
        $this->container['dividends'] = $dividends;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
