<?php
/**
 * Client
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * Client Class Doc Comment
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Client implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Client';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'office' => '\Frengky\Fineract\Model\Office',
'transferToOffice' => '\Frengky\Fineract\Model\Office',
'image' => '\Frengky\Fineract\Model\Image',
'status' => 'int',
'firstname' => 'string',
'middlename' => 'string',
'lastname' => 'string',
'displayName' => 'string',
'mobileNo' => 'string',
'emailAddress' => 'string',
'externalId' => 'string',
'staff' => '\Frengky\Fineract\Model\Staff',
'groups' => '\Frengky\Fineract\Model\Group[]',
'accountNumberRequiresAutoGeneration' => 'bool',
'closureDate' => '\DateTime',
'withdrawalDate' => '\DateTime',
'submittedOnDate' => '\DateTime',
'legalForm' => 'int',
'reopenedDate' => '\DateTime',
'proposedTransferDate' => '\DateTime',
'active' => 'bool',
'activationLocalDate' => '\DateTime',
'transferInProgress' => 'bool',
'transferOnHold' => 'bool',
'withdrawn' => 'bool',
'officeJoiningLocalDate' => '\DateTime',
'transferInProgressOrOnHold' => 'bool',
'notPending' => 'bool',
'notStaff' => 'bool',
'rejectedDate' => '\DateTime',
'notActive' => 'bool',
'rejected' => 'bool',
'pending' => 'bool',
'closed' => 'bool',
'new' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'office' => null,
'transferToOffice' => null,
'image' => null,
'status' => 'int32',
'firstname' => null,
'middlename' => null,
'lastname' => null,
'displayName' => null,
'mobileNo' => null,
'emailAddress' => null,
'externalId' => null,
'staff' => null,
'groups' => null,
'accountNumberRequiresAutoGeneration' => null,
'closureDate' => 'date',
'withdrawalDate' => 'date',
'submittedOnDate' => 'date',
'legalForm' => 'int32',
'reopenedDate' => 'date',
'proposedTransferDate' => 'date-time',
'active' => null,
'activationLocalDate' => 'date',
'transferInProgress' => null,
'transferOnHold' => null,
'withdrawn' => null,
'officeJoiningLocalDate' => 'date',
'transferInProgressOrOnHold' => null,
'notPending' => null,
'notStaff' => null,
'rejectedDate' => 'date',
'notActive' => null,
'rejected' => null,
'pending' => null,
'closed' => null,
'new' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'office' => 'office',
'transferToOffice' => 'transferToOffice',
'image' => 'image',
'status' => 'status',
'firstname' => 'firstname',
'middlename' => 'middlename',
'lastname' => 'lastname',
'displayName' => 'displayName',
'mobileNo' => 'mobileNo',
'emailAddress' => 'emailAddress',
'externalId' => 'externalId',
'staff' => 'staff',
'groups' => 'groups',
'accountNumberRequiresAutoGeneration' => 'accountNumberRequiresAutoGeneration',
'closureDate' => 'closureDate',
'withdrawalDate' => 'withdrawalDate',
'submittedOnDate' => 'submittedOnDate',
'legalForm' => 'legalForm',
'reopenedDate' => 'reopenedDate',
'proposedTransferDate' => 'proposedTransferDate',
'active' => 'active',
'activationLocalDate' => 'activationLocalDate',
'transferInProgress' => 'transferInProgress',
'transferOnHold' => 'transferOnHold',
'withdrawn' => 'withdrawn',
'officeJoiningLocalDate' => 'officeJoiningLocalDate',
'transferInProgressOrOnHold' => 'transferInProgressOrOnHold',
'notPending' => 'notPending',
'notStaff' => 'notStaff',
'rejectedDate' => 'rejectedDate',
'notActive' => 'notActive',
'rejected' => 'rejected',
'pending' => 'pending',
'closed' => 'closed',
'new' => 'new'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'office' => 'setOffice',
'transferToOffice' => 'setTransferToOffice',
'image' => 'setImage',
'status' => 'setStatus',
'firstname' => 'setFirstname',
'middlename' => 'setMiddlename',
'lastname' => 'setLastname',
'displayName' => 'setDisplayName',
'mobileNo' => 'setMobileNo',
'emailAddress' => 'setEmailAddress',
'externalId' => 'setExternalId',
'staff' => 'setStaff',
'groups' => 'setGroups',
'accountNumberRequiresAutoGeneration' => 'setAccountNumberRequiresAutoGeneration',
'closureDate' => 'setClosureDate',
'withdrawalDate' => 'setWithdrawalDate',
'submittedOnDate' => 'setSubmittedOnDate',
'legalForm' => 'setLegalForm',
'reopenedDate' => 'setReopenedDate',
'proposedTransferDate' => 'setProposedTransferDate',
'active' => 'setActive',
'activationLocalDate' => 'setActivationLocalDate',
'transferInProgress' => 'setTransferInProgress',
'transferOnHold' => 'setTransferOnHold',
'withdrawn' => 'setWithdrawn',
'officeJoiningLocalDate' => 'setOfficeJoiningLocalDate',
'transferInProgressOrOnHold' => 'setTransferInProgressOrOnHold',
'notPending' => 'setNotPending',
'notStaff' => 'setNotStaff',
'rejectedDate' => 'setRejectedDate',
'notActive' => 'setNotActive',
'rejected' => 'setRejected',
'pending' => 'setPending',
'closed' => 'setClosed',
'new' => 'setNew'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'office' => 'getOffice',
'transferToOffice' => 'getTransferToOffice',
'image' => 'getImage',
'status' => 'getStatus',
'firstname' => 'getFirstname',
'middlename' => 'getMiddlename',
'lastname' => 'getLastname',
'displayName' => 'getDisplayName',
'mobileNo' => 'getMobileNo',
'emailAddress' => 'getEmailAddress',
'externalId' => 'getExternalId',
'staff' => 'getStaff',
'groups' => 'getGroups',
'accountNumberRequiresAutoGeneration' => 'getAccountNumberRequiresAutoGeneration',
'closureDate' => 'getClosureDate',
'withdrawalDate' => 'getWithdrawalDate',
'submittedOnDate' => 'getSubmittedOnDate',
'legalForm' => 'getLegalForm',
'reopenedDate' => 'getReopenedDate',
'proposedTransferDate' => 'getProposedTransferDate',
'active' => 'getActive',
'activationLocalDate' => 'getActivationLocalDate',
'transferInProgress' => 'getTransferInProgress',
'transferOnHold' => 'getTransferOnHold',
'withdrawn' => 'getWithdrawn',
'officeJoiningLocalDate' => 'getOfficeJoiningLocalDate',
'transferInProgressOrOnHold' => 'getTransferInProgressOrOnHold',
'notPending' => 'getNotPending',
'notStaff' => 'getNotStaff',
'rejectedDate' => 'getRejectedDate',
'notActive' => 'getNotActive',
'rejected' => 'getRejected',
'pending' => 'getPending',
'closed' => 'getClosed',
'new' => 'getNew'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['office'] = isset($data['office']) ? $data['office'] : null;
        $this->container['transferToOffice'] = isset($data['transferToOffice']) ? $data['transferToOffice'] : null;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['firstname'] = isset($data['firstname']) ? $data['firstname'] : null;
        $this->container['middlename'] = isset($data['middlename']) ? $data['middlename'] : null;
        $this->container['lastname'] = isset($data['lastname']) ? $data['lastname'] : null;
        $this->container['displayName'] = isset($data['displayName']) ? $data['displayName'] : null;
        $this->container['mobileNo'] = isset($data['mobileNo']) ? $data['mobileNo'] : null;
        $this->container['emailAddress'] = isset($data['emailAddress']) ? $data['emailAddress'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['staff'] = isset($data['staff']) ? $data['staff'] : null;
        $this->container['groups'] = isset($data['groups']) ? $data['groups'] : null;
        $this->container['accountNumberRequiresAutoGeneration'] = isset($data['accountNumberRequiresAutoGeneration']) ? $data['accountNumberRequiresAutoGeneration'] : null;
        $this->container['closureDate'] = isset($data['closureDate']) ? $data['closureDate'] : null;
        $this->container['withdrawalDate'] = isset($data['withdrawalDate']) ? $data['withdrawalDate'] : null;
        $this->container['submittedOnDate'] = isset($data['submittedOnDate']) ? $data['submittedOnDate'] : null;
        $this->container['legalForm'] = isset($data['legalForm']) ? $data['legalForm'] : null;
        $this->container['reopenedDate'] = isset($data['reopenedDate']) ? $data['reopenedDate'] : null;
        $this->container['proposedTransferDate'] = isset($data['proposedTransferDate']) ? $data['proposedTransferDate'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['activationLocalDate'] = isset($data['activationLocalDate']) ? $data['activationLocalDate'] : null;
        $this->container['transferInProgress'] = isset($data['transferInProgress']) ? $data['transferInProgress'] : null;
        $this->container['transferOnHold'] = isset($data['transferOnHold']) ? $data['transferOnHold'] : null;
        $this->container['withdrawn'] = isset($data['withdrawn']) ? $data['withdrawn'] : null;
        $this->container['officeJoiningLocalDate'] = isset($data['officeJoiningLocalDate']) ? $data['officeJoiningLocalDate'] : null;
        $this->container['transferInProgressOrOnHold'] = isset($data['transferInProgressOrOnHold']) ? $data['transferInProgressOrOnHold'] : null;
        $this->container['notPending'] = isset($data['notPending']) ? $data['notPending'] : null;
        $this->container['notStaff'] = isset($data['notStaff']) ? $data['notStaff'] : null;
        $this->container['rejectedDate'] = isset($data['rejectedDate']) ? $data['rejectedDate'] : null;
        $this->container['notActive'] = isset($data['notActive']) ? $data['notActive'] : null;
        $this->container['rejected'] = isset($data['rejected']) ? $data['rejected'] : null;
        $this->container['pending'] = isset($data['pending']) ? $data['pending'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['new'] = isset($data['new']) ? $data['new'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets office
     *
     * @return \Frengky\Fineract\Model\Office
     */
    public function getOffice()
    {
        return $this->container['office'];
    }

    /**
     * Sets office
     *
     * @param \Frengky\Fineract\Model\Office $office office
     *
     * @return $this
     */
    public function setOffice($office)
    {
        $this->container['office'] = $office;

        return $this;
    }

    /**
     * Gets transferToOffice
     *
     * @return \Frengky\Fineract\Model\Office
     */
    public function getTransferToOffice()
    {
        return $this->container['transferToOffice'];
    }

    /**
     * Sets transferToOffice
     *
     * @param \Frengky\Fineract\Model\Office $transferToOffice transferToOffice
     *
     * @return $this
     */
    public function setTransferToOffice($transferToOffice)
    {
        $this->container['transferToOffice'] = $transferToOffice;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \Frengky\Fineract\Model\Image
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \Frengky\Fineract\Model\Image $image image
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname firstname
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets middlename
     *
     * @return string
     */
    public function getMiddlename()
    {
        return $this->container['middlename'];
    }

    /**
     * Sets middlename
     *
     * @param string $middlename middlename
     *
     * @return $this
     */
    public function setMiddlename($middlename)
    {
        $this->container['middlename'] = $middlename;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname lastname
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets displayName
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['displayName'];
    }

    /**
     * Sets displayName
     *
     * @param string $displayName displayName
     *
     * @return $this
     */
    public function setDisplayName($displayName)
    {
        $this->container['displayName'] = $displayName;

        return $this;
    }

    /**
     * Gets mobileNo
     *
     * @return string
     */
    public function getMobileNo()
    {
        return $this->container['mobileNo'];
    }

    /**
     * Sets mobileNo
     *
     * @param string $mobileNo mobileNo
     *
     * @return $this
     */
    public function setMobileNo($mobileNo)
    {
        $this->container['mobileNo'] = $mobileNo;

        return $this;
    }

    /**
     * Gets emailAddress
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['emailAddress'];
    }

    /**
     * Sets emailAddress
     *
     * @param string $emailAddress emailAddress
     *
     * @return $this
     */
    public function setEmailAddress($emailAddress)
    {
        $this->container['emailAddress'] = $emailAddress;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId externalId
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets staff
     *
     * @return \Frengky\Fineract\Model\Staff
     */
    public function getStaff()
    {
        return $this->container['staff'];
    }

    /**
     * Sets staff
     *
     * @param \Frengky\Fineract\Model\Staff $staff staff
     *
     * @return $this
     */
    public function setStaff($staff)
    {
        $this->container['staff'] = $staff;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \Frengky\Fineract\Model\Group[]
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \Frengky\Fineract\Model\Group[] $groups groups
     *
     * @return $this
     */
    public function setGroups($groups)
    {
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets accountNumberRequiresAutoGeneration
     *
     * @return bool
     */
    public function getAccountNumberRequiresAutoGeneration()
    {
        return $this->container['accountNumberRequiresAutoGeneration'];
    }

    /**
     * Sets accountNumberRequiresAutoGeneration
     *
     * @param bool $accountNumberRequiresAutoGeneration accountNumberRequiresAutoGeneration
     *
     * @return $this
     */
    public function setAccountNumberRequiresAutoGeneration($accountNumberRequiresAutoGeneration)
    {
        $this->container['accountNumberRequiresAutoGeneration'] = $accountNumberRequiresAutoGeneration;

        return $this;
    }

    /**
     * Gets closureDate
     *
     * @return \DateTime
     */
    public function getClosureDate()
    {
        return $this->container['closureDate'];
    }

    /**
     * Sets closureDate
     *
     * @param \DateTime $closureDate closureDate
     *
     * @return $this
     */
    public function setClosureDate($closureDate)
    {
        $this->container['closureDate'] = $closureDate;

        return $this;
    }

    /**
     * Gets withdrawalDate
     *
     * @return \DateTime
     */
    public function getWithdrawalDate()
    {
        return $this->container['withdrawalDate'];
    }

    /**
     * Sets withdrawalDate
     *
     * @param \DateTime $withdrawalDate withdrawalDate
     *
     * @return $this
     */
    public function setWithdrawalDate($withdrawalDate)
    {
        $this->container['withdrawalDate'] = $withdrawalDate;

        return $this;
    }

    /**
     * Gets submittedOnDate
     *
     * @return \DateTime
     */
    public function getSubmittedOnDate()
    {
        return $this->container['submittedOnDate'];
    }

    /**
     * Sets submittedOnDate
     *
     * @param \DateTime $submittedOnDate submittedOnDate
     *
     * @return $this
     */
    public function setSubmittedOnDate($submittedOnDate)
    {
        $this->container['submittedOnDate'] = $submittedOnDate;

        return $this;
    }

    /**
     * Gets legalForm
     *
     * @return int
     */
    public function getLegalForm()
    {
        return $this->container['legalForm'];
    }

    /**
     * Sets legalForm
     *
     * @param int $legalForm legalForm
     *
     * @return $this
     */
    public function setLegalForm($legalForm)
    {
        $this->container['legalForm'] = $legalForm;

        return $this;
    }

    /**
     * Gets reopenedDate
     *
     * @return \DateTime
     */
    public function getReopenedDate()
    {
        return $this->container['reopenedDate'];
    }

    /**
     * Sets reopenedDate
     *
     * @param \DateTime $reopenedDate reopenedDate
     *
     * @return $this
     */
    public function setReopenedDate($reopenedDate)
    {
        $this->container['reopenedDate'] = $reopenedDate;

        return $this;
    }

    /**
     * Gets proposedTransferDate
     *
     * @return \DateTime
     */
    public function getProposedTransferDate()
    {
        return $this->container['proposedTransferDate'];
    }

    /**
     * Sets proposedTransferDate
     *
     * @param \DateTime $proposedTransferDate proposedTransferDate
     *
     * @return $this
     */
    public function setProposedTransferDate($proposedTransferDate)
    {
        $this->container['proposedTransferDate'] = $proposedTransferDate;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets activationLocalDate
     *
     * @return \DateTime
     */
    public function getActivationLocalDate()
    {
        return $this->container['activationLocalDate'];
    }

    /**
     * Sets activationLocalDate
     *
     * @param \DateTime $activationLocalDate activationLocalDate
     *
     * @return $this
     */
    public function setActivationLocalDate($activationLocalDate)
    {
        $this->container['activationLocalDate'] = $activationLocalDate;

        return $this;
    }

    /**
     * Gets transferInProgress
     *
     * @return bool
     */
    public function getTransferInProgress()
    {
        return $this->container['transferInProgress'];
    }

    /**
     * Sets transferInProgress
     *
     * @param bool $transferInProgress transferInProgress
     *
     * @return $this
     */
    public function setTransferInProgress($transferInProgress)
    {
        $this->container['transferInProgress'] = $transferInProgress;

        return $this;
    }

    /**
     * Gets transferOnHold
     *
     * @return bool
     */
    public function getTransferOnHold()
    {
        return $this->container['transferOnHold'];
    }

    /**
     * Sets transferOnHold
     *
     * @param bool $transferOnHold transferOnHold
     *
     * @return $this
     */
    public function setTransferOnHold($transferOnHold)
    {
        $this->container['transferOnHold'] = $transferOnHold;

        return $this;
    }

    /**
     * Gets withdrawn
     *
     * @return bool
     */
    public function getWithdrawn()
    {
        return $this->container['withdrawn'];
    }

    /**
     * Sets withdrawn
     *
     * @param bool $withdrawn withdrawn
     *
     * @return $this
     */
    public function setWithdrawn($withdrawn)
    {
        $this->container['withdrawn'] = $withdrawn;

        return $this;
    }

    /**
     * Gets officeJoiningLocalDate
     *
     * @return \DateTime
     */
    public function getOfficeJoiningLocalDate()
    {
        return $this->container['officeJoiningLocalDate'];
    }

    /**
     * Sets officeJoiningLocalDate
     *
     * @param \DateTime $officeJoiningLocalDate officeJoiningLocalDate
     *
     * @return $this
     */
    public function setOfficeJoiningLocalDate($officeJoiningLocalDate)
    {
        $this->container['officeJoiningLocalDate'] = $officeJoiningLocalDate;

        return $this;
    }

    /**
     * Gets transferInProgressOrOnHold
     *
     * @return bool
     */
    public function getTransferInProgressOrOnHold()
    {
        return $this->container['transferInProgressOrOnHold'];
    }

    /**
     * Sets transferInProgressOrOnHold
     *
     * @param bool $transferInProgressOrOnHold transferInProgressOrOnHold
     *
     * @return $this
     */
    public function setTransferInProgressOrOnHold($transferInProgressOrOnHold)
    {
        $this->container['transferInProgressOrOnHold'] = $transferInProgressOrOnHold;

        return $this;
    }

    /**
     * Gets notPending
     *
     * @return bool
     */
    public function getNotPending()
    {
        return $this->container['notPending'];
    }

    /**
     * Sets notPending
     *
     * @param bool $notPending notPending
     *
     * @return $this
     */
    public function setNotPending($notPending)
    {
        $this->container['notPending'] = $notPending;

        return $this;
    }

    /**
     * Gets notStaff
     *
     * @return bool
     */
    public function getNotStaff()
    {
        return $this->container['notStaff'];
    }

    /**
     * Sets notStaff
     *
     * @param bool $notStaff notStaff
     *
     * @return $this
     */
    public function setNotStaff($notStaff)
    {
        $this->container['notStaff'] = $notStaff;

        return $this;
    }

    /**
     * Gets rejectedDate
     *
     * @return \DateTime
     */
    public function getRejectedDate()
    {
        return $this->container['rejectedDate'];
    }

    /**
     * Sets rejectedDate
     *
     * @param \DateTime $rejectedDate rejectedDate
     *
     * @return $this
     */
    public function setRejectedDate($rejectedDate)
    {
        $this->container['rejectedDate'] = $rejectedDate;

        return $this;
    }

    /**
     * Gets notActive
     *
     * @return bool
     */
    public function getNotActive()
    {
        return $this->container['notActive'];
    }

    /**
     * Sets notActive
     *
     * @param bool $notActive notActive
     *
     * @return $this
     */
    public function setNotActive($notActive)
    {
        $this->container['notActive'] = $notActive;

        return $this;
    }

    /**
     * Gets rejected
     *
     * @return bool
     */
    public function getRejected()
    {
        return $this->container['rejected'];
    }

    /**
     * Sets rejected
     *
     * @param bool $rejected rejected
     *
     * @return $this
     */
    public function setRejected($rejected)
    {
        $this->container['rejected'] = $rejected;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return bool
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param bool $pending pending
     *
     * @return $this
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed closed
     *
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets new
     *
     * @return bool
     */
    public function getNew()
    {
        return $this->container['new'];
    }

    /**
     * Sets new
     *
     * @param bool $new new
     *
     * @return $this
     */
    public function setNew($new)
    {
        $this->container['new'] = $new;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
