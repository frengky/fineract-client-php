<?php
/**
 * PostProductsTypeRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * PostProductsTypeRequest Class Doc Comment
 *
 * @category Class
 * @description PostProductsTypeRequest
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PostProductsTypeRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PostProductsTypeRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'shortName' => 'string',
'description' => 'string',
'currencyCode' => 'string',
'digitsAfterDecimal' => 'int',
'inMultiplesOf' => 'int',
'locale' => 'string',
'totalShares' => 'int',
'sharesIssued' => 'int',
'unitPrice' => 'int',
'minimumShares' => 'int',
'nominalShares' => 'int',
'maximumShares' => 'int',
'minimumActivePeriodForDividends' => 'int',
'minimumactiveperiodFrequencyType' => 'int',
'lockinPeriodFrequency' => 'int',
'lockinPeriodFrequencyType' => 'int',
'allowDividendCalculationForInactiveClients' => 'bool',
'marketPricePeriods' => '\Frengky\Fineract\Model\PostProductsMarketPricePeriods[]',
'chargesSelected' => '\Frengky\Fineract\Model\PostProductsChargesSelected[]',
'accountingRule' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'shortName' => null,
'description' => null,
'currencyCode' => null,
'digitsAfterDecimal' => 'int32',
'inMultiplesOf' => 'int32',
'locale' => null,
'totalShares' => 'int32',
'sharesIssued' => 'int32',
'unitPrice' => 'int32',
'minimumShares' => 'int32',
'nominalShares' => 'int32',
'maximumShares' => 'int32',
'minimumActivePeriodForDividends' => 'int32',
'minimumactiveperiodFrequencyType' => 'int32',
'lockinPeriodFrequency' => 'int32',
'lockinPeriodFrequencyType' => 'int32',
'allowDividendCalculationForInactiveClients' => null,
'marketPricePeriods' => null,
'chargesSelected' => null,
'accountingRule' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'shortName' => 'shortName',
'description' => 'description',
'currencyCode' => 'currencyCode',
'digitsAfterDecimal' => 'digitsAfterDecimal',
'inMultiplesOf' => 'inMultiplesOf',
'locale' => 'locale',
'totalShares' => 'totalShares',
'sharesIssued' => 'sharesIssued',
'unitPrice' => 'unitPrice',
'minimumShares' => 'minimumShares',
'nominalShares' => 'nominalShares',
'maximumShares' => 'maximumShares',
'minimumActivePeriodForDividends' => 'minimumActivePeriodForDividends',
'minimumactiveperiodFrequencyType' => 'minimumactiveperiodFrequencyType',
'lockinPeriodFrequency' => 'lockinPeriodFrequency',
'lockinPeriodFrequencyType' => 'lockinPeriodFrequencyType',
'allowDividendCalculationForInactiveClients' => 'allowDividendCalculationForInactiveClients',
'marketPricePeriods' => 'marketPricePeriods',
'chargesSelected' => 'chargesSelected',
'accountingRule' => 'accountingRule'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'shortName' => 'setShortName',
'description' => 'setDescription',
'currencyCode' => 'setCurrencyCode',
'digitsAfterDecimal' => 'setDigitsAfterDecimal',
'inMultiplesOf' => 'setInMultiplesOf',
'locale' => 'setLocale',
'totalShares' => 'setTotalShares',
'sharesIssued' => 'setSharesIssued',
'unitPrice' => 'setUnitPrice',
'minimumShares' => 'setMinimumShares',
'nominalShares' => 'setNominalShares',
'maximumShares' => 'setMaximumShares',
'minimumActivePeriodForDividends' => 'setMinimumActivePeriodForDividends',
'minimumactiveperiodFrequencyType' => 'setMinimumactiveperiodFrequencyType',
'lockinPeriodFrequency' => 'setLockinPeriodFrequency',
'lockinPeriodFrequencyType' => 'setLockinPeriodFrequencyType',
'allowDividendCalculationForInactiveClients' => 'setAllowDividendCalculationForInactiveClients',
'marketPricePeriods' => 'setMarketPricePeriods',
'chargesSelected' => 'setChargesSelected',
'accountingRule' => 'setAccountingRule'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'shortName' => 'getShortName',
'description' => 'getDescription',
'currencyCode' => 'getCurrencyCode',
'digitsAfterDecimal' => 'getDigitsAfterDecimal',
'inMultiplesOf' => 'getInMultiplesOf',
'locale' => 'getLocale',
'totalShares' => 'getTotalShares',
'sharesIssued' => 'getSharesIssued',
'unitPrice' => 'getUnitPrice',
'minimumShares' => 'getMinimumShares',
'nominalShares' => 'getNominalShares',
'maximumShares' => 'getMaximumShares',
'minimumActivePeriodForDividends' => 'getMinimumActivePeriodForDividends',
'minimumactiveperiodFrequencyType' => 'getMinimumactiveperiodFrequencyType',
'lockinPeriodFrequency' => 'getLockinPeriodFrequency',
'lockinPeriodFrequencyType' => 'getLockinPeriodFrequencyType',
'allowDividendCalculationForInactiveClients' => 'getAllowDividendCalculationForInactiveClients',
'marketPricePeriods' => 'getMarketPricePeriods',
'chargesSelected' => 'getChargesSelected',
'accountingRule' => 'getAccountingRule'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['shortName'] = isset($data['shortName']) ? $data['shortName'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['currencyCode'] = isset($data['currencyCode']) ? $data['currencyCode'] : null;
        $this->container['digitsAfterDecimal'] = isset($data['digitsAfterDecimal']) ? $data['digitsAfterDecimal'] : null;
        $this->container['inMultiplesOf'] = isset($data['inMultiplesOf']) ? $data['inMultiplesOf'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['totalShares'] = isset($data['totalShares']) ? $data['totalShares'] : null;
        $this->container['sharesIssued'] = isset($data['sharesIssued']) ? $data['sharesIssued'] : null;
        $this->container['unitPrice'] = isset($data['unitPrice']) ? $data['unitPrice'] : null;
        $this->container['minimumShares'] = isset($data['minimumShares']) ? $data['minimumShares'] : null;
        $this->container['nominalShares'] = isset($data['nominalShares']) ? $data['nominalShares'] : null;
        $this->container['maximumShares'] = isset($data['maximumShares']) ? $data['maximumShares'] : null;
        $this->container['minimumActivePeriodForDividends'] = isset($data['minimumActivePeriodForDividends']) ? $data['minimumActivePeriodForDividends'] : null;
        $this->container['minimumactiveperiodFrequencyType'] = isset($data['minimumactiveperiodFrequencyType']) ? $data['minimumactiveperiodFrequencyType'] : null;
        $this->container['lockinPeriodFrequency'] = isset($data['lockinPeriodFrequency']) ? $data['lockinPeriodFrequency'] : null;
        $this->container['lockinPeriodFrequencyType'] = isset($data['lockinPeriodFrequencyType']) ? $data['lockinPeriodFrequencyType'] : null;
        $this->container['allowDividendCalculationForInactiveClients'] = isset($data['allowDividendCalculationForInactiveClients']) ? $data['allowDividendCalculationForInactiveClients'] : null;
        $this->container['marketPricePeriods'] = isset($data['marketPricePeriods']) ? $data['marketPricePeriods'] : null;
        $this->container['chargesSelected'] = isset($data['chargesSelected']) ? $data['chargesSelected'] : null;
        $this->container['accountingRule'] = isset($data['accountingRule']) ? $data['accountingRule'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shortName
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['shortName'];
    }

    /**
     * Sets shortName
     *
     * @param string $shortName shortName
     *
     * @return $this
     */
    public function setShortName($shortName)
    {
        $this->container['shortName'] = $shortName;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets currencyCode
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currencyCode'];
    }

    /**
     * Sets currencyCode
     *
     * @param string $currencyCode currencyCode
     *
     * @return $this
     */
    public function setCurrencyCode($currencyCode)
    {
        $this->container['currencyCode'] = $currencyCode;

        return $this;
    }

    /**
     * Gets digitsAfterDecimal
     *
     * @return int
     */
    public function getDigitsAfterDecimal()
    {
        return $this->container['digitsAfterDecimal'];
    }

    /**
     * Sets digitsAfterDecimal
     *
     * @param int $digitsAfterDecimal digitsAfterDecimal
     *
     * @return $this
     */
    public function setDigitsAfterDecimal($digitsAfterDecimal)
    {
        $this->container['digitsAfterDecimal'] = $digitsAfterDecimal;

        return $this;
    }

    /**
     * Gets inMultiplesOf
     *
     * @return int
     */
    public function getInMultiplesOf()
    {
        return $this->container['inMultiplesOf'];
    }

    /**
     * Sets inMultiplesOf
     *
     * @param int $inMultiplesOf inMultiplesOf
     *
     * @return $this
     */
    public function setInMultiplesOf($inMultiplesOf)
    {
        $this->container['inMultiplesOf'] = $inMultiplesOf;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets totalShares
     *
     * @return int
     */
    public function getTotalShares()
    {
        return $this->container['totalShares'];
    }

    /**
     * Sets totalShares
     *
     * @param int $totalShares totalShares
     *
     * @return $this
     */
    public function setTotalShares($totalShares)
    {
        $this->container['totalShares'] = $totalShares;

        return $this;
    }

    /**
     * Gets sharesIssued
     *
     * @return int
     */
    public function getSharesIssued()
    {
        return $this->container['sharesIssued'];
    }

    /**
     * Sets sharesIssued
     *
     * @param int $sharesIssued sharesIssued
     *
     * @return $this
     */
    public function setSharesIssued($sharesIssued)
    {
        $this->container['sharesIssued'] = $sharesIssued;

        return $this;
    }

    /**
     * Gets unitPrice
     *
     * @return int
     */
    public function getUnitPrice()
    {
        return $this->container['unitPrice'];
    }

    /**
     * Sets unitPrice
     *
     * @param int $unitPrice unitPrice
     *
     * @return $this
     */
    public function setUnitPrice($unitPrice)
    {
        $this->container['unitPrice'] = $unitPrice;

        return $this;
    }

    /**
     * Gets minimumShares
     *
     * @return int
     */
    public function getMinimumShares()
    {
        return $this->container['minimumShares'];
    }

    /**
     * Sets minimumShares
     *
     * @param int $minimumShares minimumShares
     *
     * @return $this
     */
    public function setMinimumShares($minimumShares)
    {
        $this->container['minimumShares'] = $minimumShares;

        return $this;
    }

    /**
     * Gets nominalShares
     *
     * @return int
     */
    public function getNominalShares()
    {
        return $this->container['nominalShares'];
    }

    /**
     * Sets nominalShares
     *
     * @param int $nominalShares nominalShares
     *
     * @return $this
     */
    public function setNominalShares($nominalShares)
    {
        $this->container['nominalShares'] = $nominalShares;

        return $this;
    }

    /**
     * Gets maximumShares
     *
     * @return int
     */
    public function getMaximumShares()
    {
        return $this->container['maximumShares'];
    }

    /**
     * Sets maximumShares
     *
     * @param int $maximumShares maximumShares
     *
     * @return $this
     */
    public function setMaximumShares($maximumShares)
    {
        $this->container['maximumShares'] = $maximumShares;

        return $this;
    }

    /**
     * Gets minimumActivePeriodForDividends
     *
     * @return int
     */
    public function getMinimumActivePeriodForDividends()
    {
        return $this->container['minimumActivePeriodForDividends'];
    }

    /**
     * Sets minimumActivePeriodForDividends
     *
     * @param int $minimumActivePeriodForDividends minimumActivePeriodForDividends
     *
     * @return $this
     */
    public function setMinimumActivePeriodForDividends($minimumActivePeriodForDividends)
    {
        $this->container['minimumActivePeriodForDividends'] = $minimumActivePeriodForDividends;

        return $this;
    }

    /**
     * Gets minimumactiveperiodFrequencyType
     *
     * @return int
     */
    public function getMinimumactiveperiodFrequencyType()
    {
        return $this->container['minimumactiveperiodFrequencyType'];
    }

    /**
     * Sets minimumactiveperiodFrequencyType
     *
     * @param int $minimumactiveperiodFrequencyType minimumactiveperiodFrequencyType
     *
     * @return $this
     */
    public function setMinimumactiveperiodFrequencyType($minimumactiveperiodFrequencyType)
    {
        $this->container['minimumactiveperiodFrequencyType'] = $minimumactiveperiodFrequencyType;

        return $this;
    }

    /**
     * Gets lockinPeriodFrequency
     *
     * @return int
     */
    public function getLockinPeriodFrequency()
    {
        return $this->container['lockinPeriodFrequency'];
    }

    /**
     * Sets lockinPeriodFrequency
     *
     * @param int $lockinPeriodFrequency lockinPeriodFrequency
     *
     * @return $this
     */
    public function setLockinPeriodFrequency($lockinPeriodFrequency)
    {
        $this->container['lockinPeriodFrequency'] = $lockinPeriodFrequency;

        return $this;
    }

    /**
     * Gets lockinPeriodFrequencyType
     *
     * @return int
     */
    public function getLockinPeriodFrequencyType()
    {
        return $this->container['lockinPeriodFrequencyType'];
    }

    /**
     * Sets lockinPeriodFrequencyType
     *
     * @param int $lockinPeriodFrequencyType lockinPeriodFrequencyType
     *
     * @return $this
     */
    public function setLockinPeriodFrequencyType($lockinPeriodFrequencyType)
    {
        $this->container['lockinPeriodFrequencyType'] = $lockinPeriodFrequencyType;

        return $this;
    }

    /**
     * Gets allowDividendCalculationForInactiveClients
     *
     * @return bool
     */
    public function getAllowDividendCalculationForInactiveClients()
    {
        return $this->container['allowDividendCalculationForInactiveClients'];
    }

    /**
     * Sets allowDividendCalculationForInactiveClients
     *
     * @param bool $allowDividendCalculationForInactiveClients allowDividendCalculationForInactiveClients
     *
     * @return $this
     */
    public function setAllowDividendCalculationForInactiveClients($allowDividendCalculationForInactiveClients)
    {
        $this->container['allowDividendCalculationForInactiveClients'] = $allowDividendCalculationForInactiveClients;

        return $this;
    }

    /**
     * Gets marketPricePeriods
     *
     * @return \Frengky\Fineract\Model\PostProductsMarketPricePeriods[]
     */
    public function getMarketPricePeriods()
    {
        return $this->container['marketPricePeriods'];
    }

    /**
     * Sets marketPricePeriods
     *
     * @param \Frengky\Fineract\Model\PostProductsMarketPricePeriods[] $marketPricePeriods marketPricePeriods
     *
     * @return $this
     */
    public function setMarketPricePeriods($marketPricePeriods)
    {
        $this->container['marketPricePeriods'] = $marketPricePeriods;

        return $this;
    }

    /**
     * Gets chargesSelected
     *
     * @return \Frengky\Fineract\Model\PostProductsChargesSelected[]
     */
    public function getChargesSelected()
    {
        return $this->container['chargesSelected'];
    }

    /**
     * Sets chargesSelected
     *
     * @param \Frengky\Fineract\Model\PostProductsChargesSelected[] $chargesSelected chargesSelected
     *
     * @return $this
     */
    public function setChargesSelected($chargesSelected)
    {
        $this->container['chargesSelected'] = $chargesSelected;

        return $this;
    }

    /**
     * Gets accountingRule
     *
     * @return int
     */
    public function getAccountingRule()
    {
        return $this->container['accountingRule'];
    }

    /**
     * Sets accountingRule
     *
     * @param int $accountingRule accountingRule
     *
     * @return $this
     */
    public function setAccountingRule($accountingRule)
    {
        $this->container['accountingRule'] = $accountingRule;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
