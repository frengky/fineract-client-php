<?php
/**
 * GetReportsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Apache Fineract
 *
 * Apache Fineract is a secure, multi-tenanted microfinance platform  The goal of the Apache Fineract API is to empower developers to build apps on top of the Apache Fineract Platform<br>The [reference app](https://cui.fineract.dev) (username: mifos, password: password) works on the same demo tenant as the interactive links in this documentation  - The API is organized around [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) - Find out more about Apache Fineract [here](/fineract-provider/api-docs/apiLive.htm#top) - You can [Try The API From Your Browser](/fineract-provider/api-docs/apiLive.htm#interact) - The Generic Options are available [here](/fineract-provider/api-docs/apiLive.htm#genopts) - Find out more about [Updating Dates and Numbers](/fineract-provider/api-docs/apiLive.htm#dates_and_numbers) - For the Authentication and the Basic of HTTP and HTTPS refer [here](/fineract-provider/api-docs/apiLive.htm#authentication_overview) - Check about ERROR codes [here](/fineract-provider/api-docs/apiLive.htm#errors)  Please refer to the [old documentation](/fineract-provider/api-docs/apiLive.htm) for any documentation queries
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@fineract.apache.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.25
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Frengky\Fineract\Model;

use \ArrayAccess;
use \Frengky\Fineract\ObjectSerializer;

/**
 * GetReportsResponse Class Doc Comment
 *
 * @category Class
 * @description GetReportsResponse
 * @package  Frengky\Fineract
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetReportsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetReportsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'reportName' => 'string',
'reportType' => 'string',
'reportSubType' => 'string',
'reportCategory' => 'string',
'description' => 'string',
'reportSql' => 'string',
'coreReport' => 'bool',
'useReport' => 'bool',
'reportParameters' => '\Frengky\Fineract\Model\ReportParameterData[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
'reportName' => null,
'reportType' => null,
'reportSubType' => null,
'reportCategory' => null,
'description' => null,
'reportSql' => null,
'coreReport' => null,
'useReport' => null,
'reportParameters' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'reportName' => 'reportName',
'reportType' => 'reportType',
'reportSubType' => 'reportSubType',
'reportCategory' => 'reportCategory',
'description' => 'description',
'reportSql' => 'reportSql',
'coreReport' => 'coreReport',
'useReport' => 'useReport',
'reportParameters' => 'reportParameters'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'reportName' => 'setReportName',
'reportType' => 'setReportType',
'reportSubType' => 'setReportSubType',
'reportCategory' => 'setReportCategory',
'description' => 'setDescription',
'reportSql' => 'setReportSql',
'coreReport' => 'setCoreReport',
'useReport' => 'setUseReport',
'reportParameters' => 'setReportParameters'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'reportName' => 'getReportName',
'reportType' => 'getReportType',
'reportSubType' => 'getReportSubType',
'reportCategory' => 'getReportCategory',
'description' => 'getDescription',
'reportSql' => 'getReportSql',
'coreReport' => 'getCoreReport',
'useReport' => 'getUseReport',
'reportParameters' => 'getReportParameters'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['reportName'] = isset($data['reportName']) ? $data['reportName'] : null;
        $this->container['reportType'] = isset($data['reportType']) ? $data['reportType'] : null;
        $this->container['reportSubType'] = isset($data['reportSubType']) ? $data['reportSubType'] : null;
        $this->container['reportCategory'] = isset($data['reportCategory']) ? $data['reportCategory'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['reportSql'] = isset($data['reportSql']) ? $data['reportSql'] : null;
        $this->container['coreReport'] = isset($data['coreReport']) ? $data['coreReport'] : null;
        $this->container['useReport'] = isset($data['useReport']) ? $data['useReport'] : null;
        $this->container['reportParameters'] = isset($data['reportParameters']) ? $data['reportParameters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets reportName
     *
     * @return string
     */
    public function getReportName()
    {
        return $this->container['reportName'];
    }

    /**
     * Sets reportName
     *
     * @param string $reportName reportName
     *
     * @return $this
     */
    public function setReportName($reportName)
    {
        $this->container['reportName'] = $reportName;

        return $this;
    }

    /**
     * Gets reportType
     *
     * @return string
     */
    public function getReportType()
    {
        return $this->container['reportType'];
    }

    /**
     * Sets reportType
     *
     * @param string $reportType reportType
     *
     * @return $this
     */
    public function setReportType($reportType)
    {
        $this->container['reportType'] = $reportType;

        return $this;
    }

    /**
     * Gets reportSubType
     *
     * @return string
     */
    public function getReportSubType()
    {
        return $this->container['reportSubType'];
    }

    /**
     * Sets reportSubType
     *
     * @param string $reportSubType reportSubType
     *
     * @return $this
     */
    public function setReportSubType($reportSubType)
    {
        $this->container['reportSubType'] = $reportSubType;

        return $this;
    }

    /**
     * Gets reportCategory
     *
     * @return string
     */
    public function getReportCategory()
    {
        return $this->container['reportCategory'];
    }

    /**
     * Sets reportCategory
     *
     * @param string $reportCategory reportCategory
     *
     * @return $this
     */
    public function setReportCategory($reportCategory)
    {
        $this->container['reportCategory'] = $reportCategory;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets reportSql
     *
     * @return string
     */
    public function getReportSql()
    {
        return $this->container['reportSql'];
    }

    /**
     * Sets reportSql
     *
     * @param string $reportSql reportSql
     *
     * @return $this
     */
    public function setReportSql($reportSql)
    {
        $this->container['reportSql'] = $reportSql;

        return $this;
    }

    /**
     * Gets coreReport
     *
     * @return bool
     */
    public function getCoreReport()
    {
        return $this->container['coreReport'];
    }

    /**
     * Sets coreReport
     *
     * @param bool $coreReport coreReport
     *
     * @return $this
     */
    public function setCoreReport($coreReport)
    {
        $this->container['coreReport'] = $coreReport;

        return $this;
    }

    /**
     * Gets useReport
     *
     * @return bool
     */
    public function getUseReport()
    {
        return $this->container['useReport'];
    }

    /**
     * Sets useReport
     *
     * @param bool $useReport useReport
     *
     * @return $this
     */
    public function setUseReport($useReport)
    {
        $this->container['useReport'] = $useReport;

        return $this;
    }

    /**
     * Gets reportParameters
     *
     * @return \Frengky\Fineract\Model\ReportParameterData[]
     */
    public function getReportParameters()
    {
        return $this->container['reportParameters'];
    }

    /**
     * Sets reportParameters
     *
     * @param \Frengky\Fineract\Model\ReportParameterData[] $reportParameters reportParameters
     *
     * @return $this
     */
    public function setReportParameters($reportParameters)
    {
        $this->container['reportParameters'] = $reportParameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
